{"version":3,"file":"Form.js","sources":["Form.js"],"names":[],"mappings":"AAQA,OAAA,kBAWA,cAAA,SAAA,EAAA,GAEA,YAEA,IAAA,mBAAA,IAAA,SAAA,EAAA,SAAA,CAIA,GAAA,GAAA,EAAA,EAAA,EAAA,CAEA,GAAA,KAEA,KAAA,IAAA,GAEA,GAAA,EAAA,SAAA,GAMA,GAFA,EAAA,EAAA,SAAA,GAEA,aAAA,EAAA,KAYA,GAAA,SAAA,EAAA,MACA,WAAA,EAAA,MACA,aAAA,EAAA,UACA,WAAA,EAAA,SAUA,GAAA,EAAA,OAEA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,KAEA,UAAA,EAAA,GAAA,MAAA,aAAA,EAAA,GAAA,QAIA,EAAA,EAAA,GAAA,MAEA,SAAA,OAAA,EAAA,IASA,GAAA,EAAA,KACA,EAAA,GAAA,SAAA,GARA,EAAA,GAAA,SAAA,KACA,EAAA,GAAA,SAAA,QAcA,GAAA,MAAA,EAAA,OAxCA,CAKA,GAAA,WAAA,OAAA,EAAA,IACA,QAGA,GAAA,MAAA,EAAA,OArBA,CAEA,GAAA,EAAA,MAAA,GAAA,EAAA,MAAA,EACA,CACA,EAAA,QAAA,EAAA,EACA,UAGA,EAAA,QAAA,EAAA,GAAA,SAAA,GAAA,KAwDA,YAAA,SAAA,GAEA,YAEA,IAAA,mBAAA,KAAA,EACA,QAGA,IAAA,GAAA,EAAA,EAAA,EAEA,KACA,EAAA,EAAA,QAEA,KAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAKA,GAHA,EAAA,EAAA,GACA,EAAA,EAAA,KAEA,aAAA,EAAA,KAoBA,GAAA,UAAA,EAAA,MAAA,EAAA,OAAA,CASA,GAAA,UAAA,EAAA,MAAA,EAAA,OAEA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAEA,UAAA,EAAA,GAAA,OAIA,EAAA,EAAA,GAAA,MAAA,GAEA,EAAA,GAAA,UAEA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAMA,GAAA,GAAA,EAAA,UAzBA,GAAA,UACA,EAAA,GAAA,EAAA,WAvBA,CAGA,GAAA,EAAA,GAAA,OACA,CACA,mBAAA,GAAA,EAAA,QACA,EAAA,OAGA,EAAA,SACA,EAAA,GAAA,KAAA,EAAA,MAGA,UAGA,EAAA,GAAA,EAAA,SAAA,GAAA,EAkCA,MAAA,IAWA,mBAAA,SAAA,EAAA,GAEA,YAEA,IAAA,GAAA,EAAA,EAAA,EAAA,KAEA,oBAAA,GAAA,gBACA,mBAAA,GAAA,cAEA,EAAA,EAAA,aACA,EAAA,MAAA,EAAA,MAAA,EAAA,EAAA,gBAAA,EAAA,EAAA,MAAA,GACA,EAAA,eAAA,EAAA,aAAA,EAAA,EAAA,QAEA,mBAAA,UAAA,WACA,mBAAA,UAAA,UAAA,cAEA,EAAA,QAEA,EAAA,SAAA,UAAA,cACA,EAAA,UAAA,GACA,EAAA,KAAA,EACA,EAAA","sourcesContent":["\n/**\n * Helper for <form> nodes\n *\n * @module qui/utils/Form\n * @author www.pcsg.de (Henning Leutz)\n */\n\ndefine('qui/utils/Form', {\n\n    /**\n     * Set an object to an formular DOMNode\n     * goes through all object attributes and set it to the appropriate form elements\n     *\n     * @method qui/utils/Form#setDataToForm\n     *\n     * @param {Object} data\n     * @param {DOMNode} form - Formular\n     */\n    setDataToForm : function(data, form)\n    {\n        \"use strict\";\n\n        if ( typeof form === 'undefined' || form.nodeName !== 'FORM' ) {\n            return;\n        }\n\n        var i, k, len, val, Elm;\n\n        data = data || {};\n\n        for ( k in data )\n        {\n            if ( !form.elements[ k ] ) {\n                continue;\n            }\n\n            Elm = form.elements[ k ];\n\n            if ( Elm.type === 'checkbox' )\n            {\n                if ( data[k] === false || data[k] === true )\n                {\n                    Elm.checked = data[k];\n                    continue;\n                }\n\n                Elm.checked = ( (data[k]).toInt() ? true : false );\n                continue;\n            }\n\n            if ( Elm.type === 'text' ||\n                 Elm.type === 'hidden' ||\n                 Elm.nodeName === 'TEXTAREA' ||\n                 Elm.nodeName === 'SELECT' )\n            {\n                if ( typeOf( data[k] ) == 'boolean' ) {\n                    continue;\n                }\n\n                Elm.value = data[k];\n                continue;\n            }\n\n            if ( Elm.length )\n            {\n                for ( i = 0, len = Elm.length; i < len; i++ )\n                {\n                    if ( Elm[ i ].type !== 'radio' && Elm[ i ].type !== 'checkbox' ) {\n                        continue;\n                    }\n\n                    val = Elm[ i ].value;\n\n                    if ( typeOf( data[ k ] ) == 'array' )\n                    {\n                        if ( data[ k ].contains( val ) ) {\n                            Elm[i].checked = true;\n                        }\n\n                        continue;\n                    }\n\n                    if ( val == data[ k ] ) {\n                        Elm[i].checked = true;\n                    }\n                }\n\n                continue;\n            }\n\n            Elm.value = data[ k ];\n        }\n    },\n\n    /**\n     * Get all Data from a Formular\n     *\n     * @method qui/utils/Form#getFormData\n     *\n     * @param {DOMNode} form - DOMNode Formular\n     * @return {Object}\n     */\n    getFormData : function(form)\n    {\n        \"use strict\";\n\n        if ( typeof form === 'undefined' || !form ) {\n            return {};\n        }\n\n        var i, n, len, Elm;\n\n        var result   = {},\n            elements = form.elements;\n\n        for ( i = 0, len = elements.length; i < len; i++ )\n        {\n            Elm = elements[i];\n            n   = Elm.name;\n\n            if ( Elm.type === 'checkbox' )\n            {\n                // array\n                if ( elements[ n ].length )\n                {\n                    if ( typeof result[ Elm.name ] === 'undefined' ) {\n                        result[ n ] = [];\n                    }\n\n                    if ( Elm.checked ) {\n                        result[ n ].push( Elm.value );\n                    }\n\n                    continue;\n                }\n\n                result[ n ] = Elm.checked ? true : false;\n                continue;\n            }\n\n            if ( Elm.type === 'radio' && !Elm.length )\n            {\n                if ( Elm.checked ) {\n                    result[ n ] = Elm.value;\n                }\n\n                continue;\n            }\n\n            if ( Elm.type === 'radio' && Elm.length )\n            {\n                for ( i = 0, len = Elm.length; i < len; i++ )\n                {\n                    if ( Elm[i].type !== 'radio' ) {\n                        continue;\n                    }\n\n                    result[ Elm[i].name ] = '';\n\n                    if ( Elm[i].checked )\n                    {\n                        result[ Elm[i].name ] = Elm[i].value;\n                        continue;\n                    }\n                }\n            }\n\n            result[ n ] = Elm.value;\n        }\n\n        return result;\n    },\n\n    /**\n     * Set text to the cursorposition of an textarea / input\n     *\n     * @method qui/utils/Form#insertTextAtCursor\n     *\n     * @param {DOMNode} el\n     * @param {String} text\n     */\n    insertTextAtCursor : function(el, text)\n    {\n        \"use strict\";\n\n        var val = el.value, endIndex, range;\n\n        if ( typeof el.selectionStart != \"undefined\" &&\n             typeof el.selectionEnd != \"undefined\")\n        {\n            endIndex = el.selectionEnd;\n            el.value = val.slice(0, el.selectionStart) + text + val.slice(endIndex);\n            el.selectionStart = el.selectionEnd = endIndex + text.length;\n\n        } else if ( typeof document.selection != \"undefined\" &&\n                    typeof document.selection.createRange != \"undefined\")\n        {\n            el.focus();\n\n            range = document.selection.createRange();\n            range.collapse( false );\n            range.text = text;\n            range.select();\n        }\n    }\n});\n\n"]}