{"version":3,"file":"Encoding.js","sources":["Encoding.js"],"names":[],"mappings":"AAQA,OAAA,sBAUA,WAAA,SAAA,GAGA,EAAA,EAAA,QAAA,QAAA,KAGA,KAAA,GAFA,GAAA,GAEA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,CAEA,GAAA,GAAA,EAAA,WAAA,EAEA,KAAA,EAEA,GAAA,OAAA,aAAA,GACA,EAAA,KAAA,KAAA,GAGA,GAAA,OAAA,aAAA,GAAA,EAAA,KACA,GAAA,OAAA,aAAA,GAAA,EAAA,OAIA,GAAA,OAAA,aAAA,GAAA,GAAA,KACA,GAAA,OAAA,aAAA,GAAA,EAAA,GAAA,KACA,GAAA,OAAA,aAAA,GAAA,EAAA,MAIA,MAAA,IAWA,WAAA,SAAA,GAEA,GAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAIA,KAFA,EAAA,EAAA,EAAA,EAAA,EAEA,EAAA,EAAA,QAEA,EAAA,EAAA,WAAA,GAEA,IAAA,GAEA,GAAA,OAAA,aAAA,GACA,KACA,EAAA,KAAA,IAAA,GAEA,EAAA,EAAA,WAAA,EAAA,GACA,GAAA,OAAA,cAAA,GAAA,IAAA,EAAA,GAAA,GACA,GAAA,IAGA,EAAA,EAAA,WAAA,EAAA,GACA,EAAA,EAAA,WAAA,EAAA,GAEA,GAAA,OAAA,cAAA,GAAA,IAAA,IAAA,GAAA,IAAA,EAAA,GAAA,GACA,GAAA,EAIA,OAAA","sourcesContent":["\n/**\n * Helper for encoding\n *\n * @module qui/utils/Encoding\n * @author www.pcsg.de (Henning Leutz)\n */\n\ndefine('qui/utils/Encoding',{\n\n    /**\n     * UTF8 encode\n     *\n     * @method qui/utils/Encoding#encodeUTF8\n     *\n     * @param {String} rohtext\n     * @return {String}\n     */\n    encodeUTF8 : function(rohtext)\n    {\n        // dient der Normalisierung des Zeilenumbruchs\n        rohtext     = rohtext.replace(/\\r\\n/g,\"\\n\");\n        var utftext = \"\";\n\n        for (var n=0; n<rohtext.length; n++)\n        {\n            // ermitteln des Unicodes des  aktuellen Zeichens\n            var c=rohtext.charCodeAt(n);\n            // alle Zeichen von 0-127 => 1byte\n            if (c<128)\n            {\n                utftext += String.fromCharCode(c);\n            } else if ((c>127) && (c<2048))\n            {\n                // alle Zeichen von 127 bis 2047 => 2byte\n                utftext += String.fromCharCode((c>>6)|192);\n                utftext += String.fromCharCode((c&63)|128);\n            } else\n            {\n                // alle Zeichen von 2048 bis 66536 => 3byte\n                utftext += String.fromCharCode((c>>12)|224);\n                utftext += String.fromCharCode(((c>>6)&63)|128);\n                utftext += String.fromCharCode((c&63)|128);\n            }\n        }\n\n        return utftext;\n    },\n\n    /**\n     * UTF8 Decode\n     *\n     * @method qui/utils/Encoding#decodeUTF8\n     *\n     * @param {String} utftext - UTF8 String\n     * @return {String}\n     */\n    decodeUTF8 : function(utftext)\n    {\n        var i, c, c1, c2, c3;\n        var plaintext = \"\";\n\n        i = c = c1 = c2 = 0;\n\n        while ( i < utftext.length )\n        {\n            c = utftext.charCodeAt( i );\n\n            if ( c < 128 )\n            {\n                plaintext += String.fromCharCode( c );\n                i++;\n            } else if ( ( c > 191 ) && ( c < 224 ) )\n            {\n                c2 = utftext.charCodeAt( i+1 );\n                plaintext += String.fromCharCode( ((c&31)<<6) | (c2&63) );\n                i+=2;\n            } else\n            {\n                c2 = utftext.charCodeAt( i+1 );\n                c3 = utftext.charCodeAt( i+2 );\n\n                plaintext += String.fromCharCode( ((c&15)<<12) | ((c2&63)<<6) | (c3&63) );\n                i+=3;\n            }\n        }\n\n        return plaintext;\n    }\n});\n\n"]}