{"version":3,"file":"Math.js","sources":["Math.js"],"names":[],"mappings":"AASA,OAAA,kBAgBA,UAAA,SAAA,EAAA,EAAA,GAEA,GAAA,EAgBA,OAdA,GAAA,IAEA,EAAA,IAAA,EAAA,EACA,EAAA,KAAA,MAAA,EAAA,EAAA,KACA,EAAA,GAGA,EAAA,IAEA,EAAA,IAAA,EAAA,EACA,EAAA,KAAA,MAAA,EAAA,EAAA,KACA,EAAA,IAIA,KAAA,EACA,KAAA,IAYA,mBAAA,SAAA,GAEA,MAAA,YACA,EAAA,WAAA,QAAA,IAAA,OAcA,QAAA,SAAA,EAAA,GAEA,MAAA,KAAA,GAAA,IAAA,EACA,GAGA,IAAA,EAAA,GAAA,SAiBA,SAAA,SAAA,EAAA,EAAA,GAYA,MAVA,GAAA,SAAA,EAAA,IAAA,IAAA,EAEA,KAAA,EAEA,EAAA,EAAA,EACA,KAAA,IAEA,EAAA,EAAA,IAIA,OAAA,EACA,MAAA","sourcesContent":["\n/**\n * Math helper\n * Helps with math operations\n *\n * @module qui/utils/Math\n * @author www.pcsg.de (Henning Leutz)\n */\n\ndefine('qui/utils/Math',{\n\n    /**\n     * Resize Variables in dependence on each other\n     *\n     * @method qui/utils/Math#resizeVar\n     *\n     * @param {Integer} var1 - First variable\n     * @param {Integer} var1 - Second variable\n     * @param {Integer} max  - Max value of each variable\n     *\n     * @return {Object} Object {\n     *     var1 : value,\n     *     var2 : value\n     * }\n     */\n    resizeVar : function(var1, var2, max)\n    {\n        var resize_by_percent;\n\n        if ( var1 > max )\n        {\n            resize_by_percent = (max * 100 )/ var1;\n            var2 = Math.round((var2 * resize_by_percent)/100);\n            var1 = max;\n        }\n\n        if ( var2 > max )\n        {\n            resize_by_percent = (max * 100 )/ var2;\n            var1 = Math.round((var1 * resize_by_percent)/100);\n            var2 = max;\n        }\n\n        return {\n            var1 : var1,\n            var2 : var2\n        };\n    },\n\n    /**\n     * Parse an amount to a real float value\n     *\n     * @method qui/utils/Math#parseAmountToFloat\n     *\n     * @param {String} str - Value, String\n     * @return {Float}\n     */\n    parseAmountToFloat : function(str)\n    {\n        return parseFloat(\n            str.toString().replace(',', '.')\n        );\n    },\n\n    /**\n     * Percent calculation\n     * Return the percentage integer value\n     *\n     * @method qui/utils/Math#percent\n     * @param Integer|Float $amount\n     * @param Integer|Float $total\n     *\n     * @return {Integer}\n     */\n    percent : function(amount, total)\n    {\n        if (amount === 0 || total === 0) {\n            return 0;\n        }\n\n        return ((amount * 100) / total).round();\n    },\n\n    /**\n     * Calc a VAT\n     *\n     * @method qui/utils/Math#calcMwst\n     *\n     * @param {Float|Integer|Bool} brutto\n     * @param {Float|Integer|Bool} netto\n     * @param {Integer} mwst\n     *\n     * @return {Object} Object {\n     *        brutto : brutto,\n     *         netto : netto\n     * }\n     */\n    calcMwst : function(brutto, netto, mwst)\n    {\n        mwst = (parseInt(mwst, 10) / 100) + 1;\n\n        if (brutto === false)\n        {\n            brutto = netto * mwst;\n        } else if (netto === false)\n        {\n            netto = brutto / mwst;\n        }\n\n        return {\n            brutto : brutto,\n            netto  : netto\n        };\n    }\n});\n\n"]}