{"version":3,"file":"Controls.js","sources":["../classes/DOM.js","../classes/Controls.js","../classes/QUI.js","../QUI.js","Controls.js"],"names":[],"mappings":"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","sourcesContent":["\n/**\n * The DOM class emulate similar methods\n * like a DOMNode to a normal Object\n *\n * Its easy to use and most classes inherit from {qui/classes/DOM}\n * All objects that inherited from {qui/classes/DOM} can easily extend with Attributes.\n *\n * @module qui/classes/DOM\n * @author www.quiqqer.com (Henning Leutz)\n *\n * @event onDestroy [this]\n * @event onSetAttribute [key, value]\n */\n\ndefine('qui/classes/DOM',[],function()\n{\n    \"use strict\";\n\n    window.$quistorage = {};\n\n    /**\n     * The DOM class emulate similar methods\n     * like a DOMNode to a normal Object\n     *\n     * @class qui/classes/DOM\n     *\n     * @param {Object} options -\n     *         With options you can set attributes or extend the Object width methods and events\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Implements : [ Options, Events ],\n        Type       : 'qui/classes/DOM',\n\n        options : {},\n        $uid    : null,\n\n        initialize : function(options)\n        {\n            options = options || {};\n\n            if ( options.events )\n            {\n                this.addEvents( options.events );\n                delete options.events;\n            }\n\n            if ( options.methods )\n            {\n                Object.append( this, options.methods );\n                delete options.methods;\n            }\n\n            this.setAttributes( options );\n            this.fireEvent( 'init', [ this ] );\n        },\n\n        /**\n         * If this.TYPE is set, this.Type will be return\n         *\n         * @method qui/classes/DOM#$family\n         * @return {String} Type of the Object\n         * @ignore\n         */\n        $family : function()\n        {\n            if ( typeof this.Type !== 'undefined' ) {\n                return this.Type;\n            }\n\n            return typeOf( this );\n        },\n\n        /**\n         * Get the Unique ID from the Object\n         *\n         * @method qui/classes/DOM#getId\n         * @return {String} Object ID\n         */\n        getId : function()\n        {\n            if ( !this.$uid ) {\n                this.$uid = String.uniqueID();\n            }\n\n            return this.$uid;\n        },\n\n        /**\n         * Get the type from the Object\n         *\n         * @method qui/classes/DOM#getType\n         * @return {String} The type of the object\n         */\n        getType : function()\n        {\n            return typeOf( this );\n        },\n\n        /**\n         * Set an attribute to the Object\n         * You can extend the Object with everything you like\n         * You can extend the Object width more than the default options\n         *\n         * @method qui/classes/DOM#setAttribute\n         *\n         * @param {String} k - Name of the Attribute\n         * @param {Object|String|Integer|Array} v - value\n         *\n         * @return {this} The wanted attribute\n         */\n        setAttribute : function(k, v)\n        {\n            this.fireEvent('setAttribute', [ k, v ]);\n\n            if ( typeof this.options[ k ] !== 'undefined' )\n            {\n                this.options[ k ] = v;\n                return;\n            }\n\n            var oid = Slick.uidOf( this );\n\n            if ( typeof window.$quistorage[ oid ] === 'undefined' ) {\n                window.$quistorage[ oid ] = {};\n            }\n\n            window.$quistorage[ oid ][ k ] = v;\n\n            return this;\n        },\n\n        /**\n         * Destroy the Object and all relationsships to some Object\n         *\n         * @method qui/classes/DOM#destroy\n         */\n        destroy : function()\n        {\n            this.fireEvent( 'destroy', [ this ] );\n\n            // storage clear\n            var oid = Slick.uidOf( this );\n\n            if ( oid in window.$quistorage ) {\n                delete window.$quistorage[ oid ];\n            }\n\n            this.removeEvents();\n        },\n\n        /**\n         * Alias for setAttributes, please use setAttributes()\n         *\n         * @see qui/classes/DOM#setAttributes()\n         * @method qui/classes/DOM#setOptions\n         */\n        setOptions : function(options)\n        {\n            this.setAttributes( options );\n        },\n\n        /**\n         * If you want set more than one attribute\n         *\n         * @method qui/classes/DOM#setAttributes\n         *\n         * @param {Object} attributes - Object with attributes\n         * @return {this} self\n         *\n         * @example Object.setAttributes({\n         *   attr1 : '1',\n         *   attr2 : []\n         * })\n         */\n        setAttributes : function(attributes)\n        {\n            attributes = attributes || {};\n\n            for ( var k in attributes ) {\n                this.setAttribute( k, attributes[k] );\n            }\n\n            return this;\n        },\n\n        /**\n         * Return an attribute of the Object\n         * returns the not the default attributes, too\n         *\n         * @method qui/classes/DOM#setAttribute\n         * @param {Object} attributes - Object width attributes\n         * @return {unknown_type|Bool} attribute\n         */\n        getAttribute : function(k)\n        {\n            if ( k in this.options ) {\n                return this.options[ k ];\n            }\n\n            var oid = Slick.uidOf( this );\n\n            if ( typeof window.$quistorage[ oid ] === 'undefined' ) {\n                return false;\n            }\n\n            if ( typeof window.$quistorage[ oid ][ k ] !== 'undefined' ) {\n                return window.$quistorage[ oid ][ k ];\n            }\n\n            return false;\n        },\n\n        /**\n         * Alias for getAttributes, please use getAttributes()\n         *\n         * @method qui/classes/DOM#getAllAttributes\n         * @see qui/classes/DOM#getAttributes()\n         * @depricated\n         */\n        getAllAttributes : function()\n        {\n            return this.getAttributes();\n        },\n\n        /**\n         * Return the default attributes\n         *\n         * @method qui/classes/DOM#getAttributes\n         * @return {Object} attributes\n         */\n        getAttributes : function()\n        {\n            return this.options;\n        },\n\n        /**\n         * Return the attributes which stored into the QUI Storage\n         *\n         * @return {Object}\n         */\n        getStorageAttributes : function()\n        {\n            var oid = Slick.uidOf( this );\n\n            if ( oid in window.$quistorage  ) {\n                return window.$quistorage[ oid ];\n            }\n\n            return {};\n        },\n\n        /**\n         * Return true if a attribute exist\n         *\n         * @method qui/classes/DOM#existAttribute\n         * @param {String} k - wanted attribute\n         * @return {Bool} true or false\n         */\n        existAttribute : function(k)\n        {\n            if ( typeof this.options[ k ] !== 'undefined' ) {\n                return true;\n            }\n\n            var oid = Slick.uidOf( this );\n\n            if ( window.$quistorage[ oid ] && window.$quistorage[ oid ][ k ] ) {\n                return true;\n            }\n\n            return false;\n        },\n\n        /**\n         * Return the binded functions of the event name\n         *\n         * @method qui/classes/DOM#existAttribute\n         * @param {String} eventname - wanted event\n         * @return {Array|false} Event list\n         */\n        getEvents : function(eventname)\n        {\n            if ( typeof this.$events === 'undefined') {\n                return false;\n            }\n\n            if ( typeof this.$events[ eventname ] !== 'undefined') {\n                return this.$events[ eventname ];\n            }\n\n            return false;\n        }\n    });\n});\n\n","\n/**\n * QUI control Manager\n *\n * @module qui/classes/Controls\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require require\n * @require qui/classes/DOM\n */\n\ndefine('qui/classes/Controls',[\n\n    'require',\n    'qui/classes/DOM'\n\n], function(require, DOM)\n{\n    \"use strict\";\n\n    /**\n     * @class qui/classes/Controls\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Extends : DOM,\n        Type    : 'qui/classes/Controls',\n\n        initialize : function()\n        {\n            this.$controls = {};\n            this.$cids     = {};\n            this.$types    = {};\n        },\n\n        /**\n         * Return all controls with tha name\n         *\n         * @method qui/classes/Controls#get\n         * @param {String} n - Name of the Control\n         * @return {Array} All Controls with the needle name\n         */\n        get : function(n)\n        {\n            if ( typeof this.$controls[ n ] === 'undefined' ) {\n                return [];\n            }\n\n            return this.$controls[ n ];\n        },\n\n        /**\n         * Get the Controls by its unique id\n         *\n         * @method qui/classes/Controls#getById\n         * @param {String|Integer} id - ID of the wanted Control\n         * @return {qui/controls/Control|false} a QUI control, based on qui/controls/Control or false\n         */\n        getById : function(id)\n        {\n            if ( id in this.$cids ) {\n                return this.$cids[ id ];\n            }\n\n            return false;\n        },\n\n        /**\n         * Return all controls from a type\n         *\n         * @method qui/classes/Controls#getByType\n         * @return {Array}\n         */\n        getByType : function(type)\n        {\n            if ( type in this.$types ) {\n                return this.$types[ type ];\n            }\n\n            return [];\n        },\n\n        /**\n         * Load a control by a control type\n         *\n         * @method qui/classes/Controls#loadType\n         * @param {String} type\n         * @param {Function} onload\n         *\n         * @example QUI.Controls.loadType('qui/controls/taskbar/Task', function(Modul) { })\n         */\n        loadType : function(type, onload)\n        {\n            if ( !type.match( /qui\\// ) ) {\n                type = 'qui/'+ type;\n            }\n\n            require( [ modul ] , onload );\n        },\n\n        /**\n         * Is the Object a QUI Control?\n         *\n         * @method qui/controls/Control#isControl\n         * @return {Bool} true or false\n         */\n        isControl : function(Obj)\n        {\n            if ( typeof Obj === 'undefined' || !Obj ) {\n                return false;\n            }\n\n            if ( typeof Obj.getType !== 'undefined' ) {\n                return true;\n            }\n\n            return false;\n        },\n\n        /**\n         * Add a Control to the list\n         *\n         * @method qui/controls/Control#add\n         * @param {qui/controls/Control} Control\n         */\n        add : function(Control)\n        {\n            var s = this,\n                n = Control.getAttribute( 'name' ),\n                t = typeOf( Control );\n\n            if ( !n || n === '' ) {\n                n = '#unknown';\n            }\n\n            if ( typeof this.$controls[ n ] === 'undefined' ) {\n                this.$controls[ n ] = [];\n            }\n\n            if ( typeof this.$types[ t ] === 'undefined' ) {\n                this.$types[ t ] = [];\n            }\n\n            this.$controls[ n ].push( Control );\n            this.$types[ t ].push( Control );\n\n            this.$cids[ Control.getId() ] = Control;\n\n            Control.addEvent('onDestroy', function() {\n                s.destroy( Control );\n            });\n        },\n\n        /**\n         * Destroy a Control\n         *\n         * @method qui/controls/Control#destroy\n         * @param {qui/controls/Control} Control\n         */\n        destroy : function(Control)\n        {\n            var n  = Control.getAttribute( 'name' ),\n                t  = typeOf( Control ),\n                id = Control.getId();\n\n            if ( !n || n === '' ) {\n                n = '#unknown';\n            }\n\n            if ( typeof this.$cids[ id ] !== 'undefined' ) {\n                delete this.$cids[ id ];\n            }\n\n            var i, len;\n            var tmp = [];\n\n            // refresh controls\n            if ( typeof this.$controls[ n ] !== 'undefined' )\n            {\n                for ( i = 0, len = this.$controls[ n ].length; i < len; i++ )\n                {\n                    if ( id !== this.$controls[ n ][ i ].getId() ) {\n                        tmp.push( this.$controls[ n ][ i ] );\n                    }\n                }\n\n                this.$controls[ n ] = tmp;\n\n                if ( !tmp.length ) {\n                    delete this.$controls[ n ];\n                }\n            }\n\n            // refresh types\n            tmp = [];\n\n            if ( typeof this.$types[ t ] !== 'undefined' )\n            {\n                for ( i = 0, len = this.$types[ t ].length; i < len; i++ )\n                {\n                    if ( id !== this.$types[ t ][ i ].getId() ) {\n                        tmp.push( this.$types[ t ][ i ] );\n                    }\n                }\n            }\n\n            this.$types[ t ] = tmp;\n        }\n    });\n});\n","\n/**\n * The Main Class for the Main QUI Object\n *\n * @module qui/classes/QUI\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require require\n * @require qui/classes/DOM\n * @require qui/classes/Controls\n *\n * @event onError : if there is an error\n */\n\ndefine('qui/classes/QUI',[\n\n    'require',\n    'qui/classes/DOM',\n    'qui/classes/Controls'\n\n], function(require, DOM, Controls)\n{\n    \"use strict\";\n\n    /**\n     * The QUIQQER main object\n     *\n     * @class QUI\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Extends : DOM,\n        Type    : 'qui/classes/QUI',\n\n        initialize : function(options)\n        {\n            /**\n             * defaults\n             */\n            this.setAttributes({\n                'debug'       : false,\n                'fetchErrors' : true\n            });\n\n            this.parent( options );\n\n            // error handling\n            if ( this.getAttribute('fetchErrors') )\n            {\n                require.onError = function(requireType, requireModules)\n                {\n                    self.trigger(\n                        'ERROR :'+ requireType +'\\n'+\n                        'Require :'+ requireModules\n                    );\n                };\n\n                window.onerror = this.trigger.bind( this );\n            }\n\n            this.Controls       = new Controls();\n            this.MessageHandler = null;\n        },\n\n        /**\n         * Creates Namespaces\n         * based on YAHOO code - nice solution!!\n         *\n         * @method qui/classes/QUI#namespace\n         * @example QUI.namespace('my.name.space'); -> QUI.my.name.space\n         * @depricated\n         */\n        namespace : function()\n        {\n            var tlen;\n\n            var a = arguments,\n                o = this,\n                i = 0,\n                j = 0,\n\n                len  = a.length,\n                tok  = null,\n                name = null;\n\n            // iterate on the arguments\n            for ( ; i < len; i = i + 1 )\n            {\n                tok  = a[ i ].split( \".\" );\n                tlen = tok.length;\n\n                // iterate on the object tokens\n                for ( j = 0; j < tlen; j = j + 1 )\n                {\n                    name = tok[j];\n                    o[ name ] = o[ name ] || {};\n                    o = o[ name ];\n                }\n            }\n\n            return o;\n        },\n\n        /**\n         * parse qui controls\n         *\n         * @param {DOMNode} Parent - [optional], if no parent given, document.body would be use\n         * @param {Function} callback - [optional]\n         */\n        parse : function(Parent, callback)\n        {\n            if ( typeof Parent === 'undefined' ) {\n                Parent = document.body;\n            }\n\n            // parse all qui controls\n            var nodes = Parent.getElements( '[data-qui]' ),\n                list  = nodes.map(function(Elm) {\n                    return Elm.get( 'data-qui' );\n                });\n\n            require(list, function()\n            {\n                var i, len, Cls, Elm;\n\n                for ( i = 0, len = list.length; i < len; i++ )\n                {\n                    Cls = arguments[ i ];\n                    Elm = nodes[ i ];\n\n                    // already initialized\n                    if ( Elm.get( 'data-quiid' ) ) {\n                        continue;\n                    }\n\n                    if ( Elm.get( 'html' ).trim() !== '' )\n                    {\n                        new Cls().import( Elm );\n                    } else\n                    {\n                        new Cls().replaces( Elm );\n                    }\n                }\n\n                if ( typeof callback !== 'undefined' ) {\n                    callback();\n                }\n            });\n        },\n\n        /**\n         * Fire the Error Event\n         *\n         * @method qui/classes/QUI#triggerError\n         *\n         * @param {qui/classes/messages/Message|Exception} Exception - Exception Objekt\n         * @param {Object} params    - Weitere Paramater (optional)\n         * @return {this} self\n         */\n        triggerError : function(Exception, params)\n        {\n            this.trigger( Exception.getMessage() );\n\n            return this;\n        },\n\n        /**\n         * trigger some messages to the console\n         *\n         * @method qui/classes/QUI#trigger\n         *\n         * @param {String} msg\n         * @param {String} url\n         * @param {Integer} linenumer\n         *\n         * @return {this} self\n         */\n        trigger : function(msg, url, linenumber)\n        {\n            var message = msg +\"\\n\"+\n                          \"File: \"+ url +\"\\n\"+\n                          \"Linenumber: \"+ linenumber;\n\n            this.fireEvent( 'error', [ msg, url, linenumber ] );\n\n            return this;\n        },\n\n        /**\n         * Return the message handler\n         *\n         * @method qui/classes/QUI#getMessageHandler\n         * @param {Function} callback\n         */\n        getMessageHandler : function(callback)\n        {\n            if ( typeof this.$execGetMessageHandler !== 'undefined' && !this.MessageHandler )\n            {\n                this.$execGetMessageHandler = true;\n\n                (function() {\n                    this.getMessageHandler( callback );\n                }).delay( 20, this );\n\n                return;\n            }\n\n            this.$execGetMessageHandler = true;\n\n\n            if ( this.MessageHandler )\n            {\n                callback( this.MessageHandler );\n                return;\n            }\n\n            var self = this;\n\n            require(['qui/controls/messages/Handler'], function(Handler)\n            {\n                self.MessageHandler = new Handler();\n\n                callback( self.MessageHandler );\n            });\n        },\n\n        /**\n         * Return the message handler\n         *\n         * @method qui/classes/QUI#getControls\n         * @param {Function} callback\n         */\n        getControls : function(callback)\n        {\n            if ( this.Controls )\n            {\n                callback( this.Controls );\n                return;\n            }\n        }\n    });\n});\n\n","\n/**\n * The Main QUI Object\n * create window.QUI\n *\n * @module qui/QUI\n * @author www.pcsg.de (Henning Leutz)\n */\n\ndefine('qui/QUI',['qui/classes/QUI'], function(QUIClass)\n{\n    \"use strict\";\n\n    if ( typeof window.QUI === 'undefined' ) {\n        window.QUI = new QUIClass();\n    }\n\n    document.fireEvent( 'qui-loaded' );\n\n    document.addEvent('domready', function() {\n        QUI.parse( document.body );\n    });\n\n    return window.QUI;\n});\n\n","\n/**\n * Utils for the controls\n * Helps the controls\n *\n * @module qui/utils/Controls\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require qui/QUI\n */\n\ndefine('qui/utils/Controls',['qui/QUI'], function(QUI, Panel)\n{\n    \"use strict\";\n\n    return {\n\n        /**\n         * Checks if the string is a fontawesome css class\n         *\n         * @method qui/utils/Controls#isFontAwesomeClass\n         * @param {String} str - FontAweomse icon-class or an image path\n         * @returns {Bool}\n         */\n        isFontAwesomeClass : function(icon)\n        {\n            if ( !icon ) {\n                return false;\n            }\n\n            if ( ( icon.match( /icon-/ ) || icon.match( /fa-/ ) ) &&\n                 !icon.match( /\\./ ) )\n            {\n                return true;\n            }\n\n            return false;\n        },\n\n        /**\n         * Highlights a control\n         *\n         * @method qui/utils/Controls#highlight\n         * @param {DOMNode} Element\n         */\n        highlight : function(Element)\n        {\n            if ( !Element ) {\n                return;\n            }\n\n            var quiid = Element.get( 'data-quiid' );\n\n            if ( !quiid ) {\n                return;\n            }\n\n            QUI.Controls.getById( quiid ).highlight();\n        },\n\n        /**\n         * Normalize a control, if it is was highlighted\n         *\n         * @method qui/utils/Controls#normalize\n         * @param {DOMNode} Element\n         */\n        normalize : function(Element)\n        {\n            if ( !Element ) {\n                return;\n            }\n\n            var quiid = Element.get( 'data-quiid' );\n\n            if ( !quiid ) {\n                return;\n            }\n\n            QUI.Controls.getById( quiid ).normalize();\n        }\n\n    };\n});\n"]}