{"version":3,"file":"Object.js","sources":["Object.js"],"names":[],"mappings":"AASA,OAAA,oBAWA,QAAA,SAAA,EAAA,GAKA,MAHA,GAAA,MACA,EAAA,MAEA,OAAA,OAAA,EAAA,IAaA,YAAA,SAAA,EAAA,GAIA,IAAA,GAFA,GAAA,EAAA,MAAA,KAEA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EACA,CACA,GAAA,mBAAA,GAAA,EAAA,IACA,OAAA,CAGA,GAAA,EAAA,EAAA,IAGA,OAAA,GAaA,SAAA,SAAA,EAAA,GAIA,IAAA,GAFA,GAAA,EAAA,MAAA,KAEA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EACA,CACA,GAAA,mBAAA,GAAA,EAAA,IACA,MAAA,OAGA,GAAA,EAAA,EAAA,IAGA,MAAA,IAYA,UAAA,SAAA,EAAA,GAEA,GAAA,GAAA,EACA,EAAA,EAAA,MAAA,KACA,EAAA,CAIA,KAFA,EAAA,EAAA,OAEA,EAAA,EAAA,EAAA,EAAA,IAGA,mBAAA,GAAA,EAAA,MACA,EAAA,EAAA,QAGA,EAAA,EAAA,EAAA,GAGA,OAAA","sourcesContent":["\n/**\n * Utils for objects\n * Helps with objects -> {}\n *\n * @module qui/utils/Object\n * @author www.pcsg.de (Henning Leutz)\n */\n\ndefine('qui/utils/Object',{\n\n    /**\n     * Combines two Object\n     *\n     * @method qui/utils/Object#combine\n     *\n     * @param {Object} first - First Object\n     * @param {Object} second - Second Object\n     * @return {Object}\n     */\n    combine : function(first, second)\n    {\n        first  = first || {};\n        second = second || {};\n\n        return Object.append(first, second);\n    },\n\n    /**\n     * Exists the namespace/ entries / values in the object?\n     *\n     * @method qui/utils/Object#existsValue\n     * @example Object.existsValue('my.sub.vars');\n     *\n     * @param {Sring} namespace\n     * @param {Object} obj\n     * @returns {Boolean}\n     */\n    existsValue : function( namespace, obj )\n    {\n        var parts = namespace.split( '.' );\n\n        for ( var i = 0, len = parts.length; i < len; ++i )\n        {\n            if ( typeof obj[ parts[ i ] ] === 'undefined' ) {\n                return false;\n            }\n\n            obj = obj[ parts[ i ] ];\n        }\n\n        return true;\n    },\n\n    /**\n     * Return the value of a namespace/ entry / value in the object\n     *\n     * @method qui/utils/Object#getValue\n     * @example Object.getValue('my.sub.vars');\n     *\n     * @param {Sring} namespace\n     * @param {Object} obj\n     * @returns {unknown_type}\n     */\n    getValue : function( namespace, obj )\n    {\n        var parts = namespace.split( '.' );\n\n        for ( var i = 0, len = parts.length; i < len; ++i )\n        {\n            if ( typeof obj[ parts[ i ] ] === 'undefined' ) {\n                return undefined;\n            }\n\n            obj = obj[ parts[ i ] ];\n        }\n\n        return obj;\n    },\n\n    /**\n     * Create a namespace in or extend a object\n     *\n     * @method qui/utils/Object#namespace\n     * @param {String} namespace\n     * @param {Object} obj\n     *\n     * @return {Object}\n     */\n    namespace : function extend( namespace, obj )\n    {\n        var pl, i;\n        var parts  = namespace.split('.'),\n            parent = obj;\n\n        pl = parts.length;\n\n        for ( i = 0; i < pl; i++ )\n        {\n            //create a property if it doesnt exist\n            if ( typeof parent[ parts[ i ] ] === 'undefined' ) {\n                parent[ parts[ i ] ] = {};\n            }\n\n            parent = parent[ parts[ i ] ];\n        }\n\n        return parent;\n    }\n});\n\n"]}