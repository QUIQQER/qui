{"version":3,"file":"Filter.js","sources":["../../classes/DOM.js","../../classes/Controls.js","../../classes/QUI.js","../../QUI.js","../../classes/Locale.js","../../Locale.js","../../lib/require-css/normalize.js","../../lib/require-css/css.js","../Control.js","../../utils/Controls.js","../../utils/NoSelect.js","../../utils/Elements.js","../buttons/Button.js","Filter.js"],"names":[],"mappings":"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","sourcesContent":["\n/**\n * The DOM class emulate similar methods\n * like a DOMNode to a normal Object\n *\n * Its easy to use and most classes inherit from {qui/classes/DOM}\n * All objects that inherited from {qui/classes/DOM} can easily extend with Attributes.\n *\n * @module qui/classes/DOM\n * @author www.quiqqer.com (Henning Leutz)\n *\n * @event onDestroy [this]\n * @event onSetAttribute [key, value]\n */\n\ndefine('qui/classes/DOM',[],function()\n{\n    \"use strict\";\n\n    window.$quistorage = {};\n\n    /**\n     * The DOM class emulate similar methods\n     * like a DOMNode to a normal Object\n     *\n     * @class qui/classes/DOM\n     *\n     * @param {Object} options -\n     *         With options you can set attributes or extend the Object width methods and events\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Implements : [ Options, Events ],\n        Type       : 'qui/classes/DOM',\n\n        options : {},\n        $uid    : null,\n\n        initialize : function(options)\n        {\n            options = options || {};\n\n            if ( options.events )\n            {\n                this.addEvents( options.events );\n                delete options.events;\n            }\n\n            if ( options.methods )\n            {\n                Object.append( this, options.methods );\n                delete options.methods;\n            }\n\n            this.setAttributes( options );\n            this.fireEvent( 'init', [ this ] );\n        },\n\n        /**\n         * If this.TYPE is set, this.Type will be return\n         *\n         * @method qui/classes/DOM#$family\n         * @return {String} Type of the Object\n         * @ignore\n         */\n        $family : function()\n        {\n            if ( typeof this.Type !== 'undefined' ) {\n                return this.Type;\n            }\n\n            return typeOf( this );\n        },\n\n        /**\n         * Get the Unique ID from the Object\n         *\n         * @method qui/classes/DOM#getId\n         * @return {String} Object ID\n         */\n        getId : function()\n        {\n            if ( !this.$uid ) {\n                this.$uid = String.uniqueID();\n            }\n\n            return this.$uid;\n        },\n\n        /**\n         * Get the type from the Object\n         *\n         * @method qui/classes/DOM#getType\n         * @return {String} The type of the object\n         */\n        getType : function()\n        {\n            return typeOf( this );\n        },\n\n        /**\n         * Set an attribute to the Object\n         * You can extend the Object with everything you like\n         * You can extend the Object width more than the default options\n         *\n         * @method qui/classes/DOM#setAttribute\n         *\n         * @param {String} k - Name of the Attribute\n         * @param {Object|String|Integer|Array} v - value\n         *\n         * @return {this} The wanted attribute\n         */\n        setAttribute : function(k, v)\n        {\n            this.fireEvent('setAttribute', [ k, v ]);\n\n            if ( typeof this.options[ k ] !== 'undefined' )\n            {\n                this.options[ k ] = v;\n                return;\n            }\n\n            var oid = Slick.uidOf( this );\n\n            if ( typeof window.$quistorage[ oid ] === 'undefined' ) {\n                window.$quistorage[ oid ] = {};\n            }\n\n            window.$quistorage[ oid ][ k ] = v;\n\n            return this;\n        },\n\n        /**\n         * Destroy the Object and all relationsships to some Object\n         *\n         * @method qui/classes/DOM#destroy\n         */\n        destroy : function()\n        {\n            this.fireEvent( 'destroy', [ this ] );\n\n            // storage clear\n            var oid = Slick.uidOf( this );\n\n            if ( oid in window.$quistorage ) {\n                delete window.$quistorage[ oid ];\n            }\n\n            this.removeEvents();\n        },\n\n        /**\n         * Alias for setAttributes, please use setAttributes()\n         *\n         * @see qui/classes/DOM#setAttributes()\n         * @method qui/classes/DOM#setOptions\n         */\n        setOptions : function(options)\n        {\n            this.setAttributes( options );\n        },\n\n        /**\n         * If you want set more than one attribute\n         *\n         * @method qui/classes/DOM#setAttributes\n         *\n         * @param {Object} attributes - Object with attributes\n         * @return {this} self\n         *\n         * @example Object.setAttributes({\n         *   attr1 : '1',\n         *   attr2 : []\n         * })\n         */\n        setAttributes : function(attributes)\n        {\n            attributes = attributes || {};\n\n            for ( var k in attributes ) {\n                this.setAttribute( k, attributes[k] );\n            }\n\n            return this;\n        },\n\n        /**\n         * Return an attribute of the Object\n         * returns the not the default attributes, too\n         *\n         * @method qui/classes/DOM#setAttribute\n         * @param {Object} attributes - Object width attributes\n         * @return {unknown_type|Bool} attribute\n         */\n        getAttribute : function(k)\n        {\n            if ( k in this.options ) {\n                return this.options[ k ];\n            }\n\n            var oid = Slick.uidOf( this );\n\n            if ( typeof window.$quistorage[ oid ] === 'undefined' ) {\n                return false;\n            }\n\n            if ( typeof window.$quistorage[ oid ][ k ] !== 'undefined' ) {\n                return window.$quistorage[ oid ][ k ];\n            }\n\n            return false;\n        },\n\n        /**\n         * Alias for getAttributes, please use getAttributes()\n         *\n         * @method qui/classes/DOM#getAllAttributes\n         * @see qui/classes/DOM#getAttributes()\n         * @depricated\n         */\n        getAllAttributes : function()\n        {\n            return this.getAttributes();\n        },\n\n        /**\n         * Return the default attributes\n         *\n         * @method qui/classes/DOM#getAttributes\n         * @return {Object} attributes\n         */\n        getAttributes : function()\n        {\n            return this.options;\n        },\n\n        /**\n         * Return the attributes which stored into the QUI Storage\n         *\n         * @return {Object}\n         */\n        getStorageAttributes : function()\n        {\n            var oid = Slick.uidOf( this );\n\n            if ( oid in window.$quistorage  ) {\n                return window.$quistorage[ oid ];\n            }\n\n            return {};\n        },\n\n        /**\n         * Return true if a attribute exist\n         *\n         * @method qui/classes/DOM#existAttribute\n         * @param {String} k - wanted attribute\n         * @return {Bool} true or false\n         */\n        existAttribute : function(k)\n        {\n            if ( typeof this.options[ k ] !== 'undefined' ) {\n                return true;\n            }\n\n            var oid = Slick.uidOf( this );\n\n            if ( window.$quistorage[ oid ] && window.$quistorage[ oid ][ k ] ) {\n                return true;\n            }\n\n            return false;\n        },\n\n        /**\n         * Return the binded functions of the event name\n         *\n         * @method qui/classes/DOM#existAttribute\n         * @param {String} eventname - wanted event\n         * @return {Array|false} Event list\n         */\n        getEvents : function(eventname)\n        {\n            if ( typeof this.$events === 'undefined') {\n                return false;\n            }\n\n            if ( typeof this.$events[ eventname ] !== 'undefined') {\n                return this.$events[ eventname ];\n            }\n\n            return false;\n        }\n    });\n});\n\n","\n/**\n * QUI control Manager\n *\n * @module qui/classes/Controls\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require require\n * @require qui/classes/DOM\n */\n\ndefine('qui/classes/Controls',[\n\n    'require',\n    'qui/classes/DOM'\n\n], function(require, DOM)\n{\n    \"use strict\";\n\n    /**\n     * @class qui/classes/Controls\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Extends : DOM,\n        Type    : 'qui/classes/Controls',\n\n        initialize : function()\n        {\n            this.$controls = {};\n            this.$cids     = {};\n            this.$types    = {};\n        },\n\n        /**\n         * Return all controls with tha name\n         *\n         * @method qui/classes/Controls#get\n         * @param {String} n - Name of the Control\n         * @return {Array} All Controls with the needle name\n         */\n        get : function(n)\n        {\n            if ( typeof this.$controls[ n ] === 'undefined' ) {\n                return [];\n            }\n\n            return this.$controls[ n ];\n        },\n\n        /**\n         * Get the Controls by its unique id\n         *\n         * @method qui/classes/Controls#getById\n         * @param {String|Integer} id - ID of the wanted Control\n         * @return {qui/controls/Control|false} a QUI control, based on qui/controls/Control or false\n         */\n        getById : function(id)\n        {\n            if ( id in this.$cids ) {\n                return this.$cids[ id ];\n            }\n\n            return false;\n        },\n\n        /**\n         * Return all controls from a type\n         *\n         * @method qui/classes/Controls#getByType\n         * @return {Array}\n         */\n        getByType : function(type)\n        {\n            if ( type in this.$types ) {\n                return this.$types[ type ];\n            }\n\n            return [];\n        },\n\n        /**\n         * Load a control by a control type\n         *\n         * @method qui/classes/Controls#loadType\n         * @param {String} type\n         * @param {Function} onload\n         *\n         * @example QUI.Controls.loadType('qui/controls/taskbar/Task', function(Modul) { })\n         */\n        loadType : function(type, onload)\n        {\n            if ( !type.match( /qui\\// ) ) {\n                type = 'qui/'+ type;\n            }\n\n            require( [ modul ] , onload );\n        },\n\n        /**\n         * Is the Object a QUI Control?\n         *\n         * @method qui/controls/Control#isControl\n         * @return {Bool} true or false\n         */\n        isControl : function(Obj)\n        {\n            if ( typeof Obj === 'undefined' || !Obj ) {\n                return false;\n            }\n\n            if ( typeof Obj.getType !== 'undefined' ) {\n                return true;\n            }\n\n            return false;\n        },\n\n        /**\n         * Add a Control to the list\n         *\n         * @method qui/controls/Control#add\n         * @param {qui/controls/Control} Control\n         */\n        add : function(Control)\n        {\n            var s = this,\n                n = Control.getAttribute( 'name' ),\n                t = typeOf( Control );\n\n            if ( !n || n === '' ) {\n                n = '#unknown';\n            }\n\n            if ( typeof this.$controls[ n ] === 'undefined' ) {\n                this.$controls[ n ] = [];\n            }\n\n            if ( typeof this.$types[ t ] === 'undefined' ) {\n                this.$types[ t ] = [];\n            }\n\n            this.$controls[ n ].push( Control );\n            this.$types[ t ].push( Control );\n\n            this.$cids[ Control.getId() ] = Control;\n\n            Control.addEvent('onDestroy', function() {\n                s.destroy( Control );\n            });\n        },\n\n        /**\n         * Destroy a Control\n         *\n         * @method qui/controls/Control#destroy\n         * @param {qui/controls/Control} Control\n         */\n        destroy : function(Control)\n        {\n            var n  = Control.getAttribute( 'name' ),\n                t  = typeOf( Control ),\n                id = Control.getId();\n\n            if ( !n || n === '' ) {\n                n = '#unknown';\n            }\n\n            if ( typeof this.$cids[ id ] !== 'undefined' ) {\n                delete this.$cids[ id ];\n            }\n\n            var i, len;\n            var tmp = [];\n\n            // refresh controls\n            if ( typeof this.$controls[ n ] !== 'undefined' )\n            {\n                for ( i = 0, len = this.$controls[ n ].length; i < len; i++ )\n                {\n                    if ( id !== this.$controls[ n ][ i ].getId() ) {\n                        tmp.push( this.$controls[ n ][ i ] );\n                    }\n                }\n\n                this.$controls[ n ] = tmp;\n\n                if ( !tmp.length ) {\n                    delete this.$controls[ n ];\n                }\n            }\n\n            // refresh types\n            tmp = [];\n\n            if ( typeof this.$types[ t ] !== 'undefined' )\n            {\n                for ( i = 0, len = this.$types[ t ].length; i < len; i++ )\n                {\n                    if ( id !== this.$types[ t ][ i ].getId() ) {\n                        tmp.push( this.$types[ t ][ i ] );\n                    }\n                }\n            }\n\n            this.$types[ t ] = tmp;\n        }\n    });\n});\n","\n/**\n * The Main Class for the Main QUI Object\n *\n * @module qui/classes/QUI\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require require\n * @require qui/classes/DOM\n * @require qui/classes/Controls\n *\n * @event onError : if there is an error\n */\n\ndefine('qui/classes/QUI',[\n\n    'require',\n    'qui/classes/DOM',\n    'qui/classes/Controls'\n\n], function(require, DOM, Controls)\n{\n    \"use strict\";\n\n    /**\n     * The QUIQQER main object\n     *\n     * @class QUI\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Extends : DOM,\n        Type    : 'qui/classes/QUI',\n\n        initialize : function(options)\n        {\n            /**\n             * defaults\n             */\n            this.setAttributes({\n                'debug'       : false,\n                'fetchErrors' : true\n            });\n\n            this.parent( options );\n\n            // error handling\n            if ( this.getAttribute('fetchErrors') )\n            {\n                require.onError = function(requireType, requireModules)\n                {\n                    self.trigger(\n                        'ERROR :'+ requireType +'\\n'+\n                        'Require :'+ requireModules\n                    );\n                };\n\n                window.onerror = this.trigger.bind( this );\n            }\n\n            this.Controls       = new Controls();\n            this.MessageHandler = null;\n        },\n\n        /**\n         * Creates Namespaces\n         * based on YAHOO code - nice solution!!\n         *\n         * @method qui/classes/QUI#namespace\n         * @example QUI.namespace('my.name.space'); -> QUI.my.name.space\n         * @depricated\n         */\n        namespace : function()\n        {\n            var tlen;\n\n            var a = arguments,\n                o = this,\n                i = 0,\n                j = 0,\n\n                len  = a.length,\n                tok  = null,\n                name = null;\n\n            // iterate on the arguments\n            for ( ; i < len; i = i + 1 )\n            {\n                tok  = a[ i ].split( \".\" );\n                tlen = tok.length;\n\n                // iterate on the object tokens\n                for ( j = 0; j < tlen; j = j + 1 )\n                {\n                    name = tok[j];\n                    o[ name ] = o[ name ] || {};\n                    o = o[ name ];\n                }\n            }\n\n            return o;\n        },\n\n        /**\n         * parse qui controls\n         *\n         * @param {DOMNode} Parent - [optional], if no parent given, document.body would be use\n         * @param {Function} callback - [optional]\n         */\n        parse : function(Parent, callback)\n        {\n            if ( typeof Parent === 'undefined' ) {\n                Parent = document.body;\n            }\n\n            // parse all qui controls\n            var nodes = Parent.getElements( '[data-qui]' ),\n                list  = nodes.map(function(Elm) {\n                    return Elm.get( 'data-qui' );\n                });\n\n            require(list, function()\n            {\n                var i, len, Cls, Elm;\n\n                for ( i = 0, len = list.length; i < len; i++ )\n                {\n                    Cls = arguments[ i ];\n                    Elm = nodes[ i ];\n\n                    // already initialized\n                    if ( Elm.get( 'data-quiid' ) ) {\n                        continue;\n                    }\n\n                    if ( Elm.get( 'html' ).trim() !== '' )\n                    {\n                        new Cls().import( Elm );\n                    } else\n                    {\n                        new Cls().replaces( Elm );\n                    }\n                }\n\n                if ( typeof callback !== 'undefined' ) {\n                    callback();\n                }\n            });\n        },\n\n        /**\n         * Fire the Error Event\n         *\n         * @method qui/classes/QUI#triggerError\n         *\n         * @param {qui/classes/messages/Message|Exception} Exception - Exception Objekt\n         * @param {Object} params    - Weitere Paramater (optional)\n         * @return {this} self\n         */\n        triggerError : function(Exception, params)\n        {\n            this.trigger( Exception.getMessage() );\n\n            return this;\n        },\n\n        /**\n         * trigger some messages to the console\n         *\n         * @method qui/classes/QUI#trigger\n         *\n         * @param {String} msg\n         * @param {String} url\n         * @param {Integer} linenumer\n         *\n         * @return {this} self\n         */\n        trigger : function(msg, url, linenumber)\n        {\n            var message = msg +\"\\n\"+\n                          \"File: \"+ url +\"\\n\"+\n                          \"Linenumber: \"+ linenumber;\n\n            this.fireEvent( 'error', [ msg, url, linenumber ] );\n\n            return this;\n        },\n\n        /**\n         * Return the message handler\n         *\n         * @method qui/classes/QUI#getMessageHandler\n         * @param {Function} callback\n         */\n        getMessageHandler : function(callback)\n        {\n            if ( typeof this.$execGetMessageHandler !== 'undefined' && !this.MessageHandler )\n            {\n                this.$execGetMessageHandler = true;\n\n                (function() {\n                    this.getMessageHandler( callback );\n                }).delay( 20, this );\n\n                return;\n            }\n\n            this.$execGetMessageHandler = true;\n\n\n            if ( this.MessageHandler )\n            {\n                callback( this.MessageHandler );\n                return;\n            }\n\n            var self = this;\n\n            require(['qui/controls/messages/Handler'], function(Handler)\n            {\n                self.MessageHandler = new Handler();\n\n                callback( self.MessageHandler );\n            });\n        },\n\n        /**\n         * Return the message handler\n         *\n         * @method qui/classes/QUI#getControls\n         * @param {Function} callback\n         */\n        getControls : function(callback)\n        {\n            if ( this.Controls )\n            {\n                callback( this.Controls );\n                return;\n            }\n        }\n    });\n});\n\n","\n/**\n * The Main QUI Object\n * create window.QUI\n *\n * @module qui/QUI\n * @author www.pcsg.de (Henning Leutz)\n */\n\ndefine('qui/QUI',['qui/classes/QUI'], function(QUIClass)\n{\n    \"use strict\";\n\n    if ( typeof window.QUI === 'undefined' ) {\n        window.QUI = new QUIClass();\n    }\n\n    document.fireEvent( 'qui-loaded' );\n\n    document.addEvent('domready', function() {\n        QUI.parse( document.body );\n    });\n\n    return window.QUI;\n});\n\n","\n/**\n * Locale translation class\n *\n * @module qui/classes/Locale\n * @author www.pcg.de (Henning Leutz)\n *\n * @require qui/classes/DOM\n *\n * @event onError [ {String}, {this} ] - triggered if no_translation === false and no translation exist\n */\n\ndefine('qui/classes/Locale',['qui/classes/DOM'], function(DOM)\n{\n    \"use strict\";\n\n    /**\n     * @class qui/classes/Locale\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Extends : DOM,\n        Type    : 'qui/classes/Locale',\n\n        /**\n         * Current lang, use getCurrent() to get the lang\n         */\n        current : 'en',\n\n        /**\n         * Available langs\n         */\n        langs : {},\n\n        /**\n         * No translation flag, makes no translation\n         * if true, get() returns the translation group\n         * usefull to show all translation groups\n         */\n        no_translation : false,\n\n        /**\n         * init\n         *\n         * @param options - dom options\n         */\n        initialize : function(options)\n        {\n            this.parent( options );\n        },\n\n        /**\n         * Set the current lang\n         *\n         * @method qui/classes/Locale#setCurrent\n         * @param {String} lang\n         */\n        setCurrent : function(lang)\n        {\n            this.current = lang;\n        },\n\n        /**\n         * Return the current Lang\n         *\n         * @method qui/classes/Locale#getCurrent\n         * @return {String}\n         */\n        getCurrent : function()\n        {\n            return this.current;\n        },\n\n        /**\n         * Set a translation for a translation group\n         *\n         * @method qui/classes/Locale#set\n         *\n         * @param {String} lang - language, which is translated\n         * @param {String} group - group, which is translated\n         * @param {String|Object} values - variable(s) which is translated\n         * @param {String} value - the translation value\n         *\n         * @example Locale.set(\"en\", \"my/group\", \"my.translation.variable\", \"Some text is translated\")\n         * @example Locale.set(\"de\", \"my/group\", \"my.translation.variable\", \"Ein Text der übersetzt wird\")\n         */\n        set : function(lang, group, values, value)\n        {\n            if ( !this.langs[ lang ] ) {\n                this.langs[ lang ] = {};\n            }\n\n            if ( !this.langs[ lang ][ group ] ) {\n                this.langs[ lang ][ group ] = {};\n            }\n\n            if ( typeof value !== 'undefined' )\n            {\n                this.langs[ lang ][ set ][ values ] = value;\n                return this;\n            }\n\n            var _key = this.langs[ lang ][ group ];\n\n            for ( var k in values ) {\n                _key[ k ] = values[ k ];\n            }\n\n            this.langs[ lang ][ group ] = _key;\n        },\n\n        /**\n         * Retrurn the translation of a translation group\n         *\n         * @method qui/classes/Locale#get\n         *\n         * @param {String} group - Group of the translation\n         * @param {String} value - Translation value / name\n         * @param {Object} repl  - Assoziative Array of replacements\n         * @return {String}\n         *\n         * @example Locale.get('my/group', 'my.translation.variable')\n         * @example Locale.get('my/group', 'my.translation.variable', {\n         *      placeholder : 'my replace'\n         * })\n         */\n        get : function(group, value, repl)\n        {\n            if ( typeof repl === 'undefined' ) {\n                return this.$get( group, value );\n            }\n\n            var result = this.$get( group, value );\n\n            for ( group in repl ) {\n                result = result.replace( '['+ group +']', repl[ group ] );\n            }\n\n            return result;\n        },\n\n        /**\n         * Helper for get translation\n         *\n         * @method qui/classes/Locale#$get\n         *\n         * @param {String} key   - Group / Key of the translation\n         * @param {String} value - Translation value / name\n         * @param {Object} repl  - Assoziative Array of replacements\n         * @return {String}\n         */\n        $get : function(key, value)\n        {\n            if ( this.no_translation ) {\n                return '['+ key +'] '+ value;\n            }\n\n            if ( this.langs[ this.current ] &&\n                 this.langs[ this.current ][ key ] &&\n                 this.langs[ this.current ][ key ][ value ] )\n            {\n                return this.langs[ this.current ][ key ][ value ];\n            }\n\n            if ( this.langs[ this.current ] &&\n                 this.langs[ this.current ][ key ] &&\n                 typeof value === 'undefined' )\n            {\n                return this.langs[ this.current ][ key ];\n            }\n\n            this.fireEvent('error', [\n                 'No translation found for ['+ key +'] '+ value,\n                 this\n            ]);\n\n            return '['+ key +'] '+ value;\n        }\n    });\n});\n\n","\n/**\n * The QUI Locale Object\n *\n * @module qui/Locale\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require qui/classes/Locale\n */\n\ndefine('qui/Locale',['qui/classes/Locale'], function(QUILocale)\n{\n    \"use strict\";\n\n    if ( typeof window.QUILocale === 'undefined' ) {\n        window.QUILocale = new QUILocale();\n    }\n\n    return window.QUILocale;\n});\n\n","//>>excludeStart('excludeRequireCss', pragmas.excludeRequireCss)\n/*\n * css.normalize.js\n *\n * CSS Normalization\n *\n * CSS paths are normalized based on an optional basePath and the RequireJS config\n *\n * Usage:\n *   normalize(css, fromBasePath, toBasePath);\n *\n * css: the stylesheet content to normalize\n * fromBasePath: the absolute base path of the css relative to any root (but without ../ backtracking)\n * toBasePath: the absolute new base path of the css relative to the same root\n * \n * Absolute dependencies are left untouched.\n *\n * Urls in the CSS are picked up by regular expressions.\n * These will catch all statements of the form:\n *\n * url(*)\n * url('*')\n * url(\"*\")\n * \n * @import '*'\n * @import \"*\"\n *\n * (and so also @import url(*) variations)\n *\n * For urls needing normalization\n *\n */\n\ndefine('qui/lib/require-css/normalize',[],function() {\n  \n  // regular expression for removing double slashes\n  // eg http://www.example.com//my///url/here -> http://www.example.com/my/url/here\n  var slashes = /([^:])\\/+/g\n  var removeDoubleSlashes = function(uri) {\n    return uri.replace(slashes, '$1/');\n  }\n\n  // given a relative URI, and two absolute base URIs, convert it from one base to another\n  var protocolRegEx = /[^\\:\\/]*:\\/\\/([^\\/])*/;\n  var absUrlRegEx = /^(\\/|data:)/;\n  function convertURIBase(uri, fromBase, toBase) {\n    if (uri.match(absUrlRegEx) || uri.match(protocolRegEx))\n      return uri;\n    uri = removeDoubleSlashes(uri);\n    // if toBase specifies a protocol path, ensure this is the same protocol as fromBase, if not\n    // use absolute path at fromBase\n    var toBaseProtocol = toBase.match(protocolRegEx);\n    var fromBaseProtocol = fromBase.match(protocolRegEx);\n    if (fromBaseProtocol && (!toBaseProtocol || toBaseProtocol[1] != fromBaseProtocol[1] || toBaseProtocol[2] != fromBaseProtocol[2]))\n      return absoluteURI(uri, fromBase);\n    \n    else {\n      return relativeURI(absoluteURI(uri, fromBase), toBase);\n    }\n  };\n  \n  // given a relative URI, calculate the absolute URI\n  function absoluteURI(uri, base) {\n    if (uri.substr(0, 2) == './')\n      uri = uri.substr(2);\n\n    // absolute urls are left in tact\n    if (uri.match(absUrlRegEx) || uri.match(protocolRegEx))\n      return uri;\n    \n    var baseParts = base.split('/');\n    var uriParts = uri.split('/');\n    \n    baseParts.pop();\n    \n    while (curPart = uriParts.shift())\n      if (curPart == '..')\n        baseParts.pop();\n      else\n        baseParts.push(curPart);\n    \n    return baseParts.join('/');\n  };\n\n\n  // given an absolute URI, calculate the relative URI\n  function relativeURI(uri, base) {\n    \n    // reduce base and uri strings to just their difference string\n    var baseParts = base.split('/');\n    baseParts.pop();\n    base = baseParts.join('/') + '/';\n    i = 0;\n    while (base.substr(i, 1) == uri.substr(i, 1))\n      i++;\n    while (base.substr(i, 1) != '/')\n      i--;\n    base = base.substr(i + 1);\n    uri = uri.substr(i + 1);\n\n    // each base folder difference is thus a backtrack\n    baseParts = base.split('/');\n    var uriParts = uri.split('/');\n    out = '';\n    while (baseParts.shift())\n      out += '../';\n    \n    // finally add uri parts\n    while (curPart = uriParts.shift())\n      out += curPart + '/';\n    \n    return out.substr(0, out.length - 1);\n  };\n  \n  var normalizeCSS = function(source, fromBase, toBase) {\n\n    fromBase = removeDoubleSlashes(fromBase);\n    toBase = removeDoubleSlashes(toBase);\n\n    var urlRegEx = /@import\\s*(\"([^\"]*)\"|'([^']*)')|url\\s*\\(\\s*(\\s*\"([^\"]*)\"|'([^']*)'|[^\\)]*\\s*)\\s*\\)/ig;\n    var result, url, source;\n\n    while (result = urlRegEx.exec(source)) {\n      url = result[3] || result[2] || result[5] || result[6] || result[4];\n      var newUrl;\n      newUrl = convertURIBase(url, fromBase, toBase);\n      var quoteLen = result[5] || result[6] ? 1 : 0;\n      source = source.substr(0, urlRegEx.lastIndex - url.length - quoteLen - 1) + newUrl + source.substr(urlRegEx.lastIndex - quoteLen - 1);\n      urlRegEx.lastIndex = urlRegEx.lastIndex + (newUrl.length - url.length);\n    }\n    \n    return source;\n  };\n  \n  normalizeCSS.convertURIBase = convertURIBase;\n  normalizeCSS.absoluteURI = absoluteURI;\n  normalizeCSS.relativeURI = relativeURI;\n  \n  return normalizeCSS;\n});\n//>>excludeEnd('excludeRequireCss')\n;\n","/*\n * Require-CSS RequireJS css! loader plugin\n * 0.1.2\n * Guy Bedford 2013\n * MIT\n */\n\n/*\n *\n * Usage:\n *  require(['css!./mycssFile']);\n *\n * Tested and working in (up to latest versions as of March 2013):\n * Android\n * iOS 6\n * IE 6 - 10\n * Chome 3 - 26\n * Firefox 3.5 - 19\n * Opera 10 - 12\n * \n * browserling.com used for virtual testing environment\n *\n * Credit to B Cavalier & J Hann for the IE 6 - 9 method,\n * refined with help from Martin Cermak\n * \n * Sources that helped along the way:\n * - https://developer.mozilla.org/en-US/docs/Browser_detection_using_the_user_agent\n * - http://www.phpied.com/when-is-a-stylesheet-really-loaded/\n * - https://github.com/cujojs/curl/blob/master/src/curl/plugin/css.js\n *\n */\n\ndefine('qui/lib/require-css/css',[],function() {\n//>>excludeStart('excludeRequireCss', pragmas.excludeRequireCss)\n  if (typeof window == 'undefined')\n    return { load: function(n, r, load){ load() } };\n\n  var head = document.getElementsByTagName('head')[0];\n\n  var engine = window.navigator.userAgent.match(/Trident\\/([^ ;]*)|AppleWebKit\\/([^ ;]*)|Opera\\/([^ ;]*)|rv\\:([^ ;]*)(.*?)Gecko\\/([^ ;]*)|MSIE\\s([^ ;]*)/) || 0;\n\n  // use <style> @import load method (IE < 9, Firefox < 18)\n  var useImportLoad = false;\n  \n  // set to false for explicit <link> load checking when onload doesn't work perfectly (webkit)\n  var useOnload = true;\n\n  // trident / msie\n  if (engine[1] || engine[7])\n    useImportLoad = parseInt(engine[1]) < 6 || parseInt(engine[7]) <= 9;\n  // webkit\n  else if (engine[2])\n    useOnload = false;\n  // gecko\n  else if (engine[4])\n    useImportLoad = parseInt(engine[4]) < 18;\n  \n//>>excludeEnd('excludeRequireCss')\n  //main api object\n  var cssAPI = {};\n\n//>>excludeStart('excludeRequireCss', pragmas.excludeRequireCss)\n  cssAPI.pluginBuilder = './css-builder';\n\n  // <style> @import load method\n  var curStyle, curSheet;\n  var createStyle = function () {\n    curStyle = document.createElement('style');\n    head.appendChild(curStyle);\n    curSheet = curStyle.styleSheet || curStyle.sheet;\n  }\n  var ieCnt = 0;\n  var ieLoads = [];\n  var ieCurCallback;\n  \n  var createIeLoad = function(url) {\n    ieCnt++;\n    if (ieCnt == 32) {\n      createStyle();\n      ieCnt = 0;\n    }\n    curSheet.addImport(url);\n    curStyle.onload = processIeLoad;\n  }\n  var processIeLoad = function() {\n    ieCurCallback();\n \n    var nextLoad = ieLoads.shift();\n \n    if (!nextLoad) {\n      ieCurCallback = null;\n      return;\n    }\n \n    ieCurCallback = nextLoad[1];\n    createIeLoad(nextLoad[0]);\n  }\n  var importLoad = function(url, callback) {\n    if (!curSheet || !curSheet.addImport)\n      createStyle();\n\n    if (curSheet && curSheet.addImport) {\n      // old IE\n      if (ieCurCallback) {\n        ieLoads.push([url, callback]);\n      }\n      else {\n        createIeLoad(url);\n        ieCurCallback = callback;\n      }\n    }\n    else {\n      // old Firefox\n      curStyle.textContent = '@import \"' + url + '\";';\n\n      var loadInterval = setInterval(function() {\n        try {\n          curStyle.sheet.cssRules;\n          clearInterval(loadInterval);\n          callback();\n        } catch(e) {}\n      }, 10);\n    }\n  }\n\n  // <link> load method\n  var linkLoad = function(url, callback) {\n    var link = document.createElement('link');\n    link.type = 'text/css';\n    link.rel = 'stylesheet';\n    if (useOnload)\n      link.onload = function() {\n        link.onload = function() {};\n        // for style dimensions queries, a short delay can still be necessary\n        setTimeout(callback, 7);\n      }\n    else\n      var loadInterval = setInterval(function() {\n        for (var i = 0; i < document.styleSheets.length; i++) {\n          var sheet = document.styleSheets[i];\n          if (sheet.href == link.href) {\n            clearInterval(loadInterval);\n            return callback();\n          }\n        }\n      }, 10);\n    link.href = url;\n    head.appendChild(link);\n  }\n\n//>>excludeEnd('excludeRequireCss')\n  cssAPI.normalize = function(name, normalize) {\n    if (name.substr(name.length - 4, 4) == '.css')\n      name = name.substr(0, name.length - 4);\n\n    return normalize(name);\n  }\n\n//>>excludeStart('excludeRequireCss', pragmas.excludeRequireCss)\n  cssAPI.load = function(cssId, req, load, config) {\n\n    (useImportLoad ? importLoad : linkLoad)(req.toUrl(cssId + '.css'), load);\n\n  }\n\n//>>excludeEnd('excludeRequireCss')\n  return cssAPI;\n});\n\n","\n/**\n * Control standard parent class\n * All controls should inherit {qui/controls/Control}\n *\n * @module qui/controls/Control\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require qui/QUI\n * @require qui/classes/DOM\n * @require css!qui/controls/Control.css\n *\n * @event onInject [ this ]\n * @event onHighlight [ this ]\n * @event onNormalize [ this ]\n * @event onResize [ this ]\n */\n\ndefine('qui/controls/Control',[\n\n    'qui/QUI',\n    'qui/Locale',\n    'qui/classes/DOM',\n\n    'css!qui/controls/Control.css'\n\n], function(QUI, Locale, DOM)\n{\n    \"use strict\";\n\n    /**\n     * @class qui/controls/Control\n     *\n     * @event onDrawBegin - if inject() is used, the Event will be triggered\n     * @event onDrawEnd   - if inject() is used, the Event will be triggered\n     *\n     * @param {Object} options\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Extends : DOM,\n        Type    : 'qui/controls/Control',\n\n        $Parent : null,\n\n        options : {\n            name : ''\n        },\n\n        /**\n         * Init function for inherited classes\n         * If a Class inherit from qui/controls/Control, please use this.parent()\n         * so the control are registered in QUI.Controls\n         * and you can get the control with QUI.Controls.get()\n         *\n         * @method qui/controls/Control#init\n         * @param {Object} option - option params\n         */\n        initialize : function(options)\n        {\n            this.parent( options );\n\n            this.addEvent( 'onDestroy', function()\n            {\n                if ( typeof this.$Elm !== 'undefined' && this.$Elm ) {\n                    this.$Elm.destroy();\n                }\n\n                this.$Elm = null;\n            }.bind( this ));\n\n            QUI.Controls.add( this );\n        },\n\n        /**\n         * Create Method, can be overwritten for an own DOM creation\n         *\n         * @method qui/controls/Control#create\n         * @return {DOMNode}\n         */\n        create : function()\n        {\n            if ( this.$Elm ) {\n                return this.$Elm;\n            }\n\n            this.$Elm = new Element( 'div.qui-control' );\n            this.$Elm.set( 'data-quiid', this.getId() );\n\n\n            return this.$Elm;\n        },\n\n        /**\n         * Inject the DOMNode of the Control to a Parent\n         *\n         * @method qui/controls/Control#inject\n         * @param {DOMNode|qui/controls/Control}\n         * @param {pos} [optional]\n         * @return {this}\n         */\n        inject : function(Parent, pos)\n        {\n            this.fireEvent( 'drawBegin', [ this ] );\n\n            if ( typeof this.$Elm === 'undefined' || !this.$Elm ) {\n                this.$Elm = this.create();\n            }\n\n            if ( typeof QUI !== 'undefined' &&\n                 typeof QUI.Controls !== 'undefined' &&\n                 QUI.Controls.isControl( Parent ) )\n            {\n                // QUI Control insertion\n                Parent.appendChild( this );\n            } else\n            {\n                // DOMNode insertion\n                this.$Elm.inject( Parent, pos );\n            }\n\n            this.$Elm.set( 'data-quiid', this.getId() );\n\n            this.fireEvent( 'inject', [ this ] );\n\n            return this;\n        },\n\n        /**\n         * Import the control to the element\n         * The Elm node is the main element, now, and are returned with getElm()\n         * if you want to insert the control to a specific place, use inject(),\n         *\n         * if the html from the control already exists, use import\n         * The import() method is for controls, where the html of the control are generated by the server\n         *\n         * @param {DOMNode} Elm - Elm node\n         * @return {this}\n         */\n        import : function(Elm)\n        {\n            this.$Elm = Elm;\n            this.fireEvent( 'import', [ this, Elm ] );\n\n            return this;\n        },\n\n        /**\n         * Replaces the passed element with the control element.\n         * and assumes the characteristics of the element\n         *\n         * @param {DOMNode} Elm - Elm node\n         * @return {this}\n         */\n        replaces : function(Elm)\n        {\n            if ( this.$Elm ) {\n                return this.$Elm;\n            }\n\n            if ( \"styles\" in Elm ) {\n                this.setAttribute( 'styles', Elm.styles );\n            }\n\n            this.$Elm = this.create();\n\n            this.$Elm.set( 'data-quiid', this.getId() );\n            this.$Elm.set( 'data-qui', Elm.get('data-qui') );\n\n            if ( Elm.getParent() ) {\n                this.$Elm.replaces( Elm );\n            }\n\n            return this;\n        },\n\n        /**\n         * Save the control\n         * Placeholder method for sub controls\n         *\n         * The save method returns all needed attributes for saving the control to the workspace\n         * You can overwrite the method in sub classes to save specific attributes\n         *\n         * @method qui/controls/Control#serialize\n         * @return {Object}\n         */\n        serialize : function()\n        {\n            return {\n                attributes : this.getAttributes(),\n                type       : this.getType()\n            };\n        },\n\n        /**\n         * import the saved attributes and the data\n         * You can overwrite the method in sub classes to import specific attributes\n         *\n         * @method qui/controls/Control#unserialize\n         * @param {Object} data\n         */\n        unserialize : function(data)\n        {\n            if ( data.attributes ) {\n                this.setAttributes( data.attributes );\n            }\n        },\n\n        /**\n         * Get the DOMNode from the Button\n         *\n         * @method qui/controls/Control#getElm\n         * @return {DOMNode}\n         */\n        getElm : function()\n        {\n            if ( typeof this.$Elm === 'undefined' || !this.$Elm ) {\n                this.create();\n            }\n\n            return this.$Elm;\n        },\n\n        /**\n         * If the control have a QUI_Object Parent\n         *\n         * @method qui/controls/Control#getParent\n         * @return {qui/controls/Control|false}\n         */\n        getParent : function()\n        {\n            return this.$Parent || false;\n        },\n\n        /**\n         * Set the Parent to the Button\n         *\n         * @method qui/controls/Control#setParent\n         *\n         * @param {qui/controls/Control} Parent\n         * @return {this}\n         */\n        setParent : function(Parent)\n        {\n            this.$Parent = Parent;\n            return this;\n        },\n\n        /**\n         * Return a path string from the parent names\n         *\n         * @method qui/controls/Control#getPath\n         * @return {String}\n         */\n        getPath : function()\n        {\n            var path   = '/'+ this.getAttribute( 'name' ),\n                Parent = this.getParent();\n\n            if ( !Parent ) {\n                return path;\n            }\n\n            return Parent.getPath() + path;\n        },\n\n        /**\n         * Hide the control\n         *\n         * @method qui/controls/Control#hide\n         * @return {this}\n         */\n        hide : function()\n        {\n            if ( this.$Elm ) {\n                this.$Elm.setStyle( 'display', 'none' );\n            }\n\n            return this;\n        },\n\n        /**\n         * Display / Show the control\n         *\n         * @method qui/controls/Control#show\n         * @return {this}\n         */\n        show : function()\n        {\n            if ( this.$Elm ) {\n                this.$Elm.setStyle( 'display', null );\n            }\n\n            return this;\n        },\n\n        /**\n         * Highlight the control\n         *\n         * @method qui/controls/Control#highlight\n         * @return {this}\n         */\n        highlight : function()\n        {\n            this.fireEvent( 'highlight', [ this ] );\n            return this;\n        },\n\n        /**\n         * Dehighlight / Normalize the control\n         *\n         * @method qui/controls/Control#normalize\n         * @return {this}\n         */\n        normalize : function()\n        {\n            this.fireEvent( 'normalize', [ this ] );\n            return this;\n        },\n\n        /**\n         * Focus the DOMNode Element\n         *\n         * @method qui/controls/Control#focus\n         * @return {this}\n         */\n        focus : function()\n        {\n            if ( this.$Elm )\n            {\n                // try catch for ie 8 fix\n                try {\n                    this.$Elm.focus();\n                } catch ( e ) {}\n            }\n\n            return this;\n        },\n\n        /**\n         * Resize the control\n         *\n         * @method qui/controls/Control#resize\n         */\n        resize : function()\n        {\n            this.fireEvent( 'resize', [ this ] );\n        },\n\n        /**\n         * create and open a new sheet\n         *\n         * @method qui/controls/Control#openSheet\n         * @param {Function} onfinish - callback function\n         */\n        openSheet : function(onfinish)\n        {\n            var Sheet = new Element('div', {\n                'class' : 'qui-sheet qui-box',\n                html    : '<div class=\"qui-sheet-content box\"></div>' +\n                          '<div class=\"qui-sheet-buttons box\">' +\n                              '<div class=\"qui-sheet-buttons-back qui-button btn-white\">' +\n                                  '<span>' +\n                                      Locale.get( 'qui/controls/Control', 'btn.back' ) +\n                                  '</span>' +\n                              '</div>' +\n                          '</div>',\n                styles : {\n                    left : '-110%'\n                }\n            }).inject( this.$Elm  );\n\n            Sheet.getElement( '.qui-sheet-buttons-back' ).addEvent(\n                'click',\n                function() {\n                    Sheet.fireEvent( 'close' );\n                }\n            );\n\n            Sheet.addEvent('close', function()\n            {\n                moofx( Sheet ).animate({\n                    left : '-100%'\n                }, {\n                    callback : function() {\n                        Sheet.destroy();\n                    }\n                });\n            });\n\n            // heights\n            var Content = Sheet.getElement( '.qui-sheet-content' );\n\n            Content.setStyles({\n                height : Sheet.getSize().y - 80\n            });\n\n\n            // effect\n            moofx( Sheet ).animate({\n                left : 0\n            }, {\n                callback : function() {\n                    onfinish( Content, Sheet );\n                }\n            });\n\n            return Sheet;\n        }\n    });\n});\n\n","\n/**\n * Utils for the controls\n * Helps the controls\n *\n * @module qui/utils/Controls\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require qui/QUI\n */\n\ndefine('qui/utils/Controls',['qui/QUI'], function(QUI, Panel)\n{\n    \"use strict\";\n\n    return {\n\n        /**\n         * Checks if the string is a fontawesome css class\n         *\n         * @method qui/utils/Controls#isFontAwesomeClass\n         * @param {String} str - FontAweomse icon-class or an image path\n         * @returns {Bool}\n         */\n        isFontAwesomeClass : function(icon)\n        {\n            if ( !icon ) {\n                return false;\n            }\n\n            if ( ( icon.match( /icon-/ ) || icon.match( /fa-/ ) ) &&\n                 !icon.match( /\\./ ) )\n            {\n                return true;\n            }\n\n            return false;\n        },\n\n        /**\n         * Highlights a control\n         *\n         * @method qui/utils/Controls#highlight\n         * @param {DOMNode} Element\n         */\n        highlight : function(Element)\n        {\n            if ( !Element ) {\n                return;\n            }\n\n            var quiid = Element.get( 'data-quiid' );\n\n            if ( !quiid ) {\n                return;\n            }\n\n            QUI.Controls.getById( quiid ).highlight();\n        },\n\n        /**\n         * Normalize a control, if it is was highlighted\n         *\n         * @method qui/utils/Controls#normalize\n         * @param {DOMNode} Element\n         */\n        normalize : function(Element)\n        {\n            if ( !Element ) {\n                return;\n            }\n\n            var quiid = Element.get( 'data-quiid' );\n\n            if ( !quiid ) {\n                return;\n            }\n\n            QUI.Controls.getById( quiid ).normalize();\n        }\n\n    };\n});\n","\n/**\n * Makes an object unselectable or selectable\n *\n * @module qui/utils/NoSelect\n * @author www.pcsg.de (Henning Leutz)\n */\n\ndefine('qui/utils/NoSelect',{\n\n    /**\n     * Enable the selection for an Element\n     *\n     * @method qui/utils/NoSelect#enable\n     * @param {DOMNode} Elm - Element in which the mark / highlight is to be enabled\n     */\n    enable : function(Elm)\n    {\n        if ( typeof Elm.setProperty === 'undefined' ) {\n            Elm = document.id( Elm );\n        }\n\n        Elm.removeClass( 'qui-utils-noselect' );\n\n        if ( Browser.ie )\n        {\n            document.removeEvent( 'selectstart', this.stopSelection );\n            return;\n        }\n\n        Elm.removeProperty( \"unselectable\", \"on\" );\n        Elm.removeProperty( \"unSelectable\", \"on\" );\n\n        Elm.setStyles({\n            \"MozUserSelect\"   : \"\",\n            \"KhtmlUserSelect\" : \"\"\n        });\n    },\n\n    /**\n     * Disable the selection for an Element\n     *\n     * @method qui/utils/NoSelect#disable\n     * @param {DOMNode} Elm - Element in which the mark / highlight is to be prevented\n     */\n    disable : function(Elm)\n    {\n        if ( typeof Elm.setProperty === 'undefined' ) {\n            Elm = document.id( Elm );\n        }\n\n        Elm.addClass( 'qui-utils-noselect' );\n\n        if ( Browser.ie )\n        {\n            document.addEvent( 'selectstart', this.stopSelection );\n            return;\n        }\n\n        Elm.setProperty( \"unselectable\", \"on\" );\n        Elm.setProperty( \"unSelectable\", \"on\" );\n\n        Elm.setStyles({\n            \"MozUserSelect\"   : \"none\",\n            \"KhtmlUserSelect\" : \"none\"\n        });\n    },\n\n    /**\n     * Stop selection for IE Browser\n     *\n     * @method qui/utils/NoSelect#stopSelection\n     * @param {DOMEvent}\n     */\n    stopSelection : function(event)\n    {\n        event.stop();\n        return false;\n    }\n});\n\n","\n/**\n * Helper for DOMNode Elements\n *\n * @module qui/utils/Elements\n * @author www.pcsg.de (Henning Leutz)\n */\n\ndefine('qui/utils/Elements',{\n\n    /**\n     * checks if the element is in the viewport\n     *\n     * @method qui/utils/Elements#isInViewport\n     * @param {DOMNode} el\n     */\n    isInViewport : function(el)\n    {\n        var rect = el.getBoundingClientRect();\n\n        return (\n            rect.top >= 0 &&\n            rect.left >= 0 &&\n            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n            rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n        );\n    },\n\n    /**\n     *\n     */\n    isInBody : function(Elm)\n    {\n        var bodySize = document.body.getSize(),\n            elmCords = Elm.getCoordinates();\n\n\n        console.log( elmCords );\n        console.log( bodySize );\n\n\n\n        return false;\n    },\n\n    /**\n     * Return the z-index of an Element\n     *\n     * @method qui/utils/Elements#getComputedZIndex\n     * @return {Integer}\n     */\n    getComputedZIndex : function(Elm)\n    {\n        var i, z, len, max = 0;\n        var parents = Elm.getParents();\n\n        for ( i = 0, len = parents.length; i < len; i++)\n        {\n            z = parents[ i ].getStyle( 'zIndex' );\n\n            if ( z == 'auto' ) {\n                continue;\n            }\n\n            if ( z > max ) {\n                 max = z;\n            }\n        }\n\n        return max;\n    },\n\n    /**\n     * Return the index of the child from its parent\n     *\n     * @param {DOMNode} Elm\n     * @return {Integer}\n     */\n    getChildIndex : function(Elm)\n    {\n        return Array.prototype.indexOf.call(\n            Elm.getParent().children,\n            Elm\n        );\n    }\n});\n\n","\n/**\n * QUI Control - Button\n *\n * @module qui/controls/buttons/Button\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require qui/controls/Control\n * @require qui/utils/Controls\n * @require qui/utils/NoSelect\n * @require qui/utils/Elements\n *\n * @require css!qui/controls/buttons/Button.css\n *\n * @event onClick\n * @event onCreate\n * @event onDrawBegin\n * @event onDrawEnd\n * @event onSetNormal\n * @event onSetDisable\n * @event onSetActive\n *\n * @event onEnter     - event triggerd if button is not disabled\n * @event onLeave     - event triggerd if button is not disabled\n * @event onMousedown - event triggerd if button is not disabled\n * @event onMouseUp   - event triggerd if button is not disabled\n * @event onFocus\n * @event onBlur\n * @event onActive\n * @event onDisable\n * @event onEnable\n */\n\ndefine('qui/controls/buttons/Button',[\n\n    'qui/controls/Control',\n    'qui/utils/Controls',\n    'qui/utils/NoSelect',\n    'qui/utils/Elements',\n\n    'css!qui/controls/buttons/Button.css'\n\n], function(Control, Utils, NoSelect, ElementUtils)\n{\n    \"use strict\";\n\n    /**\n     * @class qui/controls/buttons/Button\n     *\n     * @event onClick\n     * @event onCreate\n     * @event onDrawBegin\n     * @event onDrawEnd\n     * @event onSetNormal\n     * @event onSetDisable\n     * @event onSetActive\n     *\n     * @event onEnter     - event triggerd if button is not disabled\n     * @event onLeave     - event triggerd if button is not disabled\n     * @event onMousedown - event triggerd if button is not disabled\n     * @event onMouseUp   - event triggerd if button is not disabled\n     * @event onFocus\n     * @event onBlur\n     * @event onActive\n     * @event onDisable\n     * @event onEnable\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Extends : Control,\n        Type    : 'qui/controls/buttons/Button',\n\n        Binds : [\n            'onSetAttribute'\n        ],\n\n        options : {\n            'type'      : 'button',\n            'image'     : false,   // (@depricated) use the icon attribute\n            'icon'      : false,   // icon top of the text\n            'style'     : {},      // mootools css style attributes\n            'textimage' : false,   // Image left from text\n            'text'      : false,   // Button text\n            'title'     : false,\n            'class'     : false,    // extra CSS Class\n            'buttonCSSClass' : true, // should have the button the qui-button css class?\n            'menuCorner'     : 'top'\n        },\n\n        params : {},\n\n        initialize : function(options)\n        {\n            this.parent( options );\n\n            this.$Menu  = null;\n            this.$Drop  = null;\n            this.$items = [];\n\n\n            if ( options.events ) {\n                delete options.events;\n            }\n\n            this.setAttributes(\n                this.initV2( options )\n            );\n\n            this.addEvent('onSetAttribute', this.onSetAttribute);\n            this.addEvent('onDestroy', function()\n            {\n                if ( this.$Menu ) {\n                    this.$Menu.destroy();\n                }\n            }.bind( this ));\n        },\n\n        /**\n         * Compatible to _ptools::Button v2\n         *\n         * @method qui/controls/buttons/Button#initV2\n         * @ignore\n         */\n        initV2: function(options)\n        {\n            if ( options.onclick )\n            {\n                if ( typeOf( options.onclick ) === 'string' )\n                {\n                    options.onclick = function(p) {\n                        eval(p +'(this);');\n                    }.bind(this, [ options.onclick ]);\n                }\n\n                this.addEvent( 'onClick', options.onclick );\n                delete options.onclick;\n            }\n\n            if ( options.oncreate )\n            {\n                this.addEvent( 'onCreate', options.oncreate );\n                delete options.oncreate;\n            }\n\n            return options;\n        },\n\n        /**\n         * Create the DOM Element\n         *\n         * @method qui/controls/buttons/Button#create\n         * @return {DOMNode}\n         */\n        create : function()\n        {\n            var i, len;\n\n            var self = this;\n\n            var Elm = new Element('button', {\n                'type' : this.getAttribute('type'),\n                'data-status' : 0,\n                'data-quiid'  : this.getId()\n            });\n\n            if ( this.getAttribute( 'buttonCSSClass' ) ) {\n                Elm.addClass( 'qui-button' );\n            }\n\n            if ( this.getAttribute( 'width' ) ) {\n                Elm.setStyle( 'width', this.getAttribute( 'width' ) );\n            }\n\n            if ( this.getAttribute('height') ) {\n                Elm.setStyle( 'height', this.getAttribute( 'height' ) );\n            }\n\n            if ( this.getAttribute( 'styles' ) ) {\n                Elm.setStyles( this.getAttribute( 'styles' ) );\n            }\n\n            if ( this.getAttribute( 'class' ) ) {\n                Elm.addClass( this.getAttribute( 'class' ) );\n            }\n\n            Elm.style.outline = 0;\n            Elm.setAttribute('tabindex', \"-1\");\n\n            Elm.addEvents({\n\n                click : function(event)\n                {\n                    if ( self.isDisabled() ) {\n                        return;\n                    }\n\n                    self.onclick( event );\n                },\n\n                mouseenter : function()\n                {\n                    if ( self.isDisabled() ) {\n                        return;\n                    }\n\n                    if ( !self.isActive() ) {\n                        self.getElm().addClass( 'qui-button-over' );\n                    }\n\n                    self.fireEvent( 'enter', [ self ] );\n                },\n\n                mouseleave : function()\n                {\n                    if ( self.isDisabled() ) {\n                        return;\n                    }\n\n                    if ( !self.isActive() ) {\n                        self.getElm().removeClass( 'qui-button-over' );\n                    }\n\n                    self.fireEvent( 'leave', [ self ] );\n                },\n\n                mousedown : function(event)\n                {\n                    if ( self.isDisabled() ) {\n                        return;\n                    }\n\n                    self.fireEvent( 'mousedown', [ self, event ] );\n\n                },\n\n                mouseup : function(event)\n                {\n                    if ( self.isDisabled() ) {\n                        return;\n                    }\n\n                    self.fireEvent( 'mouseup', [ self, event ] );\n                },\n\n                blur : function(event)\n                {\n                    self.fireEvent( 'blur', [ self, event ] );\n                },\n\n                focus : function(event)\n                {\n                    self.fireEvent( 'focus', [ self, event ] );\n                }\n            });\n\n            this.$Elm = Elm;\n\n\n            // Elemente aufbauen\n            if ( this.getAttribute( 'icon' ) ) {\n                this.setAttribute( 'icon', this.getAttribute( 'icon' ) );\n            }\n\n            if ( !this.getAttribute( 'icon' ) && this.getAttribute( 'image' ) ) {\n                this.setAttribute( 'icon', this.getAttribute( 'image' ) );\n            }\n\n            if ( this.getAttribute( 'styles' ) ) {\n                this.setAttribute( 'styles', this.getAttribute( 'styles' ) );\n            }\n\n            if ( this.getAttribute( 'textimage' ) ) {\n                this.setAttribute( 'textimage', this.getAttribute( 'textimage' ) );\n            }\n\n            if ( this.getAttribute( 'text' ) ) {\n                this.setAttribute( 'text', this.getAttribute( 'text' ) );\n            }\n\n            if ( this.getAttribute( 'title' ) ) {\n                this.$Elm.setAttribute( 'title', this.getAttribute( 'title' ) );\n            }\n\n            if ( this.getAttribute( 'disabled' ) ) {\n                this.setDisable();\n            }\n\n\n            // sub menu\n            len = this.$items.length;\n\n            if ( len )\n            {\n                this.getContextMenu(function(Menu)\n                {\n                    for ( i = 0; i < len; i++ ) {\n                        Menu.appendChild( self.$items[i] );\n                    }\n\n                    self.$Drop = new Element('div', {\n                        'class' : 'qui-button-drop icon-chevron-down'\n                    }).inject( self.$Elm );\n                });\n            }\n\n            this.fireEvent( 'create', [ this ] );\n\n            NoSelect.disable( Elm );\n\n            return this.$Elm;\n        },\n\n        /**\n         * Trigger the Click Event\n         *\n         * @method qui/controls/buttons/Button#onclick\n         * @param {DOMEvent} event\n         */\n        click : function(event)\n        {\n            if ( this.isDisabled() ) {\n                return;\n            }\n\n            this.fireEvent( 'click', [ this, event ] );\n        },\n\n        /**\n         * @see qui/controls/buttons/Button#onclick\n         */\n        onclick : function(event)\n        {\n            this.click( event );\n        },\n\n        /**\n         * Set the Button Active\n         *\n         * @method qui/controls/buttons/Button#setActive\n         */\n        setActive : function()\n        {\n            if ( this.isDisabled() ) {\n                return;\n            }\n\n            var Elm = this.getElm();\n\n            if ( !Elm ) {\n                return;\n            }\n\n            Elm.addClass( 'qui-button-active' );\n            Elm.set( 'data-status', 1 );\n\n            this.fireEvent( 'active', [ this ] );\n        },\n\n        /**\n         * is Button Active?\n         *\n         * @method qui/controls/buttons/Button#isActive\n         * @return {Bool}\n         */\n        isActive : function()\n        {\n            if ( !this.getElm() ) {\n                return false;\n            }\n\n            if ( this.getElm().get( 'data-status' ) == 1 ) {\n                return true;\n            }\n\n            return false;\n        },\n\n        /**\n         * Disable the Button\n         * Most Events are no more triggered\n         *\n         * @method qui/controls/buttons/Button#disable\n         * @return {qui/controls/buttons/Button}\n         */\n        disable : function()\n        {\n            var Elm = this.getElm();\n\n            if ( !Elm ) {\n                return;\n            }\n\n            Elm.set({\n                'data-status' : -1,\n                'disabled'    : 'disabled'\n            });\n\n            this.fireEvent( 'disable', [ this ] );\n\n            return this;\n        },\n\n        /**\n         * @depricated use disable\n         * @method qui/controls/buttons/Button#setDisable\n         * @return {qui/controls/buttons/Button}\n         */\n        setDisable : function()\n        {\n            return this.disable();\n        },\n\n        /**\n         * is Button Disabled?\n         *\n         * @method qui/controls/buttons/Button#isDisabled\n         * @return {Bool}\n         */\n        isDisabled : function()\n        {\n            if ( !this.getElm() ) {\n                return false;\n            }\n\n            if ( this.getElm().get('data-status') == -1 ) {\n                return true;\n            }\n\n            return false;\n        },\n\n        /**\n         * If the Button was disabled, you can enable the Button\n         *\n         * @method qui/controls/buttons/Button#setEnable\n         * @return {this}\n         */\n        enable : function()\n        {\n            if ( !this.getElm() ) {\n                return false;\n            }\n\n            this.getElm().set({\n                'data-status' : 0,\n                'disabled'    : null\n            });\n\n            this.setNormal();\n\n            return this;\n        },\n\n        /**\n         * @depricated\n         *\n         * @method qui/controls/buttons/Button#setEnable\n         * @return {this}\n         */\n        setEnable : function()\n        {\n            return this.enable();\n        },\n\n        /**\n         * If the Button was active, you can normalize the Button\n         * The Button must be enabled.\n         *\n         * @method qui/controls/buttons/Button#setNormal\n         * @return {this}\n         */\n        setNormal : function()\n        {\n            if ( this.isDisabled() ) {\n                return;\n            }\n\n            if ( !this.getElm() ) {\n                return false;\n            }\n\n            var Elm = this.getElm();\n\n            Elm.set({\n                'data-status' : 0,\n                'disabled'    : null\n            });\n\n            Elm.removeClass( 'qui-button-active' );\n            Elm.removeClass( 'qui-button-over' );\n\n            this.fireEvent( 'normal', [ this ] );\n\n            return this;\n        },\n\n        /**\n         * Adds a Children to an Button Menu\n         *\n         * @method qui/controls/buttons/Button#appendChild\n         *\n         * @param {qui/controls/contextmenu/Item} Itm\n         * @return {this}\n         */\n        appendChild : function(Itm)\n        {\n            this.$items.push( Itm );\n\n            Itm.setAttribute( 'Button', this );\n\n            if ( !this.$Elm ) {\n                return this;\n            }\n\n            var self = this;\n\n            this.getContextMenu(function(Menu)\n            {\n                Menu.appendChild( Itm );\n\n                if ( !self.$Drop )\n                {\n                    self.$Drop = new Element('div', {\n                        'class' : 'qui-button-drop icon-chevron-down'\n                    }).inject( self.$Elm );\n                }\n            });\n\n            return this;\n        },\n\n        /**\n         * All Context Menu Items\n         *\n         * @method qui/controls/buttons/Button#getChildren\n         * @return {Array}\n         */\n        getChildren : function()\n        {\n            return this.$items;\n        },\n\n        /**\n         * Clear the Context Menu Items\n         *\n         * @method qui/controls/buttons/Button#clear\n         * @return {this}\n         */\n        clear : function()\n        {\n            this.getContextMenu(function(Menu) {\n                Menu.clearChildren();\n            });\n\n            this.$items = [];\n\n            return this;\n        },\n\n        /**\n         * Create the Context Menu if not exist\n         *\n         * @method qui/controls/buttons/Button#getContextMenu\n         *\n         * @param {Function} callback - callback function( {qui/controls/contextmenu/Menu} )\n         * @return {this}\n         */\n        getContextMenu : function(callback)\n        {\n            if ( this.$Menu && typeof this.$createContextMenu === 'undefined' )\n            {\n                callback( this.$Menu );\n                return this;\n            }\n\n            var self = this;\n\n            if ( typeof this.$createContextMenu !== 'undefined' )\n            {\n                (function() {\n                    self.getContextMenu( callback );\n                }).delay( 10 );\n\n                return this;\n            }\n\n\n            this.$createContextMenu = true;\n\n            require(['qui/controls/contextmenu/Menu'], function(Menu)\n            {\n                self.$Menu = new Menu({\n                    name   : self.getAttribute('name') +'-menu',\n                    corner : self.getAttribute('menuCorner')\n                });\n\n                self.$Menu.inject( document.body );\n\n                self.addEvents({\n                    onClick : function()\n                    {\n                        if ( self.isDisabled() ) {\n                            return;\n                        }\n\n                        var pos   = self.$Elm.getPosition(),\n                            size  = self.$Elm.getSize(),\n\n                            mpos  = self.getAttribute('menuCorner'),\n                            msize = self.$Menu.getElm().getComputedSize();\n\n                        if ( mpos.contains( 'bottom' ) )\n                        {\n                            self.$Menu.setPosition(\n                                pos.x - 20,\n                                pos.y - size.y - msize.totalHeight + 10\n                            );\n                        } else\n                        {\n                            self.$Menu.setPosition(\n                                pos.x - 20,\n                                pos.y + size.y + 10\n                            );\n                        }\n\n                        self.$Menu.show();\n                        self.$Elm.focus();\n                    },\n\n                    onBlur : function()\n                    {\n                        self.$Menu.hide();\n                    }\n                });\n\n                self.$Menu.setParent( self );\n\n                delete self.$createContextMenu;\n\n                callback( self.$Menu );\n            });\n        },\n\n        /**\n         * Method for changing the DOMNode if attributes are changed\n         *\n         * @method qui/controls/buttons/Button#onSetAttribute\n         *\n         * @param {String} k             - Attribute name\n         * @param {unknown_type} value     - Attribute value\n         *\n         * @ignore\n         */\n        onSetAttribute : function(k, value)\n        {\n            var Elm = this.getElm();\n\n            //this.options[k] = value;\n\n            if ( !Elm ) {\n                return;\n            }\n\n            // onclick overwrite\n            if ( k === 'onclick' )\n            {\n                this.removeEvents('click');\n\n                this.addEvent('click', function(p)\n                {\n                    eval(p +'(this);');\n                }.bind( this, [value] ));\n\n                return;\n            }\n\n            if ( k == 'image' ) {\n                k = 'icon';\n            }\n\n            // Image\n            if ( k === 'icon' )\n            {\n                if ( !Elm.getElement('.image-container') )\n                {\n                    new Element('div.image-container', {\n                        align : 'center'\n                    }).inject( Elm );\n                }\n\n                var Image = Elm.getElement('.image-container');\n\n                Image.set( 'html', '' );\n\n                if ( Utils.isFontAwesomeClass( value ) )\n                {\n                    new Element('span', {\n                        'class' : value\n                    }).inject( Image );\n                } else\n                {\n                    new Element('img.qui-button-image', {\n                        src    : value,\n                        styles : {\n                            'display' : 'block' // only image, fix\n                        }\n                    }).inject( Image );\n                }\n\n                return;\n            }\n\n            // Style Attributes\n            if ( k === \"styles\" )\n            {\n                Elm.setStyles( value );\n                return;\n            }\n\n            // Text\n            if ( k === \"title\" )\n            {\n                Elm.setAttribute( 'title', value );\n                return;\n            }\n\n            // Text and Text-Image\n            if ( k !== 'textimage' && k !== 'text' ) {\n                return;\n            }\n\n            // Text + Text Image\n            if ( !Elm.getElement('.qui-button-text') ) {\n                new Element('span.qui-button-text').inject( Elm );\n            }\n\n            var Txt = Elm.getElement('.qui-button-text');\n\n            // Text\n            if ( k === 'text' ) {\n                Txt.set( 'html', value );\n            }\n\n            if ( k === 'textimage' )\n            {\n                var Img;\n\n                if ( Elm.getElement('.qui-button-text-image') ) {\n                    Elm.getElement('.qui-button-text-image').destroy();\n                }\n\n                if ( Utils.isFontAwesomeClass( value ) )\n                {\n                    Img = new Element('span', {\n                        'class'  : 'qui-button-text-image '+ value,\n                        styles : {\n                            'margin-right': 0\n                        }\n                    }).inject( Txt, 'before' );\n                } else\n                {\n                    Img = new Element('img', {\n                        'class' : 'qui-button-text-image',\n                        src     : value,\n                        styles  : {\n                            'margin-right': 0\n                        }\n                    }).inject( Txt, 'before' );\n                }\n\n                if ( this.getAttribute('text') ) {\n                    Img.setStyle( 'margin-right', null );\n                }\n            }\n        }\n    });\n});\n\n","\n/**\n * Sitemap Search Control\n * The control searches a Sitemap Control\n *\n * @module qui/controls/sitemap/Filter\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require qui/controls/Control\n * @require qui/controls/buttons/Button\n * @require css!qui/controls/sitemap/Filter.css\n *\n * @event onFocus [this]\n * @event onResultNotViewable [this, Item] <-- delete\n * @event onFilter  [this, results]\n */\n\ndefine('qui/controls/sitemap/Filter',[\n\n    'qui/controls/Control',\n    'qui/controls/buttons/Button',\n\n    'css!qui/controls/sitemap/Filter.css'\n\n], function(Control, Button)\n{\n    \"use strict\";\n\n    /**\n     * A project sitemap\n     *\n     * @class qui/controls/sitemap/Filter\n     *\n     * @param {qui/controls/sitemap/Map}\n     * @param {Object} options\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Extends : Control,\n        Type    : 'qui/controls/sitemap/Filter',\n\n        Binds : [\n            'filter',\n            '$filter'\n        ],\n\n        options : {\n            styles      : false,\n            placeholder : 'Filter ...',\n            withbutton  : false\n        },\n\n        initialize : function(Sitemap, options)\n        {\n            this.parent( options );\n\n            this.$Elm   = null;\n            this.$Input = null;\n            this.$maps  = [];\n\n            this.bindSitemap( Sitemap );\n\n            this.$timeoutID = false;\n        },\n\n        /**\n         * Create the DOMNode of the sitemap filter\n         *\n         * @method qui/controls/sitemap/Filter#create\n         * @return {DOMNode} DOM-Element\n         */\n        create : function()\n        {\n            var self = this;\n\n            this.$Elm = new Element('div', {\n                'class' : 'qui-sitemap-filter box',\n                html    : '<input type=\"text\" placeholder=\"'+ this.getAttribute('placeholder') +'\" />'\n            });\n\n            this.$Input = this.$Elm.getElement( 'input' );\n\n            this.$Input.addEvents({\n\n                keyup : function(event)\n                {\n                    if ( event.key == 'enter' )\n                    {\n                        self.filter( self.getInput().value );\n                        return;\n                    }\n\n                    if ( self.$timeoutID ) {\n                        clearTimeout( self.$timeoutID );\n                    }\n\n                    self.$timeoutID = function()\n                    {\n                        self.filter( self.getInput().value );\n                        self.$timeoutID = false;\n\n                    }.delay( 250 );\n\n                },\n\n                focus : function(event)\n                {\n                    self.fireEvent( 'focus', [ self ] );\n                },\n\n                blur : function()\n                {\n                    if ( self.getInput().value === '' ) {\n                        self.filter();\n                    }\n                }\n            });\n\n\n            if ( this.getAttribute( 'withbutton' ) )\n            {\n                this.$Search = new Button({\n                    image  : URL_BIN_DIR +'16x16/search.png',\n                    events :\n                    {\n                        onClick : function() {\n                            self.filter( self.getInput().value );\n                        }\n                    }\n                }).inject( this.$Elm );\n            }\n\n\n            if ( this.getAttribute( 'styles' ) ) {\n                this.$Elm.setStyles( this.getAttribute( 'styles' ) );\n            }\n\n            return this.$Elm;\n        },\n\n        /**\n         * Sets the sitemap which is to be searched\n         * Older Sitemap binds persist\n         *\n         * @method qui/controls/sitemap/Filter#bindSitemap\n         * @param {qui/controls/sitemap/Map} Sitemap\n         * @return {this} self\n         */\n        bindSitemap : function(Sitemap)\n        {\n            if ( typeof Sitemap === 'undefined' || !Sitemap ) {\n                return;\n            }\n\n            this.$maps.push( Sitemap );\n\n            return this;\n        },\n\n        /**\n         * all binds would be resolved\n         *\n         * @method qui/controls/sitemap/Filter#clearBinds\n         * @return {this} self\n         */\n        clearBinds : function()\n        {\n            this.$maps = [];\n\n            return this;\n        },\n\n        /**\n         * Return the filter input DOMNode Element\n         *\n         * @method qui/controls/sitemap/Filter#getInput\n         * @return {DOMNode}\n         */\n        getInput : function()\n        {\n            return this.$Input;\n        },\n\n        /**\n         * Filter the Sitemaps\n         *\n         * @method qui/controls/sitemap/Filter#filter\n         * @param {String} str - the filter value\n         * @return {this}\n         */\n        filter : function(str)\n        {\n            str = str || '';\n\n            for ( var i = 0, len = this.$maps.length; i < len; i++ ) {\n                this.$filter( this.$maps[ i ], str );\n            }\n\n            return this;\n        },\n\n        /**\n         * Helper Function for the filter\n         *\n         * @method qui/controls/sitemap/Filter#$filter\n         * @param {qui/controls/sitemap/Map} Map - the Sitemap\n         * @param {String} str - the filter value\n         */\n        $filter : function(Map, str)\n        {\n            if ( typeof Map === 'undefined' || !Map ) {\n                return;\n            }\n\n            var i, len;\n            var children = Map.getChildren();\n\n            if ( str === '' )\n            {\n                for ( i = 0, len = children.length; i < len; i++ ) {\n                    children[ i ].normalize();\n                }\n\n                this.fireEvent( 'filter',  [ this, [] ] );\n\n                return;\n            }\n\n\n            for ( i = 0, len = children.length; i < len; i++ ) {\n                children[ i ].holdBack();\n            }\n\n            var result = Map.search( str );\n\n            for ( i = 0, len = result.length; i < len; i++ ) {\n                result[ i ].normalize();\n            }\n\n            this.fireEvent( 'filter', [ this, result ] );\n        }\n    });\n});\n\n"]}