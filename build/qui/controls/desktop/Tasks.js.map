{"version":3,"file":"Tasks.js","sources":["../../classes/DOM.js","../../classes/Controls.js","../../classes/storage/Storage.js","../../classes/QUI.js","../../QUI.js","../../classes/Locale.js","../../Locale.js","../../lib/require-css/normalize.js","../../lib/require-css/css.js","../Control.js","../loader/Loader.js","../../classes/utils/DragDrop.js","../../utils/Controls.js","../taskbar/Task.js","../../utils/Elements.js","../contextmenu/Menu.js","../contextmenu/Item.js","../taskbar/Group.js","../../utils/NoSelect.js","../buttons/Button.js","../taskbar/Bar.js","Tasks.js"],"names":[],"mappings":"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","sourcesContent":["\n/**\n * The DOM class emulate similar methods\n * like a DOMNode to a normal Object\n *\n * Its easy to use and most classes inherit from {qui/classes/DOM}\n * All objects that inherited from {qui/classes/DOM} can easily extend with Attributes.\n *\n * @module qui/classes/DOM\n * @author www.quiqqer.com (Henning Leutz)\n *\n * @event onDestroy [this]\n * @event onSetAttribute [key, value]\n */\n\ndefine('qui/classes/DOM', [],function()\n{\n    \"use strict\";\n\n    window.$quistorage = {};\n\n    /**\n     * The DOM class emulate similar methods\n     * like a DOMNode to a normal Object\n     *\n     * @class qui/classes/DOM\n     *\n     * @param {Object} options -\n     *         With options you can set attributes or extend the Object width methods and events\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Implements : [ Options, Events ],\n        Type       : 'qui/classes/DOM',\n\n        options : {},\n        $uid    : null,\n\n        initialize : function(options)\n        {\n            options = options || {};\n\n            if ( options.events )\n            {\n                this.addEvents( options.events );\n                delete options.events;\n            }\n\n            if ( options.methods )\n            {\n                Object.append( this, options.methods );\n                delete options.methods;\n            }\n\n            this.setAttributes( options );\n            this.fireEvent( 'init', [ this ] );\n        },\n\n        /**\n         * If this.TYPE is set, this.Type will be return\n         *\n         * @method qui/classes/DOM#$family\n         * @return {String} Type of the Object\n         * @ignore\n         */\n        $family : function()\n        {\n            if ( typeof this.Type !== 'undefined' ) {\n                return this.Type;\n            }\n\n            return typeOf( this );\n        },\n\n        /**\n         * Get the Unique ID from the Object\n         *\n         * @method qui/classes/DOM#getId\n         * @return {String} Object ID\n         */\n        getId : function()\n        {\n            if ( !this.$uid ) {\n                this.$uid = String.uniqueID();\n            }\n\n            return this.$uid;\n        },\n\n        /**\n         * Get the type from the Object\n         *\n         * @method qui/classes/DOM#getType\n         * @return {String} The type of the object\n         */\n        getType : function()\n        {\n            return typeOf( this );\n        },\n\n        /**\n         * Set an attribute to the Object\n         * You can extend the Object with everything you like\n         * You can extend the Object width more than the default options\n         *\n         * @method qui/classes/DOM#setAttribute\n         *\n         * @param {String} k - Name of the Attribute\n         * @param {Object|String|Number|Array} v - value\n         *\n         * @return {Object} this (qui/classes/DOM)\n         */\n        setAttribute : function(k, v)\n        {\n            this.fireEvent('setAttribute', [ k, v ]);\n\n            if ( typeof this.options[ k ] !== 'undefined' )\n            {\n                this.options[ k ] = v;\n                return this;\n            }\n\n            var oid = Slick.uidOf( this );\n\n            if ( typeof window.$quistorage[ oid ] === 'undefined' ) {\n                window.$quistorage[ oid ] = {};\n            }\n\n            window.$quistorage[ oid ][ k ] = v;\n\n            return this;\n        },\n\n        /**\n         * Destroy the Object and all relationsships to some Object\n         *\n         * @method qui/classes/DOM#destroy\n         */\n        destroy : function()\n        {\n            this.fireEvent( 'destroy', [ this ] );\n\n            // storage clear\n            var oid = Slick.uidOf( this );\n\n            if ( oid in window.$quistorage ) {\n                delete window.$quistorage[ oid ];\n            }\n\n            this.removeEvents();\n        },\n\n        /**\n         * Alias for setAttributes, please use setAttributes()\n         *\n         * @see qui/classes/DOM#setAttributes()\n         * @method qui/classes/DOM#setOptions\n         */\n        setOptions : function(options)\n        {\n            this.setAttributes( options );\n        },\n\n        /**\n         * If you want set more than one attribute\n         *\n         * @method qui/classes/DOM#setAttributes\n         *\n         * @param {Object} attributes - Object with attributes\n         * @return {Object} this (qui/classes/DOM)\n         *\n         * @example Object.setAttributes({\n         *   attr1 : '1',\n         *   attr2 : []\n         * })\n         */\n        setAttributes : function(attributes)\n        {\n            attributes = attributes || {};\n\n            for ( var k in attributes )\n            {\n                if ( attributes.hasOwnProperty( k ) ) {\n                    this.setAttribute( k, attributes[k] );\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * Return an attribute of the Object\n         * returns the \"not default attributes\", too\n         *\n         * @method qui/classes/DOM#setAttribute\n         * @param {String} k - name of the attribute\n         * @return {String|Boolean|Array|Object} attribute\n         */\n        getAttribute : function(k)\n        {\n            if ( k in this.options ) {\n                return this.options[ k ];\n            }\n\n            var oid = Slick.uidOf( this );\n\n            if ( typeof window.$quistorage[ oid ] === 'undefined' ) {\n                return false;\n            }\n\n            if ( typeof window.$quistorage[ oid ][ k ] !== 'undefined' ) {\n                return window.$quistorage[ oid ][ k ];\n            }\n\n            return false;\n        },\n\n        /**\n         * Alias for getAttributes, please use getAttributes()\n         *\n         * @method qui/classes/DOM#getAllAttributes\n         * @see qui/classes/DOM#getAttributes()\n         * @deprecated\n         */\n        getAllAttributes : function()\n        {\n            return this.getAttributes();\n        },\n\n        /**\n         * Return the default attributes\n         *\n         * @method qui/classes/DOM#getAttributes\n         * @return {Object} attributes\n         */\n        getAttributes : function()\n        {\n            return this.options;\n        },\n\n        /**\n         * Return the attributes which stored into the QUI Storage\n         *\n         * @return {Object}\n         */\n        getStorageAttributes : function()\n        {\n            var oid = Slick.uidOf( this );\n\n            if ( oid in window.$quistorage  ) {\n                return window.$quistorage[ oid ];\n            }\n\n            return {};\n        },\n\n        /**\n         * Return true if a attribute exist\n         *\n         * @method qui/classes/DOM#existAttribute\n         * @param {String} k - wanted attribute\n         * @return {Boolean} true or false\n         */\n        existAttribute : function(k)\n        {\n            if ( typeof this.options[ k ] !== 'undefined' ) {\n                return true;\n            }\n\n            var oid = Slick.uidOf( this );\n\n            return window.$quistorage[ oid ] && window.$quistorage[ oid ][ k ];\n        },\n\n        /**\n         * Return the binded functions of the event name\n         *\n         * @method qui/classes/DOM#existAttribute\n         * @param {String} eventname - wanted event\n         * @return {Array|Boolean} Event list\n         */\n        getEvents : function(eventname)\n        {\n            if ( typeof this.$events === 'undefined') {\n                return false;\n            }\n\n            if ( typeof this.$events[ eventname ] !== 'undefined') {\n                return this.$events[ eventname ];\n            }\n\n            return false;\n        }\n    });\n});\n\n","\n/**\n * QUI control Manager\n *\n * @module qui/classes/Controls\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require require\n * @require qui/classes/DOM\n */\n\ndefine('qui/classes/Controls', [\n\n    'require',\n    'qui/classes/DOM'\n\n], function(require, DOM)\n{\n    \"use strict\";\n\n    /**\n     * @class qui/classes/Controls\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Extends : DOM,\n        Type    : 'qui/classes/Controls',\n\n        initialize : function()\n        {\n            this.$controls = {};\n            this.$cids     = {};\n            this.$types    = {};\n        },\n\n        /**\n         * Return all controls with tha name\n         *\n         * @method qui/classes/Controls#get\n         * @param {String} n - Name of the Control\n         * @return {Array} All Controls with the needle name\n         */\n        get : function(n)\n        {\n            if ( typeof this.$controls[ n ] === 'undefined' ) {\n                return [];\n            }\n\n            return this.$controls[ n ];\n        },\n\n        /**\n         * Get the Controls by its unique id\n         *\n         * @method qui/classes/Controls#getById\n         * @param {String|Number} id - ID of the wanted Control\n         * @return {qui/controls/Control|Boolean} a QUI control, based on qui/controls/Control or false\n         */\n        getById : function(id)\n        {\n            if ( id in this.$cids ) {\n                return this.$cids[ id ];\n            }\n\n            return false;\n        },\n\n        /**\n         * Return all controls from a type\n         *\n         * @method qui/classes/Controls#getByType\n         * @return {Array}\n         */\n        getByType : function(type)\n        {\n            if ( type in this.$types ) {\n                return this.$types[ type ];\n            }\n\n            return [];\n        },\n\n        /**\n         * Load a control by a control type\n         *\n         * @method qui/classes/Controls#loadType\n         * @param {String} type\n         * @param {Function} onload\n         *\n         * @example QUI.Controls.loadType('qui/controls/taskbar/Task', function(Modul) { })\n         * @deprecated\n         */\n        loadType : function(type, onload)\n        {\n            if ( !type.match( /qui\\// ) ) {\n                type = 'qui/'+ type;\n            }\n\n            require( [ type ] , onload );\n        },\n\n        /**\n         * Is the Object a QUI Control?\n         *\n         * @method qui/controls/Control#isControl\n         * @return {Boolean} Obj - true or false\n         */\n        isControl : function(Obj)\n        {\n            if ( typeof Obj === 'undefined' || !Obj ) {\n                return false;\n            }\n\n            return typeof Obj.getType !== 'undefined';\n        },\n\n        /**\n         * Add a Control to the list\n         *\n         * @method qui/controls/Control#add\n         * @param {qui/controls/Control} Control\n         */\n        add : function(Control)\n        {\n            var s = this,\n                n = Control.getAttribute( 'name' ),\n                t = typeOf( Control );\n\n            if ( !n || n === '' ) {\n                n = '#unknown';\n            }\n\n            if ( typeof this.$controls[ n ] === 'undefined' ) {\n                this.$controls[ n ] = [];\n            }\n\n            if ( typeof this.$types[ t ] === 'undefined' ) {\n                this.$types[ t ] = [];\n            }\n\n            this.$controls[ n ].push( Control );\n            this.$types[ t ].push( Control );\n\n            this.$cids[ Control.getId() ] = Control;\n\n            Control.addEvent('onDestroy', function() {\n                s.destroy( Control );\n            });\n        },\n\n        /**\n         * Destroy a Control\n         *\n         * @method qui/controls/Control#destroy\n         * @param {qui/controls/Control} Control\n         */\n        destroy : function(Control)\n        {\n            var n  = Control.getAttribute( 'name' ),\n                t  = typeOf( Control ),\n                id = Control.getId();\n\n            if ( !n || n === '' ) {\n                n = '#unknown';\n            }\n\n            if ( typeof this.$cids[ id ] !== 'undefined' ) {\n                delete this.$cids[ id ];\n            }\n\n            var i, len;\n            var tmp = [];\n\n            // refresh controls\n            if ( typeof this.$controls[ n ] !== 'undefined' )\n            {\n                for ( i = 0, len = this.$controls[ n ].length; i < len; i++ )\n                {\n                    if ( id !== this.$controls[ n ][ i ].getId() ) {\n                        tmp.push( this.$controls[ n ][ i ] );\n                    }\n                }\n\n                this.$controls[ n ] = tmp;\n\n                if ( !tmp.length ) {\n                    delete this.$controls[ n ];\n                }\n            }\n\n            // refresh types\n            tmp = [];\n\n            if ( typeof this.$types[ t ] !== 'undefined' )\n            {\n                for ( i = 0, len = this.$types[ t ].length; i < len; i++ )\n                {\n                    if ( id !== this.$types[ t ][ i ].getId() ) {\n                        tmp.push( this.$types[ t ][ i ] );\n                    }\n                }\n            }\n\n            this.$types[ t ] = tmp;\n        }\n    });\n});\n","\n/**\n * Use Local storage, with fallbacks\n * if local storage not exist, it loads the polyfill\n *\n * some browsers cant use local storage in private mode,\n * so it use internal object storage, therefore the data are kept only in the session\n *\n * @module qui/classes/storage/Storage\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require qui/classes/DOM\n * @require [optional] qui/classes/storage/Polyfill\n */\n\nvar needle = ['qui/classes/DOM'];\n\nif ( typeof window.localStorage === 'undefined' ||\n     typeof window.sessionStorage === 'undefined')\n{\n    needle.push( 'qui/classes/storage/Polyfill' );\n}\n\ndefine('qui/classes/storage/Storage', needle, function(QDOM)\n{\n    \"use strict\";\n\n    /**\n     * Local storage\n     *\n     * @class qui/classes/storage/Storage\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Extends : QDOM,\n        Type    : 'qui/classes/storage/Storage',\n\n        $data : {},\n\n        /**\n         * Set the value of a key\n         *\n         * @method qui/classes/storage/Storage#set\n         * @param {String} key\n         * @param {String|Number|Boolean} value\n         */\n        set : function(key, value)\n        {\n            try\n            {\n                window.localStorage.setItem( key, value );\n\n            } catch ( e )\n            {\n                this.$data[ key ] = value;\n            }\n        },\n\n        /**\n         * Return the value of stored the key\n         *\n         * @method qui/classes/storage/Storage#get\n         * @param {String} key\n         * @return {String|Number|Boolean} the wanted storage\n         */\n        get : function(key)\n        {\n            try\n            {\n                return window.localStorage.getItem( key );\n\n            } catch ( e )\n            {\n\n            }\n\n            if ( typeof this.$data[ key ] !== 'undefined' ) {\n                return this.$data[ key ];\n            }\n\n            return null;\n        },\n\n        /**\n         * Remove a stored key\n         *\n         * @method qui/classes/storage/Storage#remove\n         * @param {String} key\n         */\n        remove : function(key)\n        {\n            try\n            {\n                window.localStorage.removeItem( key );\n\n            } catch ( e )\n            {\n\n            }\n\n            if ( typeof this.$data[ key ] !== 'undefined' ) {\n                delete this.$data[ key ];\n            }\n        },\n\n        /**\n         * Clear the storage\n         *\n         * @method qui/classes/storage/Storage#clear\n         */\n        clear : function()\n        {\n            this.$data = {};\n\n            try\n            {\n                window.localStorage.clear();\n\n            } catch ( e )\n            {\n\n            }\n        }\n    });\n});\n\n","\n/**\n * The Main Class for the Main QUI Object\n *\n * @module qui/classes/QUI\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require require\n * @require qui/classes/DOM\n * @require qui/classes/Controls\n *\n * @event onError : if there is an error\n */\n\ndefine('qui/classes/QUI', [\n\n    'require',\n    'qui/classes/DOM',\n    'qui/classes/Controls',\n    'qui/classes/storage/Storage'\n\n], function(require, DOM, Controls, Storage)\n{\n    \"use strict\";\n\n    /**\n     * The QUIQQER main object\n     *\n     * @class QUI\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Extends : DOM,\n        Type    : 'qui/classes/QUI',\n\n        initialize : function(options)\n        {\n            /**\n             * defaults\n             */\n            this.setAttributes({\n                'debug'       : false,\n                'fetchErrors' : true\n            });\n\n            this.parent( options );\n\n            // error handling\n            if ( this.getAttribute('fetchErrors') )\n            {\n                var self = this;\n\n                require.onError = function(requireType, requireModules)\n                {\n                    self.trigger(\n                        'ERROR :'+ requireType +'\\n'+\n                        'Require :'+ requireModules\n                    );\n                };\n\n                window.onerror = this.trigger.bind( this );\n            }\n\n            this.Controls = new Controls();\n            this.Storage  = new Storage();\n\n            this.MessageHandler = null;\n        },\n\n        /**\n         * Creates Namespaces\n         * based on YAHOO code - nice solution!!\n         *\n         * @method qui/classes/QUI#namespace\n         * @example QUI.namespace('my.name.space'); -> QUI.my.name.space\n         * @deprecated\n         */\n        namespace : function()\n        {\n            var tlen;\n\n            var a = arguments,\n                o = this,\n                i = 0,\n                j = 0,\n\n                len  = a.length,\n                tok  = null,\n                name = null;\n\n            // iterate on the arguments\n            for ( ; i < len; i = i + 1 )\n            {\n                tok  = a[ i ].split( \".\" );\n                tlen = tok.length;\n\n                // iterate on the object tokens\n                for ( j = 0; j < tlen; j = j + 1 )\n                {\n                    name = tok[j];\n                    o[ name ] = o[ name ] || {};\n                    o = o[ name ];\n                }\n            }\n\n            return o;\n        },\n\n        /**\n         * parse qui controls\n         *\n         * @param {HTMLElement} [Parent] - optional, if no parent given, document.body would be use\n         * @param {Function} [callback] - optional\n         */\n        parse : function(Parent, callback)\n        {\n            if ( typeof Parent === 'undefined' ) {\n                Parent = document.body;\n            }\n\n            if ( typeOf( Parent ) !== 'element' )\n            {\n                if ( typeof callback !== 'undefined' ) {\n                    callback();\n                }\n\n                return;\n            }\n\n            // parse all qui controls\n            var nodes = Parent.getElements( '[data-qui]' ),\n                list  = nodes.map(function(Elm) {\n                    return Elm.get( 'data-qui' );\n                });\n\n            require(list, function()\n            {\n                var i, len, Cls, Elm;\n\n                var formNodes = {\n                    'TEXTAREA' : true,\n                    'INPUT'    : true\n                };\n\n                for ( i = 0, len = list.length; i < len; i++ )\n                {\n                    Cls = arguments[ i ];\n                    Elm = nodes[ i ];\n\n                    // already initialized\n                    if ( Elm.get( 'data-quiid' ) ) {\n                        continue;\n                    }\n\n                    if ( Elm.get( 'html' ).trim() !== '' ||\n                         typeof formNodes[ Elm.nodeName ] !== 'undefined' )\n                    {\n                        new Cls().import( Elm );\n                    } else\n                    {\n                        new Cls().replaces( Elm );\n                    }\n                }\n\n                if ( typeof callback !== 'undefined' ) {\n                    callback();\n                }\n            });\n        },\n\n        /**\n         * Fire the Error Event\n         *\n         * @method qui/classes/QUI#triggerError\n         *\n         * @param {qui/classes/messages/Message|Exception} Exception - Exception Objekt\n         * @return {Object} this (qui/classes/QUI)\n         */\n        triggerError : function(Exception)\n        {\n            return this.trigger( Exception.getMessage(), '', 0 );\n        },\n\n        /**\n         * trigger some messages to the console\n         *\n         * @method qui/classes/QUI#trigger\n         *\n         * @param {String} msg\n         * @param {String} [url] - optional\n         * @param {Number} [linenumber] - optional\n         *\n         * @return {Object} this (qui/classes/QUI)\n         */\n        trigger : function(msg, url, linenumber)\n        {\n            /*\n            var message = msg +\"\\n\"+\n                          \"File: \"+ url +\"\\n\"+\n                          \"Linenumber: \"+ linenumber;\n            */\n            this.fireEvent( 'error', [ msg, url, linenumber ] );\n\n            return this;\n        },\n\n        /**\n         * Return the message handler\n         *\n         * @method qui/classes/QUI#getMessageHandler\n         * @param {Function} callback\n         */\n        getMessageHandler : function(callback)\n        {\n            if ( typeof this.$execGetMessageHandler !== 'undefined' && !this.MessageHandler )\n            {\n                this.$execGetMessageHandler = true;\n\n                (function() {\n                    this.getMessageHandler( callback );\n                }).delay( 20, this );\n\n                return;\n            }\n\n            this.$execGetMessageHandler = true;\n\n\n            if ( this.MessageHandler )\n            {\n                callback( this.MessageHandler );\n                return;\n            }\n\n            var self = this;\n\n            require(['qui/controls/messages/Handler'], function(Handler)\n            {\n                self.MessageHandler = new Handler();\n\n                callback( self.MessageHandler );\n            });\n        },\n\n        /**\n         * Return the message handler\n         *\n         * @method qui/classes/QUI#getControls\n         * @param {Function} callback\n         */\n        getControls : function(callback)\n        {\n            if ( this.Controls ) {\n                callback( this.Controls );\n            }\n        }\n    });\n});\n\n","\n/**\n * The Main QUI Object\n * create window.QUI\n *\n * @module qui/QUI\n * @author www.pcsg.de (Henning Leutz)\n */\n\ndefine('qui/QUI', ['qui/classes/QUI'], function(QUIClass)\n{\n    \"use strict\";\n\n    if ( typeof window.QUI === 'undefined' ) {\n        window.QUI = new QUIClass();\n    }\n\n    document.fireEvent( 'qui-loaded' );\n\n    document.addEvent('domready', function() {\n        window.QUI.parse( document.body );\n    });\n\n    return window.QUI;\n});\n\n","\n/**\n * Locale translation class\n *\n * @module qui/classes/Locale\n * @author www.pcg.de (Henning Leutz)\n *\n * @require qui/classes/DOM\n *\n * @event onError [ {String}, {this} ] - triggered if no_translation === false and no translation exist\n */\n\ndefine('qui/classes/Locale', ['qui/classes/DOM'], function(DOM)\n{\n    \"use strict\";\n\n    /**\n     * @class qui/classes/Locale\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Extends : DOM,\n        Type    : 'qui/classes/Locale',\n\n        /**\n         * Current lang, use getCurrent() to get the lang\n         */\n        current : 'en',\n\n        /**\n         * Available langs\n         */\n        langs : {},\n\n        /**\n         * No translation flag, makes no translation\n         * if true, get() returns the translation group\n         * usefull to show all translation groups\n         */\n        no_translation : false,\n\n        /**\n         * init\n         *\n         * @param options - dom options\n         */\n        initialize : function(options)\n        {\n            this.parent( options );\n        },\n\n        /**\n         * Set the current lang\n         *\n         * @method qui/classes/Locale#setCurrent\n         * @param {String} lang\n         */\n        setCurrent : function(lang)\n        {\n            this.current = lang;\n        },\n\n        /**\n         * Return the current Lang\n         *\n         * @method qui/classes/Locale#getCurrent\n         * @return {String}\n         */\n        getCurrent : function()\n        {\n            return this.current;\n        },\n\n        /**\n         * Set a translation for a translation group\n         *\n         * @method qui/classes/Locale#set\n         *\n         * @param {String} lang - language, which is translated\n         * @param {String} group - group, which is translated\n         * @param {String|Object} values - variable(s) which is translated\n         * @param {String} value - the translation value\n         *\n         * @example Locale.set(\"en\", \"my/group\", \"my.translation.variable\", \"Some text is translated\")\n         * @example Locale.set(\"de\", \"my/group\", \"my.translation.variable\", \"Ein Text der übersetzt wird\")\n         */\n        set : function(lang, group, values, value)\n        {\n            if ( !this.langs[ lang ] ) {\n                this.langs[ lang ] = {};\n            }\n\n            if ( !this.langs[ lang ][ group ] ) {\n                this.langs[ lang ][ group ] = {};\n            }\n\n            if ( typeof value !== 'undefined' )\n            {\n                this.langs[ lang ][ group ][ values ] = value;\n                return this;\n            }\n\n            var _key = this.langs[ lang ][ group ];\n\n            for ( var k in values )\n            {\n                if ( values.hasOwnProperty( k ) ) {\n                    _key[k] = values[k];\n                }\n            }\n\n            this.langs[ lang ][ group ] = _key;\n        },\n\n        /**\n         * Retrurn the translation of a translation group\n         *\n         * @method qui/classes/Locale#get\n         *\n         * @param {String} group - Group of the translation\n         * @param {String} value - Translation value / name\n         * @param {Object} repl  - Assoziative Array of replacements\n         * @return {String}\n         *\n         * @example Locale.get('my/group', 'my.translation.variable')\n         * @example Locale.get('my/group', 'my.translation.variable', {\n         *      placeholder : 'my replace'\n         * })\n         */\n        get : function(group, value, repl)\n        {\n            if ( typeof repl === 'undefined' ) {\n                return this.$get( group, value );\n            }\n\n            var result = this.$get( group, value );\n\n            for ( group in repl )\n            {\n                if ( repl.hasOwnProperty( group ) ) {\n                    result = result.replace('[' + group + ']', repl[group]);\n                }\n            }\n\n            return result;\n        },\n\n        /**\n         * Helper for get translation\n         *\n         * @method qui/classes/Locale#$get\n         *\n         * @param {String} key   - Group / Key of the translation\n         * @param {String} value - Translation value / name\n         * @return {String}\n         */\n        $get : function(key, value)\n        {\n            if ( this.no_translation ) {\n                return '['+ key +'] '+ value;\n            }\n\n            if ( this.langs[ this.current ] &&\n                 this.langs[ this.current ][ key ] &&\n                 this.langs[ this.current ][ key ][ value ] )\n            {\n                return this.langs[ this.current ][ key ][ value ];\n            }\n\n            if ( this.langs[ this.current ] &&\n                 this.langs[ this.current ][ key ] &&\n                 typeof value === 'undefined' )\n            {\n                return this.langs[ this.current ][ key ];\n            }\n\n            this.fireEvent('error', [\n                 'No translation found for ['+ key +'] '+ value,\n                 this\n            ]);\n\n            return '['+ key +'] '+ value;\n        }\n    });\n});\n\n","\n/**\n * The QUI Locale Object\n *\n * @module qui/Locale\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require qui/classes/Locale\n */\n\ndefine('qui/Locale', ['qui/classes/Locale'], function(QUILocale)\n{\n    \"use strict\";\n\n    if ( typeof window.QUILocale === 'undefined' ) {\n        window.QUILocale = new QUILocale();\n    }\n\n    return window.QUILocale;\n});\n\n","//>>excludeStart('excludeRequireCss', pragmas.excludeRequireCss)\n/*\n * css.normalize.js\n *\n * CSS Normalization\n *\n * CSS paths are normalized based on an optional basePath and the RequireJS config\n *\n * Usage:\n *   normalize(css, fromBasePath, toBasePath);\n *\n * css: the stylesheet content to normalize\n * fromBasePath: the absolute base path of the css relative to any root (but without ../ backtracking)\n * toBasePath: the absolute new base path of the css relative to the same root\n * \n * Absolute dependencies are left untouched.\n *\n * Urls in the CSS are picked up by regular expressions.\n * These will catch all statements of the form:\n *\n * url(*)\n * url('*')\n * url(\"*\")\n * \n * @import '*'\n * @import \"*\"\n *\n * (and so also @import url(*) variations)\n *\n * For urls needing normalization\n *\n */\n\ndefine('qui/lib/require-css/normalize',[],function() {\n  \n  // regular expression for removing double slashes\n  // eg http://www.example.com//my///url/here -> http://www.example.com/my/url/here\n  var slashes = /([^:])\\/+/g\n  var removeDoubleSlashes = function(uri) {\n    return uri.replace(slashes, '$1/');\n  }\n\n  // given a relative URI, and two absolute base URIs, convert it from one base to another\n  var protocolRegEx = /[^\\:\\/]*:\\/\\/([^\\/])*/;\n  var absUrlRegEx = /^(\\/|data:)/;\n  function convertURIBase(uri, fromBase, toBase) {\n    if (uri.match(absUrlRegEx) || uri.match(protocolRegEx))\n      return uri;\n    uri = removeDoubleSlashes(uri);\n    // if toBase specifies a protocol path, ensure this is the same protocol as fromBase, if not\n    // use absolute path at fromBase\n    var toBaseProtocol = toBase.match(protocolRegEx);\n    var fromBaseProtocol = fromBase.match(protocolRegEx);\n    if (fromBaseProtocol && (!toBaseProtocol || toBaseProtocol[1] != fromBaseProtocol[1] || toBaseProtocol[2] != fromBaseProtocol[2]))\n      return absoluteURI(uri, fromBase);\n    \n    else {\n      return relativeURI(absoluteURI(uri, fromBase), toBase);\n    }\n  };\n  \n  // given a relative URI, calculate the absolute URI\n  function absoluteURI(uri, base) {\n    if (uri.substr(0, 2) == './')\n      uri = uri.substr(2);\n\n    // absolute urls are left in tact\n    if (uri.match(absUrlRegEx) || uri.match(protocolRegEx))\n      return uri;\n    \n    var baseParts = base.split('/');\n    var uriParts = uri.split('/');\n    \n    baseParts.pop();\n    \n    while (curPart = uriParts.shift())\n      if (curPart == '..')\n        baseParts.pop();\n      else\n        baseParts.push(curPart);\n    \n    return baseParts.join('/');\n  };\n\n\n  // given an absolute URI, calculate the relative URI\n  function relativeURI(uri, base) {\n    \n    // reduce base and uri strings to just their difference string\n    var baseParts = base.split('/');\n    baseParts.pop();\n    base = baseParts.join('/') + '/';\n    i = 0;\n    while (base.substr(i, 1) == uri.substr(i, 1))\n      i++;\n    while (base.substr(i, 1) != '/')\n      i--;\n    base = base.substr(i + 1);\n    uri = uri.substr(i + 1);\n\n    // each base folder difference is thus a backtrack\n    baseParts = base.split('/');\n    var uriParts = uri.split('/');\n    out = '';\n    while (baseParts.shift())\n      out += '../';\n    \n    // finally add uri parts\n    while (curPart = uriParts.shift())\n      out += curPart + '/';\n    \n    return out.substr(0, out.length - 1);\n  };\n  \n  var normalizeCSS = function(source, fromBase, toBase) {\n\n    fromBase = removeDoubleSlashes(fromBase);\n    toBase = removeDoubleSlashes(toBase);\n\n    var urlRegEx = /@import\\s*(\"([^\"]*)\"|'([^']*)')|url\\s*\\(\\s*(\\s*\"([^\"]*)\"|'([^']*)'|[^\\)]*\\s*)\\s*\\)/ig;\n    var result, url, source;\n\n    while (result = urlRegEx.exec(source)) {\n      url = result[3] || result[2] || result[5] || result[6] || result[4];\n      var newUrl;\n      newUrl = convertURIBase(url, fromBase, toBase);\n      var quoteLen = result[5] || result[6] ? 1 : 0;\n      source = source.substr(0, urlRegEx.lastIndex - url.length - quoteLen - 1) + newUrl + source.substr(urlRegEx.lastIndex - quoteLen - 1);\n      urlRegEx.lastIndex = urlRegEx.lastIndex + (newUrl.length - url.length);\n    }\n    \n    return source;\n  };\n  \n  normalizeCSS.convertURIBase = convertURIBase;\n  normalizeCSS.absoluteURI = absoluteURI;\n  normalizeCSS.relativeURI = relativeURI;\n  \n  return normalizeCSS;\n});\n//>>excludeEnd('excludeRequireCss')\n;\n","/*\n * Require-CSS RequireJS css! loader plugin\n * 0.1.2\n * Guy Bedford 2013\n * MIT\n */\n\n/*\n *\n * Usage:\n *  require(['css!./mycssFile']);\n *\n * Tested and working in (up to latest versions as of March 2013):\n * Android\n * iOS 6\n * IE 6 - 10\n * Chome 3 - 26\n * Firefox 3.5 - 19\n * Opera 10 - 12\n * \n * browserling.com used for virtual testing environment\n *\n * Credit to B Cavalier & J Hann for the IE 6 - 9 method,\n * refined with help from Martin Cermak\n * \n * Sources that helped along the way:\n * - https://developer.mozilla.org/en-US/docs/Browser_detection_using_the_user_agent\n * - http://www.phpied.com/when-is-a-stylesheet-really-loaded/\n * - https://github.com/cujojs/curl/blob/master/src/curl/plugin/css.js\n *\n */\n\ndefine('qui/lib/require-css/css',[],function() {\n//>>excludeStart('excludeRequireCss', pragmas.excludeRequireCss)\n  if (typeof window == 'undefined')\n    return { load: function(n, r, load){ load() } };\n\n  var head = document.getElementsByTagName('head')[0];\n\n  var engine = window.navigator.userAgent.match(/Trident\\/([^ ;]*)|AppleWebKit\\/([^ ;]*)|Opera\\/([^ ;]*)|rv\\:([^ ;]*)(.*?)Gecko\\/([^ ;]*)|MSIE\\s([^ ;]*)/) || 0;\n\n  // use <style> @import load method (IE < 9, Firefox < 18)\n  var useImportLoad = false;\n  \n  // set to false for explicit <link> load checking when onload doesn't work perfectly (webkit)\n  var useOnload = true;\n\n  // trident / msie\n  if (engine[1] || engine[7])\n    useImportLoad = parseInt(engine[1]) < 6 || parseInt(engine[7]) <= 9;\n  // webkit\n  else if (engine[2])\n    useOnload = false;\n  // gecko\n  else if (engine[4])\n    useImportLoad = parseInt(engine[4]) < 18;\n  \n//>>excludeEnd('excludeRequireCss')\n  //main api object\n  var cssAPI = {};\n\n//>>excludeStart('excludeRequireCss', pragmas.excludeRequireCss)\n  cssAPI.pluginBuilder = './css-builder';\n\n  // <style> @import load method\n  var curStyle, curSheet;\n  var createStyle = function () {\n    curStyle = document.createElement('style');\n    head.appendChild(curStyle);\n    curSheet = curStyle.styleSheet || curStyle.sheet;\n  }\n  var ieCnt = 0;\n  var ieLoads = [];\n  var ieCurCallback;\n  \n  var createIeLoad = function(url) {\n    ieCnt++;\n    if (ieCnt == 32) {\n      createStyle();\n      ieCnt = 0;\n    }\n    curSheet.addImport(url);\n    curStyle.onload = processIeLoad;\n  }\n  var processIeLoad = function() {\n    ieCurCallback();\n \n    var nextLoad = ieLoads.shift();\n \n    if (!nextLoad) {\n      ieCurCallback = null;\n      return;\n    }\n \n    ieCurCallback = nextLoad[1];\n    createIeLoad(nextLoad[0]);\n  }\n  var importLoad = function(url, callback) {\n    if (!curSheet || !curSheet.addImport)\n      createStyle();\n\n    if (curSheet && curSheet.addImport) {\n      // old IE\n      if (ieCurCallback) {\n        ieLoads.push([url, callback]);\n      }\n      else {\n        createIeLoad(url);\n        ieCurCallback = callback;\n      }\n    }\n    else {\n      // old Firefox\n      curStyle.textContent = '@import \"' + url + '\";';\n\n      var loadInterval = setInterval(function() {\n        try {\n          curStyle.sheet.cssRules;\n          clearInterval(loadInterval);\n          callback();\n        } catch(e) {}\n      }, 10);\n    }\n  }\n\n  // <link> load method\n  var linkLoad = function(url, callback) {\n    var link = document.createElement('link');\n    link.type = 'text/css';\n    link.rel = 'stylesheet';\n    if (useOnload)\n      link.onload = function() {\n        link.onload = function() {};\n        // for style dimensions queries, a short delay can still be necessary\n        setTimeout(callback, 7);\n      }\n    else\n      var loadInterval = setInterval(function() {\n        for (var i = 0; i < document.styleSheets.length; i++) {\n          var sheet = document.styleSheets[i];\n          if (sheet.href == link.href) {\n            clearInterval(loadInterval);\n            return callback();\n          }\n        }\n      }, 10);\n    link.href = url;\n    head.appendChild(link);\n  }\n\n//>>excludeEnd('excludeRequireCss')\n  cssAPI.normalize = function(name, normalize) {\n    if (name.substr(name.length - 4, 4) == '.css')\n      name = name.substr(0, name.length - 4);\n\n    return normalize(name);\n  }\n\n//>>excludeStart('excludeRequireCss', pragmas.excludeRequireCss)\n  cssAPI.load = function(cssId, req, load, config) {\n\n    (useImportLoad ? importLoad : linkLoad)(req.toUrl(cssId + '.css'), load);\n\n  }\n\n//>>excludeEnd('excludeRequireCss')\n  return cssAPI;\n});\n\n","\n/**\n * Control standard parent class\n * All controls should inherit {qui/controls/Control}\n *\n * @module qui/controls/Control\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require qui/QUI\n * @require qui/classes/DOM\n * @require css!qui/controls/Control.css\n *\n * @event onInject [ this ]\n * @event onHighlight [ this ]\n * @event onNormalize [ this ]\n * @event onResize [ this ]\n */\n\ndefine('qui/controls/Control', [\n\n    'qui/QUI',\n    'qui/Locale',\n    'qui/classes/DOM',\n\n    'css!qui/controls/Control.css'\n\n], function(QUI, Locale, DOM)\n{\n    \"use strict\";\n\n    /**\n     * @class qui/controls/Control\n     *\n     * @event onDrawBegin - if inject() is used, the Event will be triggered\n     * @event onDrawEnd   - if inject() is used, the Event will be triggered\n     *\n     * @param {Object} options\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Extends : DOM,\n        Type    : 'qui/controls/Control',\n\n        $Parent : null,\n\n        options : {\n            name : ''\n        },\n\n        /**\n         * Init function for inherited classes\n         * If a Class inherit from qui/controls/Control, please use this.parent()\n         * so the control are registered in QUI.Controls\n         * and you can get the control with QUI.Controls.get()\n         *\n         * @method qui/controls/Control#init\n         * @param {Object} options - option params\n         */\n        initialize : function(options)\n        {\n            this.parent( options );\n\n            this.addEvent( 'onDestroy', function()\n            {\n                if ( typeof this.$Elm !== 'undefined' && this.$Elm ) {\n                    this.$Elm.destroy();\n                }\n\n                this.$Elm = null;\n            }.bind( this ));\n\n            QUI.Controls.add( this );\n        },\n\n        /**\n         * Create Method, can be overwritten for an own DOM creation\n         *\n         * @method qui/controls/Control#create\n         * @return {HTMLElement}\n         */\n        create : function()\n        {\n            if ( this.$Elm ) {\n                return this.$Elm;\n            }\n\n            this.$Elm = new Element( 'div.qui-control' );\n            this.$Elm.set( 'data-quiid', this.getId() );\n\n\n            return this.$Elm;\n        },\n\n        /**\n         * Inject the DOMNode of the Control to a Parent\n         *\n         * @method qui/controls/Control#inject\n         * @param {HTMLElement|Object} Parent - (qui/controls/Control) Parent Element\n         * @param {String} [pos] - optional\n         * @return {Object} qui/controls/Control\n         */\n        inject : function(Parent, pos)\n        {\n            this.fireEvent( 'drawBegin', [ this ] );\n\n            if ( typeof this.$Elm === 'undefined' || !this.$Elm ) {\n                this.$Elm = this.create();\n            }\n\n            if ( typeof QUI !== 'undefined' &&\n                 typeof QUI.Controls !== 'undefined' &&\n                 QUI.Controls.isControl( Parent ) )\n            {\n                // QUI Control insertion\n                Parent.appendChild( this );\n            } else\n            {\n                // DOMNode insertion\n                this.$Elm.inject( Parent, pos );\n            }\n\n            this.$Elm.set( 'data-quiid', this.getId() );\n\n            this.fireEvent( 'inject', [ this ] );\n\n            return this;\n        },\n\n        /**\n         * Import the control to the element\n         * The Elm node is the main element, now, and are returned with getElm()\n         * if you want to insert the control to a specific place, use inject(),\n         *\n         * if the html from the control already exists, use import\n         * The import() method is for controls, where the html of the control are generated by the server\n         *\n         * @param {HTMLElement} Elm - Elm node\n         * @return {Object} qui/controls/Control\n         */\n        'import' : function(Elm)\n        {\n            this.$Elm = Elm;\n            this.$Elm.set( 'data-quiid', this.getId() );\n            this.fireEvent( 'import', [ this, Elm ] );\n\n            return this;\n        },\n\n        /**\n         * Replaces the passed element with the control element.\n         * and assumes the characteristics of the element\n         *\n         * @param {HTMLElement} Elm - Elm node\n         * @return {Object} qui/controls/Control\n         */\n        replaces : function(Elm)\n        {\n            if ( this.$Elm ) {\n                return this.$Elm;\n            }\n\n            if ( \"styles\" in Elm ) {\n                this.setAttribute( 'styles', Elm.styles );\n            }\n\n            this.$Elm = this.create();\n\n            this.$Elm.set( 'data-quiid', this.getId() );\n            this.$Elm.set( 'data-qui', Elm.get('data-qui') );\n\n            if ( Elm.getParent() ) {\n                this.$Elm.replaces( Elm );\n            }\n\n            return this;\n        },\n\n        /**\n         * Save the control\n         * Placeholder method for sub controls\n         *\n         * The save method returns all needed attributes for saving the control to the workspace\n         * You can overwrite the method in sub classes to save specific attributes\n         *\n         * @method qui/controls/Control#serialize\n         * @return {Object}\n         */\n        serialize : function()\n        {\n            return {\n                attributes : this.getAttributes(),\n                type       : this.getType()\n            };\n        },\n\n        /**\n         * import the saved attributes and the data\n         * You can overwrite the method in sub classes to import specific attributes\n         *\n         * @method qui/controls/Control#unserialize\n         * @param {Object} data\n         */\n        unserialize : function(data)\n        {\n            if ( data.attributes ) {\n                this.setAttributes( data.attributes );\n            }\n        },\n\n        /**\n         * Get the DOMNode from the Button\n         *\n         * @method qui/controls/Control#getElm\n         * @return {HTMLElement}\n         */\n        getElm : function()\n        {\n            if ( typeof this.$Elm === 'undefined' || !this.$Elm ) {\n                this.create();\n            }\n\n            return this.$Elm;\n        },\n\n        /**\n         * If the control have a QUI_Object Parent\n         *\n         * @method qui/controls/Control#getParent\n         * @return {Object|Boolean} qui/controls/Control | false\n         */\n        getParent : function()\n        {\n            return this.$Parent || false;\n        },\n\n        /**\n         * Set the Parent to the Button\n         *\n         * @method qui/controls/Control#setParent\n         *\n         * @param {Object} Parent - qui/controls/Control\n         * @return {Object} qui/controls/Control\n         */\n        setParent : function(Parent)\n        {\n            this.$Parent = Parent;\n            return this;\n        },\n\n        /**\n         * Return a path string from the parent names\n         *\n         * @method qui/controls/Control#getPath\n         * @return {String}\n         */\n        getPath : function()\n        {\n            var path   = '/'+ this.getAttribute( 'name' ),\n                Parent = this.getParent();\n\n            if ( !Parent ) {\n                return path;\n            }\n\n            return Parent.getPath() + path;\n        },\n\n        /**\n         * Hide the control\n         *\n         * @method qui/controls/Control#hide\n         * @return {Object} qui/controls/Control\n         */\n        hide : function()\n        {\n            if ( this.$Elm ) {\n                this.$Elm.setStyle( 'display', 'none' );\n            }\n\n            return this;\n        },\n\n        /**\n         * Display / Show the control\n         *\n         * @method qui/controls/Control#show\n         * @return {Object} qui/controls/Control\n         */\n        show : function()\n        {\n            if ( this.$Elm ) {\n                this.$Elm.setStyle( 'display', null );\n            }\n\n            return this;\n        },\n\n        /**\n         * Is the control hidden?\n         *\n         * @return {Boolean}\n         */\n        isHidden : function()\n        {\n            if ( !this.$Elm ) {\n                return true;\n            }\n\n            return this.$Elm.getStyle( 'display' ) == 'none';\n        },\n\n        /**\n         * Highlight the control\n         *\n         * @method qui/controls/Control#highlight\n         * @return {Object} qui/controls/Control\n         */\n        highlight : function()\n        {\n            this.fireEvent( 'highlight', [ this ] );\n            return this;\n        },\n\n        /**\n         * Dehighlight / Normalize the control\n         *\n         * @method qui/controls/Control#normalize\n         * @return {Object} qui/controls/Control\n         */\n        normalize : function()\n        {\n            this.fireEvent( 'normalize', [ this ] );\n            return this;\n        },\n\n        /**\n         * Focus the DOMNode Element\n         *\n         * @method qui/controls/Control#focus\n         * @return {Object} qui/controls/Control\n         */\n        focus : function()\n        {\n            if ( this.$Elm )\n            {\n                // try catch for ie 8 fix\n                try {\n                    this.$Elm.focus();\n                } catch ( e ) {}\n            }\n\n            return this;\n        },\n\n        /**\n         * Resize the control\n         *\n         * @method qui/controls/Control#resize\n         */\n        resize : function()\n        {\n            this.fireEvent( 'resize', [ this ] );\n        },\n\n        /**\n         * create and open a new sheet\n         *\n         * @method qui/controls/Control#openSheet\n         * @param {Function} onfinish - callback function\n         * @param {Object} [options] - optional { nobuttons : true }\n         */\n        openSheet : function(onfinish, options)\n        {\n            var self = this;\n\n            options = options || {};\n\n            options = Object.merge({\n                buttons : true\n            }, options );\n\n            var Sheet = new Element('div', {\n                'class' : 'qui-sheet qui-box',\n                html    : '<div class=\"qui-sheet-content box\"></div>' +\n                          '<div class=\"qui-sheet-buttons box\">' +\n                              '<div class=\"qui-sheet-buttons-back qui-button btn-white\">' +\n                                  '<span>' +\n                                      Locale.get( 'qui/controls/Control', 'btn.back' ) +\n                                  '</span>' +\n                              '</div>' +\n                          '</div>',\n                styles : {\n                    left : '-110%'\n                }\n            }).inject( this.$Elm  );\n\n            Sheet.getElement( '.qui-sheet-buttons-back' ).addEvent(\n                'click',\n                function() {\n                    Sheet.fireEvent( 'close' );\n                }\n            );\n\n            var oldOverflow = this.getElm().getStyle( 'overflow' );\n\n            Sheet.addEvent('close', function()\n            {\n                self.getElm().setStyle( 'overflow', oldOverflow );\n\n                moofx( Sheet ).animate({\n                    left    : '-100%',\n                    opacity : 0\n                }, {\n                    equation : 'ease-in',\n                    callback : function() {\n                        Sheet.destroy();\n                    }\n                });\n            });\n\n            // heights\n            var Content = Sheet.getElement( '.qui-sheet-content' );\n\n            Content.setStyles({\n                height : Sheet.getSize().y - 50\n            });\n\n            this.getElm().setStyle( 'overflow', 'hidden' );\n\n            if ( options.buttons === false ) {\n                Sheet.getElement( '.qui-sheet-buttons' ).destroy();\n            }\n\n\n            // effect\n            moofx( Sheet ).animate({\n                left : 0\n            }, {\n                equation : 'ease-out',\n                callback : function() {\n                    onfinish( Content, Sheet );\n                }\n            });\n\n            return Sheet;\n        }\n    });\n});\n\n","\n/**\n * A loader control\n * Creates a div with a loader animation\n *\n * @module qui/controls/loader/Loader\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require qui/controls/Control\n * @require qui/Locale\n * @require css!qui/controls/loader/Loader.css\n */\n\ndefine('qui/controls/loader/Loader', [\n\n    'qui/controls/Control',\n    'qui/Locale',\n    'css!qui/controls/loader/Loader.css'\n\n], function(Control, Locale)\n{\n    \"use strict\";\n\n    /**\n     * @class qui/controls/loader/Loader\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Extends : Control,\n        Type    : 'qui/controls/loader/Loader',\n\n        options : {\n            cssclass  : '',    // extra CSS class\n            closetime : 50000, // seconds if the closing window showed\n            styles    : false  // extra CSS styles\n        },\n\n        initialize : function(options)\n        {\n            this.parent( options );\n            this.$delay = null;\n\n            this.addEvent('onDestroy', function()\n            {\n                if ( this.$Elm.getParent() ) {\n                    this.$Elm.getParent().removeClass( 'qui-loader-parent' );\n                }\n            });\n        },\n\n        /**\n         * Create the DOMNode Element of the loader\n         *\n         * @method controls/loader/Loader#create\n         * @return {HTMLElement}\n         */\n        create : function()\n        {\n            this.$Elm = new Element('div', {\n                'class' : 'qui-loader',\n                html : '<div class=\"qui-loader-message\"></div>'+\n                       '<div class=\"qui-loader-bar\">' +\n                           '<div class=\"qui-loader-dot qui-loader-bar1\"></div>' +\n                           '<div class=\"qui-loader-dot qui-loader-bar2\"></div>' +\n                           '<div class=\"qui-loader-dot qui-loader-bar3\"></div>' +\n                           '<div class=\"qui-loader-dot qui-loader-bar4\"></div>' +\n                           '<div class=\"qui-loader-dot qui-loader-bar5\"></div>' +\n                           '<div class=\"qui-loader-dot qui-loader-bar6\"></div>' +\n                           '<div class=\"qui-loader-dot qui-loader-bar7\"></div>' +\n                           '<div class=\"qui-loader-dot qui-loader-bar8\"></div>' +\n                       '</div>',\n                styles : {\n                    display : 'none',\n                    opacity : 0.8\n                }\n            });\n\n            if ( this.getAttribute('cssclass') ) {\n                this.$Elm.addClass( this.getAttribute('cssclass') );\n            }\n\n            if ( this.getAttribute( 'styles' ) ) {\n                this.$Elm.setStyles( this.getAttribute( 'styles' ) );\n            }\n\n            return this.$Elm;\n        },\n\n        /**\n         * Shows the loader\n         *\n         * @method controls/loader/Loader#show\n         */\n        show : function(str)\n        {\n            if ( !this.$Elm ) {\n                return;\n            }\n\n            if ( !this.$Elm.getParent() ) {\n                return;\n            }\n\n            var Message = this.$Elm.getElement( '.qui-loader-message' ),\n                Bar     = this.$Elm.getElement( '.qui-loader-bar' ),\n                size    = this.$Elm.getSize();\n\n            Message.set( 'html', '' );\n\n            var top  = (size.y - 50) / 2,\n                left = (size.x - 240) / 2;\n\n            if ( top < 0 )\n            {\n                size = this.$Elm.measure(function() {\n                    return this.getSize();\n                });\n\n                top  = (size.y - 50) / 2;\n                left = (size.x - 240) / 2;\n            }\n\n            Bar.setStyles({\n                top  : top,\n                left : left\n            });\n\n            if ( typeof str !== 'undefined' )\n            {\n                Message.set({\n                    html   : str,\n                    styles : {\n                        top : (size.y + 20) / 2\n                    }\n                });\n\n            }\n\n            this.$Elm.setStyle( 'display', '' );\n\n            if ( !this.$Elm.getParent().hasClass( 'qui-window-popup' ) ) {\n                this.$Elm.getParent().addClass( 'qui-loader-parent' );\n            }\n\n            if ( !this.getAttribute( 'closetime' ) ) {\n                return;\n            }\n\n            // sicherheitsabfrage nach 10 sekunden\n            if ( this.$delay ) {\n                clearTimeout( this.$delay );\n            }\n\n            this.$delay = (function()\n            {\n                this.showCloseButton();\n            }).delay( this.getAttribute( 'closetime' ) , this );\n        },\n\n        /**\n         * Hide the loader\n         *\n         * @method controls/loader/Loader#hide\n         */\n        hide : function()\n        {\n            if ( this.$delay ) {\n                clearTimeout( this.$delay );\n            }\n\n            if ( !this.$Elm ) {\n                return;\n            }\n\n            this.$Elm.setStyle( 'display', 'none' );\n        },\n\n        /**\n         * Shows the closing text in the loader\n         * if the timeout is triggered\n         *\n         * @method controls/loader/Loader#showCloseButton\n         */\n        showCloseButton : function()\n        {\n            if ( !this.$Elm ) {\n                return;\n            }\n\n            this.$Elm.set({\n                html   : '',\n                styles : {\n                    cursor : 'pointer'\n                }\n            });\n\n            this.$Elm.setStyle( 'opacity', 0.9 );\n\n            var self = this;\n\n            new Element('div', {\n                text   : Locale.get( 'quiqqer/controls', 'loader.close' ),\n                styles : {\n                    'font-weight' : 'bold',\n                    'text-align'  : 'center',\n                    'margin-top'  : (this.$Elm.getSize().y / 2) - 100\n                },\n                events :\n                {\n                    click : function() {\n                        self.hide();\n                    }\n                }\n            }).inject( this.$Elm );\n        }\n    });\n});\n\n","\n/**\n * DragDrop Helper with movable Element\n * no ie8\n *\n * @module qui/classes/utils/DragDrop\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require qui/classes/DOM\n *\n * @event onStart [ this, Dragable, event ]\n * @event onStop [ this, Dragable ]\n * @event onDrag [ this, Element, Droppable, event ]\n * @event onDrop [ this, Element, Droppable, event ]\n * @event onLeave [ this, Element, Droppable ]\n * @event onEnter [ this, Element, Droppable ]\n * @event onComplete [ this, event ]\n */\n\ndefine('qui/classes/utils/DragDrop', ['qui/classes/DOM'], function(DOM)\n{\n    \"use strict\";\n\n    /**\n     * @class qui/classes/utils/DragDrop\n     *\n     * @param {HTMLElement} Elm - Which Element is dragable\n     * @param {Object} options  - QDOM params\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Extends : DOM,\n        Type    : 'qui/classes/utils/DragDrop',\n\n        Binds : [\n             '$complete',\n             '$onDrag',\n             '$onDrop',\n             '$onLeave',\n             '$onEnter'\n        ],\n\n        options :\n        {\n            dropables : [ document.body ],\n            styles    : false,\n            cssClass  : false,\n            delay     : 500,     // when trigger the dragdrop, after miliseconds\n\n            limit : {\n                x : false, // [min, max]\n                y : false  // [min, max]\n            }\n        },\n\n        initialize : function(Elm, options)\n        {\n            var self = this;\n\n            this.parent( options );\n\n            this.$Drag    = null;\n            this.$Element = Elm;\n            this.$enable  = true;\n\n            if ( typeof Elm === 'undefined' ) {\n                return;\n            }\n\n            Elm.addEvents({\n\n                mousedown : function(event)\n                {\n                    if ( !self.$enable ) {\n                        return;\n                    }\n\n                    self.setAttribute( '_stopdrag', false );\n\n                    self.$timer = self.$start.delay(\n                        self.getAttribute('delay'),\n                        self,\n                        event\n                    );\n\n                    event.stop();\n                },\n\n                mouseup : function(event)\n                {\n                    if ( typeof self.$timer !== 'undefined' ) {\n                        clearTimeout( self.$timer );\n                    }\n\n                    self.$stop( event );\n                }\n            });\n        },\n\n        /**\n         * Return the binded Element\n         *\n         * @method qui/classes/utils/DragDrop#getElm\n         * @return {HTMLElement} Main Dom-Node Element\n         */\n        getElm : function()\n        {\n            return this.$Elm;\n        },\n\n        /**\n         * Enable the DragDrop\n         *\n         * @method qui/classes/utils/DragDrop#enable\n         */\n        enable : function()\n        {\n            this.$enable = true;\n        },\n\n        /**\n         * Disable the DragDrop\n         *\n         * @method qui/classes/utils/DragDrop#disable\n         */\n        disable : function()\n        {\n            this.$enable = false;\n        },\n\n        /**\n         * Starts the draging by onmousedown\n         *\n         * @method qui/classes/utils/DragDrop#$start\n         * @param {DOMEvent} event\n         */\n        $start : function(event)\n        {\n            if ( !this.$enable ) {\n                return;\n            }\n\n            if ( event.rightClick ) {\n                return;\n            }\n\n            if ( Browser.ie8 ) {\n                return;\n            }\n\n            if ( this.getAttribute( '_mousedown') ) {\n                return;\n            }\n\n            if ( this.getAttribute( '_stopdrag' ) ) {\n                return;\n            }\n\n            this.setAttribute( '_mousedown', true );\n\n            var mx = event.page.x,\n                my = event.page.y,\n\n                Elm     = this.$Element,\n                ElmSize = Elm.getSize(),\n                limit   = this.getAttribute('limit'),\n                docsize = document.body.getSize();\n\n            // create the shadow element\n            this.$Drag = new Element('div', {\n                'class' : 'box',\n                styles : {\n                    position   : 'absolute',\n                    top        : my - 20,\n                    left       : mx - 40,\n                    zIndex     : 1000,\n                    MozOutline : 'none',\n                    outline    : 0,\n                    color      : '#fff',\n                    padding    : 10,\n                    cursor     : 'pointer',\n\n                    width      : ElmSize.x,\n                    height     : ElmSize.y,\n                    background : 'rgba(0,0,0, 0.5)'\n                }\n            }).inject( document.body );\n\n            if ( this.getAttribute( 'styles' ) ) {\n                this.$Drag.setStyles( this.getAttribute( 'styles' ) );\n            }\n\n            if ( this.getAttribute( 'cssClass' ) ) {\n                this.$Drag.addClass( this.getAttribute( 'cssClass' ) );\n            }\n\n\n            // set the drag&drop events to the shadow element\n            // this.$Drag.addEvent( 'mouseup', this.$stop.bind( this ) );\n            // document.body.addEvent( 'mouseup', this.$stop.bind( this ) );\n\n            this.$Drag.focus();\n            this.fireEvent( 'start', [ this, this.$Drag, event ] );\n\n            // if no limit exist, set it to the body\n            if ( !limit.x ) {\n                limit.x = [ 0, docsize.x - this.$Drag.getSize().x ];\n            }\n\n            if ( !limit.y ) {\n                limit.y = [ 0, docsize.y - this.$Drag.getSize().y ];\n            }\n\n            var dropables = this.getAttribute( 'dropables' );\n\n            if ( typeOf( dropables ) === 'array' ) {\n                dropables = dropables.join( ',' );\n            }\n\n            // mootools draging\n            new Drag.Move(this.$Drag, {\n                precalculate : true,\n\n                droppables : dropables,\n                onComplete : this.$complete,\n                onDrop     : this.$onDrop,\n                onEnter    : this.$onEnter,\n                onLeave    : this.$onLeave,\n                onDrag     : this.$onDrag,\n\n                limit : limit\n\n            }).start({\n                page: {\n                    x : mx,\n                    y : my\n                }\n            });\n        },\n\n        /**\n         * Stops the Draging by onmouseup\n         *\n         * @method qui/classes/utils/DragDrop#$stop\n         */\n        $stop : function()\n        {\n            if ( Browser.ie8 ) {\n                return;\n            }\n\n            // Wenn noch kein mousedown drag getätigt wurde\n            // mousedown \"abbrechen\" und onclick ausführen\n            if ( !this.getAttribute( '_mousedown' ) )\n            {\n                this.setAttribute( '_stopdrag', true );\n                return;\n            }\n\n            this.setAttribute( '_mousedown', false );\n\n            if ( typeof this.$Drag !== 'undefined' || this.$Drag )\n            {\n                this.fireEvent( 'stop', [ this, this.$Drag ] );\n\n                this.$Drag.destroy();\n                this.$Drag = null;\n            }\n        },\n\n        /**\n         * Draging is complete\n         *\n         * @method qui/classes/utils/DragDrop#$complete\n         * @param {DOMEvent} event\n         */\n        $complete : function(event)\n        {\n            this.fireEvent( 'complete', [ this, event ] );\n            this.$stop();\n        },\n\n        /**\n         * event: fired on every drag step\n         *\n         * @method qui/classes/utils/DragDrop#$onDrag\n         * @param {HTMLElement} Element\n         * @param {DOMEvent} event\n         */\n        $onDrag : function(Element, event)\n        {\n            this.fireEvent( 'drag', [ this, Element, event ] );\n        },\n\n        /**\n         * event: if the drag drop would be droped to a dopable\n         *\n         * @method qui/classes/utils/DragDrop#$onDrop\n         * @param {HTMLElement} Element\n         * @param {HTMLElement} Dropable\n         * @param {DOMEvent} event\n         */\n        $onDrop : function(Element, Dropable, event)\n        {\n            this.fireEvent( 'drop', [ this, Element, Dropable, event ] );\n        },\n\n        /**\n         * If the drag drop enters a dropable\n         *\n         * @method qui/classes/utils/DragDrop#$onDrop\n         * @param {HTMLElement} Element\n         * @param {HTMLElement} Dropable\n         */\n        $onEnter : function(Element, Dropable)\n        {\n            this.fireEvent( 'enter', [ this, Element, Dropable ] );\n        },\n\n        /**\n         * If the drag drop leaves a dropable\n         *\n         * @method qui/classes/utils/DragDrop#$onLeave\n         * @param {HTMLElement} Element\n         * @param {HTMLElement} Dropable\n         */\n        $onLeave : function(Element, Dropable)\n        {\n            this.fireEvent( 'leave', [ this, Element, Dropable ] );\n        }\n    });\n});\n\n","\n/**\n * Utils for the controls\n * Helps the controls\n *\n * @module qui/utils/Controls\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require qui/QUI\n */\n\ndefine('qui/utils/Controls', ['qui/QUI'], function(QUI)\n{\n    \"use strict\";\n\n    return {\n\n        /**\n         * Checks if the string is a fontawesome css class\n         *\n         * @method qui/utils/Controls#isFontAwesomeClass\n         * @param {String} icon - FontAweomse icon-class or an image path\n         * @returns {Boolean}\n         */\n        isFontAwesomeClass : function(icon)\n        {\n            if ( !icon ) {\n                return false;\n            }\n\n            return ( icon.match( /icon-/ ) || icon.match( /fa-/ ) ) && !icon.match( /\\./ );\n        },\n\n        /**\n         * Highlights a control\n         *\n         * @method qui/utils/Controls#highlight\n         * @param {HTMLElement} Element\n         */\n        highlight : function(Element)\n        {\n            if ( !Element ) {\n                return;\n            }\n\n            var quiid = Element.get( 'data-quiid' );\n\n            if ( !quiid ) {\n                return;\n            }\n\n            QUI.Controls.getById( quiid ).highlight();\n        },\n\n        /**\n         * Normalize a control, if it is was highlighted\n         *\n         * @method qui/utils/Controls#normalize\n         * @param {HTMLElement} Element\n         */\n        normalize : function(Element)\n        {\n            if ( !Element ) {\n                return;\n            }\n\n            var quiid = Element.get( 'data-quiid' );\n\n            if ( !quiid ) {\n                return;\n            }\n\n            QUI.Controls.getById( quiid ).normalize();\n        }\n\n    };\n});\n","\n/**\n * A task for the taskbar\n *\n * @module qui/controls/taskbar/Task\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require qui/QUI\n * @require qui/controls/Control\n * @require qui/classes/utils/DragDrop\n * @require qui/utils/Controls\n * @require css!qui/controls/taskbar/Task.css\n *\n * @event onClick [this, DOMEvent]\n * @event onActivate [this]\n * @event onNormalize [this]\n * @event onRefresh [this]\n * @event onFocus [this, DOMEvent]\n * @event onBlur [this, DOMEvent]\n * @event onClose [this, DOMEvent]\n * @event onContextMenu [this, DOMEvent]\n * @event onHighlight [this]\n * @event onDeHighlight [this]\n * @event onSelect [this]\n */\n\ndefine('qui/controls/taskbar/Task', [\n\n    'qui/QUI',\n    'qui/controls/Control',\n    'qui/classes/utils/DragDrop',\n    'qui/utils/Controls',\n\n    'css!qui/controls/taskbar/Task.css'\n\n], function(QUI, Control, QUIDragDrop, Utils)\n{\n    \"use strict\";\n\n    /**\n     * @class qui/controls/taskbar/Task\n     *\n     * @param {Object} Instance - (qui/controls/Control) Control for the task\n     * @param {Object} options                - QDOM params\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Extends : Control,\n        Type    : 'qui/controls/taskbar/Task',\n\n        Binds : [\n            'close',\n            'click',\n            '$onDestroy'\n        ],\n\n        options : {\n            name      : 'qui-task',\n            icon      : false,\n            text      : '',\n            cssClass  : '',\n            closeable : true,\n            dragable  : true\n        },\n\n        initialize : function(Instance, options)\n        {\n            this.$Instance = Instance || null;\n            this.$Elm      = null;\n\n            this.addEvents({\n                onDestroy : this.$onDestroy\n            });\n\n            if ( typeof Instance === 'undefined' ) {\n                return;\n            }\n\n            var self = this;\n\n            Instance.setAttribute( 'Task', this );\n\n            // Instance events\n            Instance.addEvent('onRefresh', function() {\n                self.refresh();\n            });\n\n            Instance.addEvent('onSetAttribute', function() {\n                self.refresh();\n            });\n\n\n            Instance.addEvent('onDestroy', function()\n            {\n                self.$Instance = null;\n                self.destroy();\n            });\n\n            this.parent( options );\n        },\n\n        /**\n         * Return the save date, eq for the workspace\n         *\n         * @method qui/controls/taskbar/Task#serialize\n         * @return {Object}\n         */\n        serialize : function()\n        {\n            return {\n                attributes : this.getAttributes(),\n                type       : this.getType(),\n                instance   : this.getInstance() ? this.getInstance().serialize() : ''\n            };\n        },\n\n        /**\n         * Import the saved data\n         *\n         * @method qui/controls/taskbar/Task#unserialize\n         * @param {Object} data\n         * @return {Object} this (qui/controls/taskbar/Task)\n         */\n        unserialize : function(data)\n        {\n            this.setAttributes( data.attributes );\n\n            var instance = data.instance;\n\n            if ( !instance ) {\n                return this;\n            }\n\n            require([ instance.type ], function(Modul)\n            {\n                var Instance = new Modul( data.instance );\n                    Instance.unserialize( data.instance );\n\n                this.initialize( Instance, data.attributes );\n\n            }.bind( this ));\n        },\n\n        /**\n         * Return the DOM-Node\n         *\n         * @method qui/controls/buttons/Button#getElm\n         * @return {HTMLElement} DOM-Node Element\n         */\n        create : function()\n        {\n            if ( this.$Elm ) {\n                return this.$Elm;\n            }\n\n            var self = this;\n\n            this.$Elm = new Element('div', {\n                'class' : 'qui-task box',\n                html    : '<span class=\"qui-task-icon\"></span>' +\n                          '<span class=\"qui-task-text\"></span>',\n                styles : {\n                    outline: 'none'\n                },\n                tabindex : -1,\n                events   :\n                {\n                    click : self.click,\n\n                    focus : function(event) {\n                        self.fireEvent( 'focus', [ self, event ] );\n                    },\n\n                    blur : function(event) {\n                        self.fireEvent( 'blur', [ self, event ] );\n                    },\n\n                    contextmenu : function(event)\n                    {\n                        self.fireEvent( 'contextMenu', [ self, event ] );\n\n                        event.stop();\n                    }\n                }\n            });\n\n            if ( this.getAttribute( 'dragable' ) )\n            {\n                var DragDropParent = null;\n\n                new QUIDragDrop(this.$Elm, {\n                    dropables : '.qui-task-drop',\n                    events    :\n                    {\n                        onStart : function(Dragable, Element, event) {\n                            self.fireEvent( 'dragDropStart', [ self, Element, event ] );\n                        },\n\n                        onComplete : function() {\n                            self.fireEvent( 'dragDropComplete', [ self ] );\n                        },\n\n                        onDrag : function(Dragable, Element, event)\n                        {\n                            self.fireEvent( 'drag', [ self, event ] );\n\n                            if ( DragDropParent ) {\n                                DragDropParent.fireEvent( 'dragDropDrag', [ self, event ] );\n                            }\n                        },\n\n                        onEnter : function(Dragable, Element, Dropable)\n                        {\n                            var quiid = Dropable.get( 'data-quiid' );\n\n                            if ( !quiid ) {\n                                return;\n                            }\n\n                            DragDropParent = QUI.Controls.getById( quiid );\n\n                            if ( !DragDropParent ) {\n                                return;\n                            }\n\n                            if ( DragDropParent ) {\n                                DragDropParent.fireEvent( 'dragDropEnter', [ self, Element ] );\n                            }\n                        },\n\n                        onLeave : function(Dragable, Element)\n                        {\n                            if ( DragDropParent )\n                            {\n                                DragDropParent.fireEvent( 'dragDropLeave', [ self, Element ] );\n                                DragDropParent = null;\n                            }\n                        },\n\n                        onDrop : function(Dragable, Element, Dropable, event)\n                        {\n                            if ( !Dropable ) {\n                                return;\n                            }\n\n                            if ( DragDropParent ) {\n                                DragDropParent.fireEvent( 'dragDropDrop', [ self, Element, Dropable, event ] );\n                            }\n                        }\n                    }\n                });\n            }\n\n\n            if ( this.getAttribute( 'cssClass' ) ) {\n                this.$Elm.addClass( this.getAttribute( 'cssClass' ) );\n            }\n\n            if ( this.getAttribute('closeable') )\n            {\n                new Element('div', {\n                    'class' : 'qui-task-close',\n                    'html'  : '<span class=\"icon-remove\"></span>',\n                    events  : {\n                        click : this.close\n                    }\n                }).inject( this.$Elm );\n            }\n\n            // exist serialize data?\n            if ( typeof this.$serialize !== 'undefined' ) {\n                this.unserialize( this.$serialize );\n            }\n\n            this.refresh();\n\n            return this.$Elm;\n        },\n\n        /**\n         * Refresh the task display\n         *\n         * @method qui/controls/taskbar/Task#refresh\n         */\n        refresh : function()\n        {\n            if ( !this.$Elm )\n            {\n                this.fireEvent( 'refresh', [ this ] );\n                return;\n            }\n\n            var Icon = this.$Elm.getElement( '.qui-task-icon' ),\n                Text = this.$Elm.getElement( '.qui-task-text' );\n\n            if ( this.getIcon() )\n            {\n                var icon = this.getIcon();\n\n                Icon.className = 'qui-task-icon';\n                Icon.setStyle( 'background-image', null );\n\n                if ( Utils.isFontAwesomeClass( icon ) )\n                {\n                    Icon.addClass( icon );\n                } else\n                {\n                    Icon.setStyle( 'background-image', 'url('+ icon +')' );\n                }\n            }\n\n            var description = this.getDescription(),\n                text        = this.getText();\n\n            if ( !text ) {\n                text = '';\n            }\n\n            if ( !description && text) {\n                description = text;\n            }\n\n            if ( !description ) {\n                description = '';\n            }\n\n            this.$Elm.set( 'title', description );\n            Text.set( 'html', text );\n\n            this.fireEvent( 'refresh', [ this ] );\n        },\n\n        /**\n         * Return the instance icon\n         *\n         * @method qui/controls/taskbar/Task#refresh\n         * @return {String|Boolean}\n         */\n        getIcon : function()\n        {\n            if ( !this.getInstance() ) {\n                return '';\n            }\n\n            return this.getInstance().getAttribute( 'icon' );\n        },\n\n        /**\n         * Return the instance title\n         *\n         * @method qui/controls/taskbar/Task#getText\n         * @return {String|Boolean}\n         */\n        getText : function()\n        {\n            if ( !this.getInstance() ) {\n                return '';\n            }\n\n            return this.getInstance().getAttribute( 'title' );\n        },\n\n        /**\n         * Return the description text\n         *\n         * @method qui/controls/taskbar/Task#getDescription\n         * @return {String|Boolean}\n         */\n        getDescription : function()\n        {\n            if ( !this.getInstance() ) {\n                return '';\n            }\n\n            return this.getInstance().getAttribute( 'description' );\n        },\n\n        /**\n         * Return the binded instance to the task\n         *\n         * @method qui/controls/taskbar/Task#getInstance\n         * @return {Object} qui/controls/Control\n         */\n        getInstance : function()\n        {\n            return this.$Instance;\n        },\n\n        /**\n         * Set / Bind an instance to the task\n         *\n         * @method qui/controls/taskbar/Task#setInstance\n         * @param {Object} Instance - qui/controls/Control\n         */\n        setInstance : function(Instance)\n        {\n            this.$Instance = Instance;\n        },\n\n        /**\n         * Return the Taskbar object\n         *\n         * @method qui/controls/taskbar/Task#getTaskbar\n         * @return {Object} qui/controls/taskbar/Taskbar\n         */\n        getTaskbar : function()\n        {\n            var Taskbar = this.getParent();\n\n            if ( typeOf( Taskbar ) == \"qui/controls/taskbar/Group\" ) {\n                Taskbar = Taskbar.getParent();\n            }\n\n            return Taskbar;\n        },\n\n        /**\n         * Set the Tab active\n         *\n         * @method qui/controls/taskbar/Task#activate\n         * @return {Object} this (qui/controls/taskbar/Task)\n         */\n        activate : function()\n        {\n            if ( this.isActive() || !this.$Elm ) {\n                return this;\n            }\n\n            this.$Elm.addClass( 'active' );\n            this.fireEvent( 'activate', [ this ] );\n\n            return this;\n        },\n\n        /**\n         * Normalize the tab\n         *\n         * @method qui/controls/taskbar/Task#normalize\n         * @return {Object} this (qui/controls/taskbar/Task)\n         */\n        normalize : function()\n        {\n            if ( this.$Elm )\n            {\n                this.$Elm.removeClass( 'active' );\n                this.$Elm.removeClass( 'highlight' );\n                this.$Elm.removeClass( 'select' );\n\n                this.$Elm.setStyle( 'display', null );\n            }\n\n            this.fireEvent( 'normalize', [ this ] );\n\n            return this;\n        },\n\n        /**\n         * Highlight the Task\n         *\n         * @method qui/controls/taskbar/Task#highlight\n         * @return {Object} this (qui/controls/taskbar/Task)\n         */\n        highlight : function()\n        {\n            if ( this.$Elm ) {\n                this.$Elm.addClass( 'highlight' );\n            }\n\n            this.fireEvent( 'highlight', [ this ] );\n\n            return this;\n        },\n\n        /**\n         * Remove the highlight from a task\n         *\n         * @method qui/controls/taskbar/Task#highlight\n         * @return {Object} this (qui/controls/taskbar/Task)\n         */\n        deHighlight : function()\n        {\n            if ( this.$Elm ) {\n                this.$Elm.removeClass( 'highlight' );\n            }\n\n            this.fireEvent( 'deHighlight', [ this ] );\n\n            return this;\n        },\n\n        /**\n         * Hide the task tab\n         *\n         * @method qui/controls/taskbar/Task#hide\n         * @return {Object} this (qui/controls/taskbar/Task)\n         */\n        hide : function()\n        {\n            if ( this.$Elm ) {\n                this.$Elm.setStyle( 'display', 'none' );\n            }\n\n            return this;\n        },\n\n        /**\n         * Return true if the Task is active\n         *\n         * @method qui/controls/taskbar/Task#isActive\n         * @return {Boolean}\n         */\n        isActive : function()\n        {\n            if ( !this.$Elm ) {\n                return false;\n            }\n\n            return this.$Elm.hasClass( 'active' );\n        },\n\n        /**\n         * Trigger the click event\n         *\n         * @method qui/controls/taskbar/Task#click\n         * @return {Object} this (qui/controls/taskbar/Task)\n         */\n        click : function(event)\n        {\n            this.fireEvent( 'click', [ this, event ] );\n\n            if ( !this.isActive() ) {\n                this.activate();\n            }\n\n            return this;\n        },\n\n        /**\n         * Trigger the close event\n         *\n         * @method qui/controls/taskbar/Task#close\n         * @return {Object} this (qui/controls/taskbar/Task)\n         */\n        close : function(event)\n        {\n            this.fireEvent( 'close', [ this, event ] );\n            this.destroy();\n\n            return this;\n        },\n\n        /**\n         * Set the focus to the task DOMNode element\n         *\n         * @method qui/controls/taskbar/Task#focus\n         * @return {Object} this (qui/controls/taskbar/Task)\n         */\n        focus : function()\n        {\n            if ( this.$Elm ) {\n                this.$Elm.focus();\n            }\n\n            return this;\n        },\n\n        /**\n         * Select the Task\n         *\n         * @method qui/controls/taskbar/Task#select\n         * @return {Object} this (qui/controls/taskbar/Task)\n         */\n        select : function()\n        {\n            if ( this.$Elm ) {\n                this.$Elm.addClass( 'select' );\n            }\n\n            this.fireEvent( 'select', [ this ] );\n\n            return this;\n        },\n\n        /**\n         * Is the Task selected?\n         *\n         * @method qui/controls/taskbar/Task#isSelected\n         * @return {Boolean}\n         */\n        isSelected : function()\n        {\n            if ( this.$Elm ) {\n                return this.$Elm.hasClass( 'select' );\n            }\n\n            return false;\n        },\n\n        /**\n         * Unselect the Task\n         *\n         * @method qui/controls/taskbar/Task#unselect\n         * @return {Object} this (qui/controls/taskbar/Task)\n         */\n        unselect : function()\n        {\n            if ( this.$Elm ) {\n                this.$Elm.removeClass( 'select' );\n            }\n\n            this.fireEvent( 'unselect', [ this ] );\n\n            return this;\n        },\n\n        /**\n         * on destroy task event\n         *\n         * @method qui/controls/taskbar/Task#$onDestroy\n         */\n        $onDestroy : function()\n        {\n            if ( this.getInstance() ) {\n                this.getInstance().destroy();\n            }\n\n            this.$Instance = null;\n        }\n    });\n});\n\n","\n/**\n * Helper for DOMNode Elements\n *\n * @module qui/utils/Elements\n * @author www.pcsg.de (Henning Leutz)\n */\n\ndefine('qui/utils/Elements', {\n\n    /**\n     * checks if the element is in the viewport\n     *\n     * @method qui/utils/Elements#isInViewport\n     * @param {HTMLElement} el\n     */\n    isInViewport : function(el)\n    {\n        \"use strict\";\n\n        var rect = el.getBoundingClientRect();\n\n        return (\n            rect.top >= 0 &&\n            rect.left >= 0 &&\n            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n            rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n        );\n    },\n\n    /**\n     * Return the z-index of an Element\n     *\n     * @method qui/utils/Elements#getComputedZIndex\n     * @return {Number}\n     */\n    getComputedZIndex : function(Elm)\n    {\n        \"use strict\";\n\n        var i, z, len, max = 0;\n        var parents = Elm.getParents();\n\n        for ( i = 0, len = parents.length; i < len; i++)\n        {\n            z = parents[ i ].getStyle( 'zIndex' );\n\n            if ( z == 'auto' ) {\n                continue;\n            }\n\n            if ( z > max ) {\n                 max = z;\n            }\n        }\n\n        return max;\n    },\n\n    /**\n     * Return the index of the child from its parent\n     *\n     * @param {HTMLElement} Elm\n     * @return {Number}\n     */\n    getChildIndex : function(Elm)\n    {\n        \"use strict\";\n\n        return Array.prototype.indexOf.call(\n            Elm.getParent().children,\n            Elm\n        );\n    },\n\n    /**\n     * Return the cursor position of an input field\n     *\n     * @return {null|Number}\n     */\n    getCursorPosition : function(Input)\n    {\n        \"use strict\";\n\n        if ( Input.nodeName !== 'INPUT' ) {\n            return null;\n        }\n\n        if ( 'selectionStart' in Input ) {\n            return Input.selectionStart;\n        }\n\n        if ( document.selection )\n        {\n            // IE\n            Input.focus();\n\n            var range    = document.selection.createRange();\n            var rangeLen = range.text.length;\n\n            range.moveStart( 'character', -Input.value.length );\n\n            return range.text.length - rangeLen;\n        }\n\n        return null;\n    },\n\n    /**\n     * Set the cursor to the position\n     *\n     * @param {HTMLElement} Input - Input | Textarea Element\n     * @param {Number} pos - Position of the cursor\n     */\n    setCursorPosition : function(Input, pos)\n    {\n        \"use strict\";\n\n        if ( Input.nodeName !== 'INPUT' && Input.nodeName !== 'TEXTAREA' ) {\n            return null;\n        }\n\n        if ( Input.createTextRange )\n        {\n            var range = Input.createTextRange();\n\n            range.move( 'character', pos );\n            range.select();\n            return;\n        }\n\n        if ( Input.selectionStart )\n        {\n            Input.focus();\n            Input.setSelectionRange( pos+1, pos+1 );\n            return;\n        }\n\n        Input.focus();\n    }\n});\n\n","\n/**\n * A Context Menu\n *\n * @module qui/controls/contextmenu/Menu\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require qui/controls/Control\n * @require css!qui/controls/contextmenu/Menu.css\n */\n\ndefine('qui/controls/contextmenu/Menu', [\n\n    'qui/QUI',\n    'qui/controls/Control',\n    'qui/utils/Elements',\n\n    'css!qui/controls/contextmenu/Menu.css'\n\n], function(QUI, Control, QUIElementUtil)\n{\n    \"use strict\";\n\n    /**\n     * @class qui/controls/contextmenu/Menu\n     *\n     * @fires onShow [this]\n     * @fires onHide [this]\n     * @fires onBlur [this]\n     * @fires onFocus [this]\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Extends : Control,\n        Type    : 'qui/controls/contextmenu/Menu',\n\n        Binds : [\n            '$keyup'\n        ],\n\n        options : {\n            styles : null,   // mootools css styles\n            width  : 200,    // menü width\n            title  : false,  // title of the menu (optional) : String\n            shadow : true,   // menü with shadow (true) or not (false)\n            corner : false,  // corner for the menü\n\n            dragable : false\n        },\n\n        initialize : function(options)\n        {\n            this.parent( options );\n\n            this.$items  = [];\n            this.$Title  = null;\n            this.$Active = null;\n        },\n\n        /**\n         * Create the DOM Element\n         *\n         * @method qui/controls/contextmenu/Menu#create\n         * @return {HTMLElement} main DOM-Node Element\n         */\n        create : function()\n        {\n            this.$Elm = new Element('div.qui-contextmenu', {\n                html     : '<div class=\"qui-contextmenu-container\"></div>',\n                tabindex : -1,\n                styles   : {\n                    display : 'none',\n                    outline : 'none',\n                    '-moz-outline': 'none'\n                },\n                events :\n                {\n                    blur : function() {\n                        this.fireEvent( 'blur', [ this ] );\n                    }.bind( this ),\n\n                    keyup : this.$keyup\n                },\n                'data-quiid' : this.getId()\n            });\n\n            this.$Container = this.$Elm.getElement( '.qui-contextmenu-container' );\n\n            if ( this.getAttribute( 'width' ) ) {\n                this.$Elm.setStyle( 'width', this.getAttribute( 'width' ) );\n            }\n\n            if ( this.getAttribute( 'styles' ) ) {\n                this.$Elm.setStyles( this.getAttribute( 'styles' ) );\n            }\n\n            if ( this.getAttribute( 'title' ) ) {\n                this.setTitle( this.getAttribute( 'title' ) );\n            }\n\n            if ( this.getAttribute( 'shadow' ) ) {\n                this.$Container.addClass( 'qui-contextmenu-shadow' );\n            }\n\n            for ( var i = 0, len = this.$items.length; i < len; i++ ) {\n                this.$items[ i ].inject( this.$Container );\n            }\n\n            return this.$Elm;\n        },\n\n        /**\n         * Shows the Menu, clears the display style\n         *\n         * @method qui/controls/contextmenu/Menu#show\n         * @return {Object} this (qui/controls/contextmenu/Menu)\n         */\n        show : function()\n        {\n            if ( !this.$Elm ) {\n                return this;\n            }\n\n            var Parent = this.$Elm.getParent(),\n                Elm    = this.$Elm;\n\n            if ( this.getAttribute( 'corner' ) )\n            {\n                Elm.removeClass( 'qui-context-corner-top' );\n                Elm.removeClass( 'qui-context-corner-bottom' );\n                Elm.removeClass( 'qui-context-corner-left' );\n                Elm.removeClass( 'qui-context-corner-left' );\n            }\n\n            switch ( this.getAttribute( 'corner' ) )\n            {\n                case 'top':\n                    Elm.addClass( 'qui-context-corner-top' );\n                break;\n\n                case 'bottom':\n                    Elm.addClass( 'qui-context-corner-bottom' );\n                break;\n\n                case 'left':\n                    Elm.addClass( 'qui-context-corner-left' );\n                break;\n\n                case 'right':\n                    Elm.addClass( 'qui-context-corner-right' );\n                break;\n            }\n\n            // zindex\n            if ( this.getParent() && QUI.Controls.isControl( this.getParent() ) )\n            {\n                var ParentElm = this.getParent().getElm();\n\n                if ( ParentElm )\n                {\n                    Elm.setStyle(\n                        'zIndex',\n                        QUIElementUtil.getComputedZIndex( ParentElm ) + 1\n                    );\n                }\n            }\n\n            Elm.setStyles({\n                display : ''\n            });\n\n            var elm_size = Elm.getSize();\n\n            this.$Container.setStyles({\n                height : elm_size.y\n            });\n\n\n            // if parent is the body element\n            // context menu don't get out of the body\n            this.setAttribute( 'menuPosLeft', false );\n\n            if ( Parent.nodeName === 'BODY' )\n            {\n                var elm_pos   = Elm.getPosition(),\n                    body_size = Parent.getSize();\n\n                if ( elm_pos.x + elm_size.x + 50 > body_size.x ) {\n                    this.$Elm.setStyle( 'left', body_size.x - elm_size.x - 50 );\n                }\n\n                if ( elm_pos.y + elm_size.y + 50 > body_size.y ) {\n                    this.$Elm.setStyle( 'top', body_size.y - elm_size.y - 50 );\n                }\n            }\n\n            if ( this.$Active ) {\n                this.$Active.setActive();\n            }\n\n            this.fireEvent( 'show', [ this ] );\n\n            return this;\n        },\n\n        /**\n         * Hide the Menu, set the display style to none\n         *\n         * @method qui/controls/contextmenu/Menu#hide\n         * @return {Object} this (qui/controls/contextmenu/Menu)\n         */\n        hide : function()\n        {\n            this.getElm().setStyles({\n                display : 'none'\n            });\n\n            this.fireEvent( 'hide', [ this ] );\n\n            return this;\n        },\n\n        /**\n         * Set the focus to the Menu, the blur event would be triggerd\n         *\n         * @method qui/controls/contextmenu/Menu#focus\n         * @return {Object} this (qui/controls/contextmenu/Menu)\n         */\n        focus : function()\n        {\n            this.getElm().focus();\n            this.fireEvent( 'focus', [ this ] );\n\n            return this;\n        },\n\n        /**\n         * Set the Position of the Menu\n         *\n         * if parent is the body element\n         * context menu don't get out of the body\n         *\n         * @method qui/controls/contextmenu/Menu#setPosition\n         * @param {Number} x - from the top (x axis)\n         * @param {Number}y - from the left (y axis)\n         * @return {Object} this (qui/controls/contextmenu/Menu)\n         */\n        setPosition : function(x, y)\n        {\n            if ( this.$Elm )\n            {\n                this.$Elm.setStyles({\n                    left : x,\n                    top  : y\n                });\n            }\n\n            return this;\n        },\n\n        /**\n         * Set and create the menu title\n         *\n         * @method qui/controls/contextmenu/Menu#setTitle\n         * @param {String} text - Title text\n         * @return {Object} this (qui/controls/contextmenu/Menu)\n         */\n        setTitle : function(text)\n        {\n            if ( this.$Container && !this.$Title )\n            {\n                this.$Title = new Element('div.qui-contextmenu-title');\n                this.$Title.inject( this.$Container, 'top' );\n            }\n\n            if ( this.$Title ) {\n                this.$Title.set( 'html', text );\n            }\n\n            this.setAttribute( 'title', text );\n\n            return this;\n        },\n\n        /**\n         * Get an Child Element\n         *\n         * @method qui/controls/contextmenu/Menu#getChildren\n         * @param {String} name - [Name of the Children, optional, if no name given, returns all Children]\n         * @return {Array|Boolean|Object} List of children | false | Child (qui/controls/contextmenu/Item)\n         */\n        getChildren : function(name)\n        {\n            if ( typeof name !== 'undefined' )\n            {\n                var i, len;\n                var items = this.$items;\n\n                for ( i = 0, len = items.length; i < len; i++ )\n                {\n                    if ( items[ i ].getAttribute( 'name' ) == name ) {\n                        return items[ i ];\n                    }\n                }\n\n                return false;\n            }\n\n            return this.$items;\n        },\n\n        /**\n         * Return the first child Element\n         *\n         * @method qui/controls/contextmenu/Menu#firstChild\n         * @return {Object|Boolean} Child (qui/controls/contextmenu/Item) | false\n         */\n        firstChild : function()\n        {\n            if ( this.$items[ 0 ] ) {\n                return this.$items[ 0 ];\n            }\n\n            return false;\n        },\n\n        /**\n         * Return the number of children\n         *\n         * @method qui/controls/contextmenu/Menu#count\n         * @return {Number} count of children\n         */\n        count : function()\n        {\n            return this.$items.length;\n        },\n\n        /**\n         * Add the Child to the Menü\n         *\n         * @method qui/controls/contextmenu/Menu#appendChild\n         * @param {Object} Child - qui/controls/contextmenu/Item\n         * @return {Object} this (qui/controls/contextmenu/Menu)\n         */\n        appendChild : function(Child)\n        {\n            if ( !Child || typeof Child === 'undefined' ) {\n                return this;\n            }\n\n            this.$items.push( Child );\n\n            Child.setParent( this );\n\n            if ( this.getAttribute( 'dragable' ) ) {\n                Child.setAttribute( 'dragable', true );\n            }\n\n            // children events\n            /*\n            Child.addEvent( 'onClick', function(Item, event)\n            {\n                this.hide();\n\n                document.body.focus();\n\n                if ( typeof event !== 'undefined' ) {\n                    event.stop();\n                }\n            }.bind( this ) );\n\n            Child.addEvent( 'onActive', function(Item)\n            {\n                if ( this.$Active == Item ) {\n                    return;\n                }\n\n                if ( this.$Active ) {\n                    this.$Active.setNormal();\n                }\n\n                this.$Active = Item;\n            }.bind( this ));\n            */\n\n            if ( this.$Container ) {\n                Child.inject( this.$Container );\n            }\n\n            return this;\n        },\n\n        /**\n         * Destroy all children items\n         *\n         * @method qui/controls/contextmenu/Menu#clearChildren\n         * @return {Object} this (qui/controls/contextmenu/Menu)\n         */\n        clearChildren : function()\n        {\n            for ( var i = 0, len = this.$items.length; i < len; i++ )\n            {\n                if ( this.$items[ i ] ) {\n                    this.$items[ i ].destroy();\n                }\n            }\n\n            this.$items = [];\n\n            return this;\n        },\n\n        /**\n         * clearChildren() alternative\n         *\n         * @method qui/controls/contextmenu/Menu#clear\n         * @return {Object} this (qui/controls/contextmenu/Menu)\n         */\n        clear : function()\n        {\n            return this.clearChildren();\n        },\n\n        /**\n         * Return the active item\n         *\n         * @method qui/controls/contextmenu/Menu#getActive\n         * @return {Object|Boolean} Active Child (qui/controls/contextmenu/Item) | false\n         */\n        getActive : function()\n        {\n            return this.$Active ? this.$Active : false;\n        },\n\n        /**\n         * Return the next children / item of the item\n         *\n         * @method qui/controls/contextmenu/Menu#getNext\n         * @param {Object} Item - qui/controls/contextmenu/Item\n         * @return {Object|Boolean} qui/controls/contextmenu/Item | false\n         */\n        getNext : function(Item)\n        {\n            for ( var i = 0, len = this.$items.length; i < len; i++ )\n            {\n                if ( this.$items[ i ] != Item ) {\n                    continue;\n                }\n\n                if ( typeof this.$items[ i + 1 ] !== 'undefined' ) {\n                    return this.$items[ i + 1 ];\n                }\n            }\n\n            return false;\n        },\n\n        /**\n         * Return the previous children / item of the item\n         *\n         * @method qui/controls/contextmenu/Menu#getPrevious\n         * @param {Object} Item - qui/controls/contextmenu/Item\n         * @return {Object|Boolean} qui/controls/contextmenu/Item | false\n         */\n        getPrevious : function(Item)\n        {\n            var i = this.$items.length - 1;\n\n            for ( ; i >= 0; i-- )\n            {\n                if ( i === 0 ) {\n                    return false;\n                }\n\n                if ( this.$items[ i ] == Item ) {\n                    return this.$items[ i - 1 ];\n                }\n            }\n\n            return false;\n        },\n\n        /**\n         * Deselect all children\n         *\n         * @method qui/controls/contextmenu/Menu#deselectItems\n         * @return {Object} this (qui/controls/contextmenu/Menu)\n         */\n        deselectItems : function()\n        {\n            if ( this.$Active ) {\n                this.$Active = null;\n            }\n\n            return this;\n        },\n\n        /**\n         * Keyup event if the menu has the focus\n         * so you can select with keyboard the contextmenu items\n         *\n         * @method qui/controls/contextmenu/Menu#$keyup\n         */\n        $keyup : function(event)\n        {\n            if ( event.key === 'down' )\n            {\n                this.down();\n                return;\n            }\n\n            if ( event.key === 'up' )\n            {\n                this.up( event );\n                return;\n            }\n\n            if ( event.key === 'enter' ) {\n                this.select( event );\n            }\n        },\n\n        /**\n         * Simulate a arrow up, select the element up\n         *\n         * @method qui/controls/contextmenu/Menu#up\n         */\n        up : function()\n        {\n            if ( !this.$items.length ) {\n                return;\n            }\n\n            var len = this.$items.length;\n\n            // select last element if nothing is active\n            if ( !this.$Active )\n            {\n                this.$items[ len - 1 ].setActive();\n                return;\n            }\n\n            var Prev = this.getPrevious( this.$Active );\n\n            this.$Active.setNormal();\n\n            if ( !Prev )\n            {\n                this.$items[ len - 1 ].setActive();\n                return;\n            }\n\n            Prev.setActive();\n        },\n\n        /**\n         * Simulate a arrow down, select the element down\n         *\n         * @method qui/controls/contextmenu/Menu#down\n         */\n        down : function()\n        {\n            if ( !this.$items.length ) {\n                return;\n            }\n\n            // select first element if nothing is selected\n            if ( !this.$Active )\n            {\n                this.$items[ 0 ].setActive();\n                return;\n            }\n\n            var Next = this.getNext( this.$Active );\n\n            this.$Active.setNormal();\n\n            if ( !Next )\n            {\n                this.$items[ 0 ].setActive();\n                return;\n            }\n\n            Next.setActive();\n        },\n\n        /**\n         * Makes a click on the active element\n         *\n         * @method qui/controls/contextmenu/Menu#select\n         * @param {DOMEvent} [event] - optional\n         */\n        select : function(event)\n        {\n            // Last Element\n            if ( this.$Active )\n            {\n                this.$Active.fireEvent( 'mouseDown', [ this.$Active, event ] );\n                this.$Active.fireEvent( 'click', [ this.$Active, event ] );\n            }\n        }\n    });\n});\n\n","\n/**\n * Context Menu Item\n *\n * @module qui/controls/contextmenu/Item\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require qui/QUI\n * @require qui/controls/Control',\n * @require qui/classes/utils/DragDrop',\n * @require qui/controls/contextmenu/Menu',\n * @require qui/utils/Controls',\n * @require css!qui/controls/contextmenu/Item.css'\n *\n * @event onAppend [ {self}, {qui/controls/contextmenu/Item} ]\n * @event onActive [ {self} ]\n * @event onNormal [ {self} ]\n * @event onClick [ {self} ]\n * @event onMouseDown [ {self}, {DOMEvent} ]\n * @event onMouseUp[ {self}, {DOMEvent} ]\n */\n\ndefine('qui/controls/contextmenu/Item', [\n\n    'qui/QUI',\n    'qui/controls/Control',\n    'qui/classes/utils/DragDrop',\n    'qui/controls/contextmenu/Menu',\n    'qui/utils/Controls',\n\n    'css!qui/controls/contextmenu/Item.css'\n\n], function(QUI, Control, DragDrop, ContextMenu, Utils)\n{\n    \"use strict\";\n\n    /**\n     * @class qui/controls/contextmenu/Item\n     *\n     * @event onClick [this, event]\n     * @event onMouseDown [this, event]\n     * @event onMouseUp [this, event]\n     * @event onActive [this]\n     * @event onNormal [this]\n     *\n     * @param {Object} options\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Extends : Control,\n        Type    : 'qui/controls/contextmenu/Item',\n\n        Binds : [\n            '$onSetAttribute',\n            '$stringEvent',\n            '$onClick',\n            '$onInject',\n\n            '$onMouseEnter',\n            '$onMouseLeave',\n            '$onMouseUp',\n            '$onMouseDown'\n        ],\n\n        options : {\n            text   : '',\n            icon   : '',\n            styles : null,\n\n            dragable : false // parent class .qui-contextitem-dropable\n        },\n\n        initialize : function(options)\n        {\n            options = options || {};\n\n            var self  = this,\n                items = options.items || [];\n\n            delete options.items;\n\n            this.parent( options );\n\n            this.$items     = [];\n            this.$path      = '';\n            this.$disabled  = false;\n\n            this.$Elm       = null;\n            this.$Container = null;\n            this.$Menu      = null;\n            this.$Text      = null;\n\n            if ( typeof options.disabled !== 'undefined' && options.disabled ) {\n                this.$disabled = true;\n            }\n\n            this.addEvent( 'onSetAttribute', this.$onSetAttribute );\n            this.addEvent( 'onInject', this.$onInject );\n\n            if ( items.length ) {\n                this.insert( items );\n            }\n\n            // string onClick\n            if ( this.getAttribute( 'onClick' ) )\n            {\n                this.addEvent('onClick', function()\n                {\n                    try\n                    {\n                        eval( self.getAttribute( 'onClick' ) +'( self )' );\n\n                    } catch ( e )\n                    {\n                        console.error( e );\n                    }\n                });\n            }\n        },\n\n        /**\n         * Create the DOMNode for the Element\n         *\n         * @method qui/controls/contextmenu/Item#create\n         * @return {HTMLElement}\n         */\n        create : function()\n        {\n            var i, len;\n            var self = this;\n\n            this.$Elm = new Element('div.qui-contextitem', {\n                html   : '<div class=\"qui-contextitem-container\">' +\n                            '<span class=\"qui-contextitem-icon\"></span>' +\n                            '<span class=\"qui-contextitem-text\"></span>' +\n                         '</div>',\n\n                'data-quiid' : this.getId(),\n                tabindex : -1,\n\n                events :\n                {\n                    mouseenter : this.$onMouseEnter,\n                    mouseleave : this.$onMouseLeave\n                }\n            });\n\n            this.$Container = this.$Elm.getElement( '.qui-contextitem-container' );\n            this.$Text      = this.$Elm.getElement( '.qui-contextitem-text' );\n\n            // click events on the text\n            this.$Container.addEvents({\n                click      : this.$onClick,\n                mousedown  : this.$onMouseDown,\n                mouseup    : this.$onMouseUp\n            });\n\n\n            if ( this.getAttribute( 'icon' ) && this.getAttribute( 'icon' ) !== '' )\n            {\n                var Icon = this.$Elm.getElement( '.qui-contextitem-icon' ),\n                    icon = this.getAttribute( 'icon' );\n\n                // font awesome\n                if ( Utils.isFontAwesomeClass( icon ) )\n                {\n                    Icon.addClass( icon );\n                } else\n                {\n                    Icon.setStyle( 'background-image', 'url('+ icon +')' );\n                }\n            }\n\n            if ( this.getAttribute( 'text' ) && this.getAttribute( 'text' ) !== '' )\n            {\n                var Text = this.$Elm.getElement( '.qui-contextitem-text' );\n\n                Text.set({\n                    html   : this.getAttribute( 'text' )\n                });\n\n                this.$onInject.delay( 500 );\n            }\n\n            // drag drop for the item\n            if ( this.getAttribute( 'dragable' ) )\n            {\n                new DragDrop( this.$Elm, {\n                    dropables : '.qui-contextitem-dropable',\n                    events :\n                    {\n                        onEnter : function(Element, Dragable, Droppable)\n                        {\n                            if ( !Droppable ) {\n                                return;\n                            }\n\n                            var quiid = Droppable.get( 'data-quiid' );\n\n                            if ( !quiid ) {\n                                return;\n                            }\n\n                            QUI.Controls.getById( quiid ).highlight();\n                        },\n\n                        onLeave : function(Element, Dragable, Droppable)\n                        {\n                            if ( !Droppable ) {\n                                return;\n                            }\n\n                            var quiid = Droppable.get( 'data-quiid' );\n\n                            if ( !quiid ) {\n                                return;\n                            }\n\n                            QUI.Controls.getById( quiid ).normalize();\n                        },\n\n                        onDrop : function(Element, Dragable, Droppable)\n                        {\n                            if ( !Droppable ) {\n                                return;\n                            }\n                            var quiid = Droppable.get( 'data-quiid' );\n\n                            if ( !quiid ) {\n                                return;\n                            }\n\n                            var Bar = QUI.Controls.getById( quiid );\n\n                            Bar.normalize();\n                            Bar.appendChild( self );\n                        }\n                    }\n                });\n            }\n\n            // Create sub menu, if sub items exist\n            len = this.$items.length;\n\n            if ( len )\n            {\n                this.$Elm.addClass( 'haschildren' );\n\n                var Menu = this.getContextMenu();\n\n                for ( i = 0; i < len; i++ ) {\n                    Menu.appendChild( this.$items[i] );\n                }\n            }\n\n            // set the disable css class\n            if ( this.isDisabled() ) {\n                this.disable();\n            }\n\n            return this.$Elm;\n        },\n\n        /**\n         * event : on inject\n         */\n        $onInject : function()\n        {\n            var Icon = this.$Container.getElement( '.qui-contextitem-icon' ),\n                Text = this.$Container.getElement( '.qui-contextitem-text' );\n\n            var iconSize = Icon.measure(function() {\n                return this.getComputedSize();\n            });\n\n            var elmSize = this.$Container.measure(function() {\n                return this.getComputedSize();\n            });\n\n            Text.setStyle( 'width', elmSize.width - iconSize.totalWidth );\n        },\n\n        /**\n         * Import children\n         * from a php callback or an array\n         *\n         * @method qui/controls/contextmenu/Item#insert\n         * @param {Array} list\n         * @return {Object} this (qui/controls/contextmenu/Item)\n         */\n        insert : function(list)\n        {\n            var self = this;\n\n            require([\n                'qui/controls/contextmenu/Item',\n                'qui/controls/contextmenu/Seperator'\n            ], function(ContextMenuItem, ContextMenuSeperator)\n            {\n                for ( var i = 0, len = list.length; i < len; i++)\n                {\n                    if ( self.getAttribute( 'dragable' ) ) {\n                        list[ i ].dragable = true;\n                    }\n\n                    if ( list[ i ].type == 'qui/controls/contextmenu/Seperator' )\n                    {\n                        self.appendChild(\n                            new ContextMenuSeperator( list[ i ] )\n                        );\n\n                        continue;\n                    }\n\n                    self.appendChild(\n                        new ContextMenuItem( list[i] )\n                    );\n                }\n            });\n\n            return this;\n        },\n\n        /**\n         * trigger a click\n         *\n         * @method qui/controls/contextmenu/Item#click\n         */\n        click : function()\n        {\n            this.$onClick( false );\n        },\n\n        /**\n         * Add a Child to the Item\n         *\n         * @method qui/controls/contextmenu/Item#appendChild\n         * @param {Object} Child - qui/controls/contextmenu/Item\n         * @return {Object} this (qui/controls/contextmenu/Item)\n         */\n        appendChild : function(Child)\n        {\n            this.$items.push( Child );\n\n            Child.setParent( this );\n\n\n            if ( this.$Elm )\n            {\n                this.$Elm.addClass( 'haschildren' );\n                Child.inject( this.getContextMenu() );\n            }\n\n            this.fireEvent( 'append', [ this, Child ] );\n\n            return this;\n        },\n\n        /**\n         * disable the item\n         *\n         * @method qui/controls/contextmenu/Item#disable\n         * @return {Object} this (qui/controls/contextmenu/Item)\n         */\n        disable : function()\n        {\n            this.$disabled = true;\n\n            if ( !this.$Elm ) {\n                return this;\n            }\n\n            this.$Elm.addClass( 'qui-contextitem-disabled' );\n            return this;\n        },\n\n        /**\n         * Return if the item is disabled or not\n         *\n         * @method qui/controls/contextmenu/Item#isDisable\n         * @return {Boolean}\n         */\n        isDisabled : function()\n        {\n            return this.$disabled;\n        },\n\n        /**\n         * enable the item if the item was disabled\n         *\n         * @method qui/controls/contextmenu/Item#enable\n         * @return {Object} this (qui/controls/contextmenu/Item)\n         */\n        enable : function()\n        {\n            this.$disabled = false;\n\n            if ( !this.$Elm ) {\n                return this;\n            }\n\n            this.$Elm.removeClass( 'qui-contextitem-disabled' );\n            return this;\n        },\n\n        /**\n         * Set the Item active\n         *\n         * @method qui/controls/contextmenu/Item#setActive\n         * @return {Object} this (qui/controls/contextmenu/Item)\n         */\n        setActive : function()\n        {\n            if ( this.$Elm && this.$Elm.hasClass('qui-contextitem-active') ) {\n                return this;\n            }\n\n            if ( this.$Elm )\n            {\n                if ( this.$Menu )\n                {\n                    this.$Container.addClass('qui-contextitem-active');\n                } else\n                {\n                    this.$Elm.addClass('qui-contextitem-active');\n                }\n            }\n\n            this.fireEvent( 'active', [ this ] );\n\n            return this;\n        },\n\n        /**\n         * Normalize the item\n         *\n         * @method qui/controls/contextmenu/Item#setNormal\n         * @return {Object} this (qui/controls/contextmenu/Item)\n         */\n        setNormal : function()\n        {\n            if ( !this.$Elm ) {\n                return this;\n            }\n\n            if ( this.$Menu )\n            {\n                this.$Container.removeClass( 'qui-contextitem-active' );\n            } else\n            {\n                this.$Elm.removeClass( 'qui-contextitem-active' );\n            }\n\n            this.fireEvent( 'normal', [ this ] );\n\n            return this;\n        },\n\n        /**\n         * All Context Menu Items\n         *\n         * @method qui/controls/contextmenu/Item#getChildren\n         * @param {String} name - [Name of the Children, optional, if no name given, returns all Children]\n         * @return {Array|Object} List of children |  qui/controls/contextmenu/Menu\n         */\n        getChildren : function(name)\n        {\n            if ( typeof name !== 'undefined' )\n            {\n                if ( name == this.getAttribute( 'name' ) +'-menu' ) {\n                    return this.getContextMenu();\n                }\n\n                return this.getContextMenu().getChildren( name );\n            }\n\n            return this.getContextMenu().getChildren();\n        },\n\n        /**\n         * Return the text node\n         *\n         * @return {HTMLElement|null}\n         */\n        getTextElm : function()\n        {\n            return this.$Text;\n        },\n\n        /**\n         * Clear the Context Menu Items\n         *\n         * @method qui/controls/contextmenu/Item#clear\n         * @return {Object} this (qui/controls/contextmenu/Item)\n         */\n        clear : function()\n        {\n            this.getContextMenu().clear();\n            this.$items = [];\n\n            return this;\n        },\n\n        /**\n         * Create the Context Menu if not exist\n         *\n         * @method qui/controls/contextmenu/Item#getContextMenu\n         * @return {qui/controls/contextmenu/Menu}\n         */\n        getContextMenu : function()\n        {\n            if ( this.$Menu ) {\n                return this.$Menu;\n            }\n\n            this.$Menu = new ContextMenu({\n                name   : this.getAttribute( 'name' ) +'-menu',\n                corner : 'left',\n                events :\n                {\n                    onShow : function(Menu)\n                    {\n                        var children = Menu.getChildren();\n\n                        for ( var i = 0, len = children.length; i < len; i++ ) {\n                            children[ i ].setNormal();\n                        }\n                    }\n                }\n            });\n\n            this.$Menu.inject( this.$Elm );\n            this.$Menu.hide();\n\n            this.$Menu.setParent( this );\n\n            return this.$Menu;\n        },\n\n        /**\n         * onSetAttribute Event\n         * Set the attribute to the DOMElement if setAttribute is execute\n         *\n         * @method qui/controls/contextmenu/Item#$onSetAttribute\n         * @param {String} key\n         * @param {Boolean|Number|String|Object|Array} value\n         *\n         * @ignore\n         */\n        $onSetAttribute : function(key, value)\n        {\n            if ( !this.$Elm ) {\n                return;\n            }\n\n            if ( key == 'text' )\n            {\n                this.$Elm.getElement( '.qui-contextitem-text' )\n                         .set( 'html', value );\n\n                return;\n            }\n\n            if ( key == 'icon' )\n            {\n                var Icon = this.$Elm.getElement( '.qui-contextitem-icon' );\n\n                Icon.className = 'qui-contextitem-icon';\n                Icon.setStyle( 'background-image', null );\n\n                if ( Utils.isFontAwesomeClass( value ) )\n                {\n                    Icon.addClass( value );\n                } else\n                {\n                    this.$Container.setStyle( 'background-image', 'url('+ value +')' );\n\n                }\n            }\n        },\n\n        /**\n         * interpret a string event\n         *\n         * @method qui/controls/contextmenu/Item#$stringEvent\n         * @param {String} event\n         */\n        $stringEvent : function(event)\n        {\n            eval( '('+ event +'(this));' );\n        },\n\n        /**\n         * event : onclick\n         *\n         * @method qui/controls/contextmenu/Item#$onClick\n         * @param {DOMEvent|Boolean} event\n         * @ignore\n         */\n        $onClick : function(event)\n        {\n            if ( this.$disabled ) {\n                return;\n            }\n\n            this.fireEvent( 'click', [ this, event ] );\n\n            var Parent = this.getParent();\n\n            if ( !Parent ) {\n                return;\n            }\n\n            this.getParent().hide();\n        },\n\n        /**\n         * event: mouse enter\n         *\n         * @method qui/controls/contextmenu/Item#$onMouseEnter\n         */\n        $onMouseEnter : function()\n        {\n            if ( this.$disabled ) {\n                return;\n            }\n\n            if ( this.$Menu )\n            {\n                var size   = this.$Elm.getSize(),\n                    Parent = this.$Menu.getParent();\n\n                this.$Menu.setPosition( size.x, 0 );\n                this.$Menu.show();\n\n                if ( Parent )\n                {\n                    var MenuElm = this.$Menu.getElm(),\n\n                        elm_pos   = MenuElm.getPosition(),\n                        elm_size  = MenuElm.getSize(),\n                        body_size = document.body.getSize();\n\n                    if ( elm_pos.x + size.x > body_size.x )\n                    {\n                        // show the menü left\n                        this.$Menu.setPosition( 0 - elm_size.x, 0 );\n                    }\n                }\n\n                this.$Container.addClass( 'qui-contextitem-active' );\n            }\n\n            this.setActive();\n        },\n\n        /**\n         * event: mouse leave\n         *\n         * @method qui/controls/contextmenu/Item#$onMouseLeave\n         */\n        $onMouseLeave : function()\n        {\n            if ( this.$disabled ) {\n                return;\n            }\n\n            if ( this.$Menu ) {\n                this.$Menu.hide();\n            }\n\n            this.$Container.removeClass( 'qui-contextitem-active' );\n            this.setNormal();\n        },\n\n        /**\n         * event: mouse up\n         *\n         * @method qui/controls/contextmenu/Item#$onMouseUp\n         * @param {DOMEvent} event - optional\n         */\n        $onMouseUp : function(event)\n        {\n            this.fireEvent( 'mouseUp', [ this, event ] );\n\n            if ( this.getAttribute( 'dragable' ) === false ) {\n                event.stop();\n            }\n        },\n\n        /**\n         * event: mouse down\n         *\n         * @method qui/controls/contextmenu/Item#$onMouseDown\n         * @param {DOMEvent} event - optional\n         */\n        $onMouseDown : function(event)\n        {\n            this.fireEvent( 'mouseDown', [ this, event ] );\n\n            if ( this.getAttribute( 'dragable' ) === false ) {\n                event.stop();\n            }\n        }\n    });\n});\n\n","\n/**\n * A task for the taskbar\n *\n * @module qui/controls/taskbar/Group\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require qui/QUI\n * @require qui/controls/Control\n * @require qui/controls/contextmenu/Menu\n * @require qui/controls/contextmenu/Item\n * @require qui/classes/utils/DragDrop\n * @require qui/controls/taskbar/Task\n * @require css!qui/controls/taskbar/Group.css\n *\n * @event onNormalize [this]\n * @event onHighlight [this]\n * @event onClick [this]\n * @event onActivate [this]\n * @event onFocus [this]\n * @event onBlur [this]\n * @event onContextMenu [this, event]\n * @event onAppendChild [this, {qui/controls/taskbar/Task}]\n * @event onAppendChildBegin [\n *      {qui/controls/taskbar/Bar},\n *      {qui/controls/taskbar/Task}\n * ]\n */\n\ndefine('qui/controls/taskbar/Group', [\n\n    'qui/QUI',\n    'qui/controls/Control',\n    'qui/controls/contextmenu/Menu',\n    'qui/controls/contextmenu/Item',\n    'qui/classes/utils/DragDrop',\n    'qui/controls/taskbar/Task',\n\n    'css!qui/controls/taskbar/Group.css'\n\n], function(QUI, Control, ContextmenuMenu, ContextmenuItem, QUIDragDrop)\n{\n    \"use strict\";\n\n    /**\n     * @class qui/controls/taskbar/Group\n     *\n     * @param {Object} options - QDOM params\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Extends : Control,\n        Type    : 'qui/controls/taskbar/Group',\n\n        Binds : [\n            'dissolve',\n            'close',\n            'click',\n            '$onTaskRefresh',\n            '$onMenuClick'\n        ],\n\n        options : {\n            icon : false,\n            text : '...'\n        },\n\n        initialize : function(options)\n        {\n            options = options || {};\n\n            this.parent( options );\n\n            this.$tasks  = {};\n            this.$Elm    = null;\n            this.$Menu   = null;\n            this.$Active = null;\n            this.$ContextMenu = null;\n\n            var self = this;\n\n            this.addEvent('onDestroy', function()\n            {\n                if ( self.$Menu ) {\n                    self.$Menu.destroy();\n                }\n\n                if ( self.$ContextMenu ) {\n                    self.$ContextMenu.destroy();\n                }\n\n                var tasks = self.getTasks();\n\n                for ( var i = 0, len = tasks.length; i < len; i++ ) {\n                    tasks[ i ].removeEvent( 'refresh', self.$onTaskRefresh );\n                }\n            });\n        },\n\n        /**\n         * Return the DOMNode\n         *\n         * @method qui/controls/taskbar/Group#getElm\n         * @return {HTMLElement}\n         */\n        create : function()\n        {\n            var self = this;\n\n            this.$Elm = new Element('div', {\n                'class' : 'qui-taskgroup radius5 box',\n                html    : '<div class=\"qui-taskgroup-container\">' +\n                              '<span class=\"qui-taskgroup-icon\"></span>' +\n                              '<span class=\"qui-taskgroup-text\"></span>' +\n                          '</div>' +\n                          '<div class=\"qui-taskgroup-menu\"></div>',\n                styles : {\n                    outline: 'none'\n                },\n                tabindex : -1,\n                events   :\n                {\n                    focus : function() {\n                        self.fireEvent( 'focus', [ self ] );\n                    },\n\n                    blur : function() {\n                        self.fireEvent( 'blur', [ self ] );\n                    },\n\n                    contextmenu : function(event)\n                    {\n                        self.$getContextMenu().setPosition(\n                            event.page.x,\n                            event.page.y\n                        ).show().focus();\n\n                        self.fireEvent( 'contextMenu', [ self, event ] );\n\n                        event.stop();\n                    }\n                }\n            });\n\n            this.$Elm.getElement('.qui-taskgroup-container').addEvents({\n                click : this.click\n            });\n\n            // Create the menu\n            var Menu = this.$Elm.getElement('.qui-taskgroup-menu');\n\n            this.$Menu = new ContextmenuMenu({\n                name   : this.getId() +'-menu',\n                type   : 'bottom',\n                events :\n                {\n                    onBlur : function(Menu) {\n                        Menu.hide();\n                    },\n\n                    onShow : function(Menu)\n                    {\n                        var MenuElm  = Menu.getElm(),\n                            menusize = MenuElm.getSize(),\n                            pos      = self.getElm().getPosition();\n\n                        var x = pos.x;\n                        var y = pos.y - menusize.y;\n\n                        Menu.setPosition( x, y ).focus();\n                    }\n                }\n            });\n\n            this.$Menu.inject( document.body );\n            this.$Menu.hide();\n\n            Menu.addEvents({\n                click : function()\n                {\n                    if ( self.$Menu.count() ) {\n                        self.$Menu.show();\n                    }\n                }\n            });\n\n            this.refresh();\n\n\n            // drag drop to the desktop\n            new QUIDragDrop(this.$Elm, {\n                dropables : [ '.qui-taskbar' ],\n                cssClass  : 'radius5',\n                events    :\n                {\n                    onEnter : function(Element, Droppable)\n                    {\n                        if ( !Droppable ) {\n                            return;\n                        }\n\n                        var quiid = Droppable.get('data-quiid');\n\n                        if ( !quiid ) {\n                            return;\n                        }\n\n                        QUI.Controls.getById( quiid ).highlight();\n                    }.bind( this ),\n\n                    onLeave : function(Element, Droppable)\n                    {\n                        if ( !Droppable ) {\n                            return;\n                        }\n\n                        var quiid = Droppable.get('data-quiid');\n\n                        if ( !quiid ) {\n                            return;\n                        }\n\n                        QUI.Controls.getById( quiid ).normalize();\n                    },\n\n                    onDrop : function(Element, Droppable)\n                    {\n                        if ( !Droppable ) {\n                            return;\n                        }\n\n                        var quiid = Droppable.get('data-quiid');\n\n                        if ( !quiid ) {\n                            return;\n                        }\n\n                        var Bar = QUI.Controls.getById( quiid );\n\n                        Bar.normalize();\n                        Bar.appendChild( this );\n                    }.bind( this )\n                }\n            });\n\n            return this.$Elm;\n        },\n\n        /**\n         * Return the binded instance of the active task\n         *\n         * @method qui/controls/taskbar/Group#getInstance\n         * @return {Object|null} qui/controls/Control | null\n         */\n        getInstance : function()\n        {\n            if ( !this.$Active ) {\n                return null;\n            }\n\n            return this.$Active.getInstance();\n        },\n\n        /**\n         * Return the instance icon\n         *\n         * @method qui/controls/taskbar/Group#getIcon\n         * @return {String|Boolean} Icon name | false\n         */\n        getIcon : function()\n        {\n            var Instance = this.getInstance();\n\n            if ( !Instance ) {\n                return false;\n            }\n\n            return Instance.getAttribute( 'icon' );\n        },\n\n        /**\n         * Return the instance title\n         *\n         * @method qui/controls/taskbar/Group#getTitle\n         * @return {String|Boolean} Instance | false\n         */\n        getTitle : function()\n        {\n            var Instance = this.getInstance();\n\n            if ( !Instance ) {\n                return false;\n            }\n\n            return Instance.getAttribute( 'title' );\n        },\n\n        /**\n         * Return the the parent\n         *\n         * @method qui/controls/taskbar/Group#getTaskbar\n         * @return {Object} qui/controls/taskbar/Bar\n         */\n        getTaskbar : function()\n        {\n            return this.getParent();\n        },\n\n        /**\n         * Refresh the group display\n         *\n         * @method qui/controls/taskbar/Group#refresh\n         * @param {Object} [Task] - optional, qui/controls/taskbar/Task\n         */\n        refresh : function(Task)\n        {\n            var Icon = this.$Elm.getElement( '.qui-taskgroup-icon' ),\n                Text = this.$Elm.getElement( '.qui-taskgroup-text' );\n\n            if ( typeof Task !== 'undefined' )\n            {\n                this.setAttribute( 'icon', Task.getIcon() );\n                this.setAttribute( 'text', Task.getTitle() );\n\n                this.$Active = Task;\n            }\n\n            if ( this.getAttribute( 'text' ) ) {\n                Text.set( 'html', this.getAttribute( 'text' ) );\n            }\n\n            if ( this.getAttribute( 'icon' ) ) {\n                Icon.setStyle( 'background-image', 'url('+ this.getAttribute('icon') +')' );\n            }\n        },\n\n        /**\n         * Execute a click event\n         *\n         * @method qui/controls/taskbar/Group#click\n         * @return {Object} this (qui/controls/taskbar/Group)\n         */\n        click : function()\n        {\n            if ( !this.$Active )\n            {\n                if ( this.count() && this.firstTask() ) {\n                    this.refresh( this.firstTask() );\n                }\n\n                return this;\n            }\n\n            this.$Active.click();\n            this.fireEvent( 'click', [ this ] );\n\n            this.activate();\n            this.focus();\n\n            return this;\n        },\n\n        /**\n         * Set the focus to the group DOMNode element\n         *\n         * @method qui/controls/taskbar/Group#focus\n         * @return {Object} this (qui/controls/taskbar/Group)\n         */\n        focus : function()\n        {\n            if ( this.$Elm ) {\n                this.$Elm.focus();\n            }\n\n            return this;\n        },\n\n        /**\n         * Highlight the group\n         *\n         * @method qui/controls/taskbar/Group#highlight\n         * @return {Object} this (qui/controls/taskbar/Group)\n         */\n        highlight : function()\n        {\n            if ( this.$Elm ) {\n                this.$Elm.addClass( 'highlight' );\n            }\n\n            this.fireEvent( 'highlight', [ this ] );\n\n            return this;\n        },\n\n        /**\n         * Normalize the group\n         * no highlight\n         *\n         * @method qui/controls/taskbar/Group#normalize\n         * @return {Object} this (qui/controls/taskbar/Group)\n         */\n        normalize : function()\n        {\n            if ( this.$Elm )\n            {\n                this.$Elm.removeClass( 'highlight' );\n                this.$Elm.removeClass( 'active' );\n            }\n\n            this.fireEvent( 'normalize', [ this ] );\n\n            return this;\n        },\n\n        /**\n         * Set the group active\n         *\n         * @method qui/controls/taskbar/Group#activate\n         * @return {Object} this (qui/controls/taskbar/Group)\n         */\n        activate : function()\n        {\n            if ( this.$Active ) {\n                this.$Active.activate();\n            }\n\n            if ( this.isActive() )\n            {\n                this.fireEvent( 'activate', [ this ] );\n                return this;\n            }\n\n            if ( this.$Elm ) {\n                this.$Elm.addClass( 'active' );\n            }\n\n            this.fireEvent( 'activate', [ this ] );\n\n            return this;\n        },\n\n        /**\n         * Close / Destroy the group and destroy all tasks in it\n         *\n         * @method qui/controls/taskbar/Group#close\n         */\n        close : function()\n        {\n            var Parent = this.getParent();\n\n            for ( var i in this.$tasks )\n            {\n                if ( this.$tasks.hasOwnProperty( i ) ) {\n                    this.$tasks[ i ].close();\n                }\n            }\n\n            this.$tasks = null;\n            this.destroy();\n\n            Parent.firstChild().show();\n        },\n\n        /**\n         * Close the group but not the tasks\n         * The Tasks would be insert to the parent of the group\n         *\n         * @method qui/controls/taskbar/Group#dissolve\n         */\n        dissolve : function()\n        {\n            var Parent = this.getTaskbar(),\n                tasks  = this.getTasks();\n\n            for ( var i = 0, len = tasks.length; i < len; i++ )\n            {\n                tasks[ i ].removeEvent( 'refresh', this.$onTaskRefresh );\n\n                Parent.appendChild( tasks[ i ] );\n            }\n\n            this.$tasks = {};\n            this.destroy();\n\n            if ( this.isActive() ) {\n                Parent.firstChild().show();\n            }\n        },\n\n        /**\n         * Return true if the group is active\n         *\n         * @method qui/controls/taskbar/Group#isActive\n         * @return {Boolean}\n         */\n        isActive : function()\n        {\n            if ( !this.$Elm ) {\n                return false;\n            }\n\n            return this.$Elm.hasClass( 'active' );\n        },\n\n        /**\n         * Add a Task to the group\n         *\n         * @method qui/controls/taskbar/Group#appendChild\n         * @param {Object} Task - qui/controls/taskbar/Task\n         */\n        appendChild : function(Task)\n        {\n            this.$tasks[ Task.getId() ] = Task;\n            this.fireEvent( 'appendChildBegin', [ this, Task ] );\n\n            Task.hide();\n\n            this.$Menu.appendChild(\n                new ContextmenuItem({\n                    name   : Task.getId(),\n                    text   : Task.getTitle(),\n                    icon   : Task.getIcon(),\n                    Task   : Task,\n                    events : {\n                        onClick : this.$onMenuClick\n                    }\n                })\n            );\n\n            Task.setParent( this );\n            Task.addEvent( 'onRefresh', this.$onTaskRefresh );\n\n            if ( this.count() == 1 || Task.isActive() )\n            {\n                this.refresh( Task );\n            } else\n            {\n                this.refresh();\n            }\n\n            if ( Task.isActive() ) {\n                this.click();\n            }\n\n            this.fireEvent( 'appendChild', [ this, Task ] );\n        },\n\n        /**\n         * Return all tasks in the group\n         *\n         * @method qui/controls/taskbar/Group#getTasks\n         * @return {Array}\n         */\n        getTasks : function()\n        {\n            var tasks = [];\n\n            for ( var i in this.$tasks )\n            {\n                if ( this.$tasks.hasOwnProperty( i ) ) {\n                    tasks.push( this.$tasks[ i ] );\n                }\n            }\n\n            return tasks;\n        },\n\n        /**\n         * Return the first Task\n         *\n         * @method qui/controls/taskbar/Group#firstTask\n         * @return {Object|null} qui/controls/taskbar/Task | null\n         */\n        firstTask : function()\n        {\n            for ( var i in this.$tasks )\n            {\n                if ( this.$tasks.hasOwnProperty( i ) ) {\n                    return this.$tasks[i];\n                }\n            }\n\n            return null;\n        },\n\n        /**\n         * Return the tasks number in the group\n         *\n         * @method qui/controls/taskbar/Group#count\n         * @return {Number}\n         */\n        count : function()\n        {\n            var i;\n            var c = 0;\n\n            for ( i in this.$tasks ) {\n                c++;\n            }\n\n            return c;\n        },\n\n        /**\n         * Return the context menu\n         *\n         * @method qui/controls/taskbar/Group#$getContextMenu\n         * @return {qui/controls/contextmenu/Menu}\n         */\n        $getContextMenu : function()\n        {\n            if ( this.$ContextMenu ) {\n                return this.$ContextMenu;\n            }\n\n            this.$ContextMenu = new ContextmenuMenu({\n                name   : this.getId() +'-menu',\n                type   : 'bottom',\n                events :\n                {\n                    onBlur : function(Menu) {\n                        Menu.hide();\n                    }\n                }\n            });\n\n            this.$ContextMenu.appendChild(\n                new ContextmenuMenu({\n                    text   : 'Gruppe auflösen',\n                    events : {\n                        onClick : this.dissolve\n                    }\n                })\n            ).appendChild(\n                new ContextmenuMenu({\n                    text   : 'Gruppe und Tasks schließen',\n                    events : {\n                        onClick : this.close\n                    }\n                })\n            );\n\n            this.$ContextMenu.inject( document.body );\n            this.$ContextMenu.hide();\n\n            return this.$ContextMenu;\n        },\n\n        /**\n         * event: on task refresh\n         *\n         * @method qui/controls/taskbar/Group#$onTaskRefresh\n         * @param {Object} Task - qui/controls/taskbar/Task\n         */\n        $onTaskRefresh : function(Task)\n        {\n            var MenuItem = this.$Menu.getChildren( Task.getId() );\n\n            if ( !MenuItem ) {\n                return;\n            }\n\n            MenuItem.setAttribute( 'text', Task.getTitle() );\n            MenuItem.setAttribute( 'icon', Task.getIcon() );\n\n            if ( this.$Active.getId() == Task.getId() ) {\n                this.refresh( this.$Active );\n            }\n        },\n\n        /**\n         * event: on task selection / menu click\n         *\n         * @method qui/controls/taskbar/Group#$onMenuClick\n         * @param {Object} Item - qui/controls/contextmenu/Item\n         */\n        $onMenuClick : function(Item)\n        {\n            this.refresh( Item.getAttribute( 'Task' ) );\n            this.click();\n        }\n    });\n});\n\n","\n/**\n * Makes an object unselectable or selectable\n *\n * @module qui/utils/NoSelect\n * @author www.pcsg.de (Henning Leutz)\n */\n\ndefine('qui/utils/NoSelect', {\n\n    /**\n     * Enable the selection for an Element\n     *\n     * @method qui/utils/NoSelect#enable\n     * @param {HTMLElement} Elm - Element in which the mark / highlight is to be enabled\n     */\n    enable : function(Elm)\n    {\n        \"use strict\";\n\n        if ( typeof Elm.setProperty === 'undefined' ) {\n            Elm = document.id( Elm );\n        }\n\n        Elm.removeClass( 'qui-utils-noselect' );\n\n        if ( Browser.ie )\n        {\n            document.removeEvent( 'selectstart', this.stopSelection );\n            return;\n        }\n\n        Elm.removeProperty( \"unselectable\", \"on\" );\n        Elm.removeProperty( \"unSelectable\", \"on\" );\n\n        Elm.setStyles({\n            \"MozUserSelect\"   : \"\",\n            \"KhtmlUserSelect\" : \"\"\n        });\n    },\n\n    /**\n     * Disable the selection for an Element\n     *\n     * @method qui/utils/NoSelect#disable\n     * @param {HTMLElement} Elm - Element in which the mark / highlight is to be prevented\n     */\n    disable : function(Elm)\n    {\n        \"use strict\";\n\n        if ( typeof Elm.setProperty === 'undefined' ) {\n            Elm = document.id( Elm );\n        }\n\n        Elm.addClass( 'qui-utils-noselect' );\n\n        if ( Browser.ie )\n        {\n            document.addEvent( 'selectstart', this.stopSelection );\n            return;\n        }\n\n        Elm.setProperty( \"unselectable\", \"on\" );\n        Elm.setProperty( \"unSelectable\", \"on\" );\n\n        Elm.setStyles({\n            \"MozUserSelect\"   : \"none\",\n            \"KhtmlUserSelect\" : \"none\"\n        });\n    },\n\n    /**\n     * Stop selection for IE Browser\n     *\n     * @method qui/utils/NoSelect#stopSelection\n     * @param {DOMEvent} event\n     */\n    stopSelection : function(event)\n    {\n        \"use strict\";\n\n        event.stop();\n        return false;\n    }\n});\n\n","\n/**\n * QUI Control - Button\n *\n * @module qui/controls/buttons/Button\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require qui/controls/Control\n * @require qui/utils/Controls\n * @require qui/utils/NoSelect\n * @require qui/utils/Elements\n *\n * @require css!qui/controls/buttons/Button.css\n *\n * @event onClick\n * @event onCreate\n * @event onDrawBegin\n * @event onDrawEnd\n * @event onSetNormal\n * @event onSetDisable\n * @event onSetActive\n *\n * @event onEnter     - event triggerd if button is not disabled\n * @event onLeave     - event triggerd if button is not disabled\n * @event onMousedown - event triggerd if button is not disabled\n * @event onMouseUp   - event triggerd if button is not disabled\n * @event onFocus\n * @event onBlur\n * @event onActive\n * @event onDisable\n * @event onEnable\n */\n\ndefine('qui/controls/buttons/Button', [\n\n    'qui/controls/Control',\n    'qui/utils/Controls',\n    'qui/utils/NoSelect',\n\n    'css!qui/controls/buttons/Button.css'\n\n], function(Control, Utils, NoSelect)\n{\n    \"use strict\";\n\n    /**\n     * @class qui/controls/buttons/Button\n     *\n     * @event onClick\n     * @event onCreate\n     * @event onDrawBegin\n     * @event onDrawEnd\n     * @event onSetNormal\n     * @event onSetDisable\n     * @event onSetActive\n     *\n     * @event onEnter     - event triggerd if button is not disabled\n     * @event onLeave     - event triggerd if button is not disabled\n     * @event onMousedown - event triggerd if button is not disabled\n     * @event onMouseUp   - event triggerd if button is not disabled\n     * @event onFocus\n     * @event onBlur\n     * @event onActive\n     * @event onDisable\n     * @event onEnable\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Extends : Control,\n        Type    : 'qui/controls/buttons/Button',\n\n        Binds : [\n            'onSetAttribute'\n        ],\n\n        options : {\n            'type'      : 'button',\n            'image'     : false,   // (@depricated) use the icon attribute\n            'icon'      : false,   // icon top of the text\n            'style'     : {},      // mootools css style attributes\n            'textimage' : false,   // Image left from text\n            'text'      : false,   // Button text\n            'title'     : false,\n            'class'     : false,    // extra CSS Class\n            'buttonCSSClass' : true, // should have the button the qui-button css class?\n            'menuCorner'     : 'top',\n            'dropDownIcon'   : true\n        },\n\n        params : {},\n\n        initialize : function(options)\n        {\n            options = options || {};\n\n            this.parent( options );\n\n            this.$Menu  = null;\n            this.$Drop  = null;\n            this.$items = [];\n\n\n            if ( options.events ) {\n                delete options.events;\n            }\n\n            this.setAttributes(\n                this.initV2( options )\n            );\n\n            this.addEvent('onSetAttribute', this.onSetAttribute);\n            this.addEvent('onDestroy', function()\n            {\n                if ( this.$Menu ) {\n                    this.$Menu.destroy();\n                }\n            }.bind( this ));\n        },\n\n        /**\n         * Compatible to _ptools::Button v2\n         *\n         * @method qui/controls/buttons/Button#initV2\n         * @param {Object} options\n         * @ignore\n         */\n        initV2: function(options)\n        {\n            if ( typeof options.onclick !== 'undefined' )\n            {\n                if ( typeOf( options.onclick ) === 'string' )\n                {\n                    options.onclick = function(p) {\n                        eval(p +'(this);');\n                    }.bind(this, [ options.onclick ]);\n                }\n\n                this.addEvent( 'onClick', options.onclick );\n                delete options.onclick;\n            }\n\n            if ( typeof options.oncreate !== 'undefined' )\n            {\n                this.addEvent( 'onCreate', options.oncreate );\n                delete options.oncreate;\n            }\n\n            return options;\n        },\n\n        /**\n         * Create the DOM Element\n         *\n         * @method qui/controls/buttons/Button#create\n         * @return {HTMLElement}\n         */\n        create : function()\n        {\n            var self = this;\n\n            var Elm = new Element('button', {\n                'type' : this.getAttribute('type'),\n                'data-status' : 0,\n                'data-quiid'  : this.getId()\n            });\n\n            if ( this.getAttribute( 'buttonCSSClass' ) ) {\n                Elm.addClass( 'qui-button' );\n            }\n\n            if ( this.getAttribute( 'width' ) ) {\n                Elm.setStyle( 'width', this.getAttribute( 'width' ) );\n            }\n\n            if ( this.getAttribute('height') ) {\n                Elm.setStyle( 'height', this.getAttribute( 'height' ) );\n            }\n\n            if ( this.getAttribute( 'styles' ) ) {\n                Elm.setStyles( this.getAttribute( 'styles' ) );\n            }\n\n            if ( this.getAttribute( 'class' ) ) {\n                Elm.addClass( this.getAttribute( 'class' ) );\n            }\n\n            Elm.style.outline = 0;\n            Elm.setAttribute('tabindex', \"-1\");\n\n            Elm.addEvents({\n\n                click : function(event)\n                {\n                    if ( self.isDisabled() ) {\n                        return;\n                    }\n\n                    self.onclick( event );\n                },\n\n                mouseenter : function()\n                {\n                    if ( self.isDisabled() ) {\n                        return;\n                    }\n\n                    if ( !self.isActive() ) {\n                        self.getElm().addClass( 'qui-button-over' );\n                    }\n\n                    self.fireEvent( 'enter', [ self ] );\n                },\n\n                mouseleave : function()\n                {\n                    if ( self.isDisabled() ) {\n                        return;\n                    }\n\n                    if ( !self.isActive() ) {\n                        self.getElm().removeClass( 'qui-button-over' );\n                    }\n\n                    self.fireEvent( 'leave', [ self ] );\n                },\n\n                mousedown : function(event)\n                {\n                    if ( self.isDisabled() ) {\n                        return;\n                    }\n\n                    self.fireEvent( 'mousedown', [ self, event ] );\n\n                },\n\n                mouseup : function(event)\n                {\n                    if ( self.isDisabled() ) {\n                        return;\n                    }\n\n                    self.fireEvent( 'mouseup', [ self, event ] );\n                },\n\n                blur : function(event)\n                {\n                    self.fireEvent( 'blur', [ self, event ] );\n                },\n\n                focus : function(event)\n                {\n                    self.fireEvent( 'focus', [ self, event ] );\n                }\n            });\n\n            this.$Elm = Elm;\n\n\n            // Elemente aufbauen\n            if ( this.getAttribute( 'icon' ) ) {\n                this.setAttribute( 'icon', this.getAttribute( 'icon' ) );\n            }\n\n            if ( !this.getAttribute( 'icon' ) && this.getAttribute( 'image' ) ) {\n                this.setAttribute( 'icon', this.getAttribute( 'image' ) );\n            }\n\n            if ( this.getAttribute( 'styles' ) ) {\n                this.setAttribute( 'styles', this.getAttribute( 'styles' ) );\n            }\n\n            if ( this.getAttribute( 'textimage' ) ) {\n                this.setAttribute( 'textimage', this.getAttribute( 'textimage' ) );\n            }\n\n            if ( this.getAttribute( 'text' ) ) {\n                this.setAttribute( 'text', this.getAttribute( 'text' ) );\n            }\n\n            if ( this.getAttribute( 'title' ) ) {\n                this.$Elm.setAttribute( 'title', this.getAttribute( 'title' ) );\n            }\n\n            if ( this.getAttribute( 'disabled' ) ) {\n                this.disable();\n            }\n\n\n            // sub menu\n            var i;\n            var len = this.$items.length;\n\n            if ( len )\n            {\n                this.getContextMenu(function(Menu)\n                {\n                    for ( i = 0; i < len; i++ ) {\n                        Menu.appendChild( self.$items[i] );\n                    }\n\n                    if ( self.getAttribute( 'dropDownIcon' ) )\n                    {\n                        self.$Drop = new Element('div', {\n                            'class' : 'qui-button-drop icon-chevron-down fa fa-chevron-down'\n                        }).inject( self.$Elm );\n                    }\n                });\n            }\n\n            this.fireEvent( 'create', [ this ] );\n\n            NoSelect.disable( Elm );\n\n            return this.$Elm;\n        },\n\n        /**\n         * Trigger the Click Event\n         *\n         * @method qui/controls/buttons/Button#onclick\n         * @param {DOMEvent} event\n         */\n        click : function(event)\n        {\n            if ( this.isDisabled() ) {\n                return;\n            }\n\n            this.fireEvent( 'click', [ this, event ] );\n        },\n\n        /**\n         * @see #click()\n         */\n        onclick : function(event)\n        {\n            this.click( event );\n        },\n\n        /**\n         * Set the Button Active\n         *\n         * @method qui/controls/buttons/Button#setActive\n         */\n        setActive : function()\n        {\n            if ( this.isDisabled() ) {\n                return;\n            }\n\n            var Elm = this.getElm();\n\n            if ( !Elm ) {\n                return;\n            }\n\n            Elm.addClass( 'qui-button-active' );\n            Elm.set( 'data-status', 1 );\n\n            this.fireEvent( 'active', [ this ] );\n        },\n\n        /**\n         * is Button Active?\n         *\n         * @method qui/controls/buttons/Button#isActive\n         * @return {Boolean}\n         */\n        isActive : function()\n        {\n            if ( !this.getElm() ) {\n                return false;\n            }\n\n            return this.getElm().get( 'data-status' ) == 1;\n        },\n\n        /**\n         * Disable the Button\n         * Most Events are no more triggered\n         *\n         * @method qui/controls/buttons/Button#disable\n         * @return {Object} this (qui/controls/buttons/Button)\n         */\n        disable : function()\n        {\n            var Elm = this.getElm();\n\n            if ( !Elm ) {\n                return this;\n            }\n\n            Elm.set({\n                'data-status' : -1,\n                'disabled'    : 'disabled'\n            });\n\n            this.fireEvent( 'disable', [ this ] );\n\n            return this;\n        },\n\n        /**\n         * @deprecated use disable\n         * @method qui/controls/buttons/Button#setDisable\n         * @return {Object} this (qui/controls/buttons/Button)\n         */\n        setDisable : function()\n        {\n            return this.disable();\n        },\n\n        /**\n         * is Button Disabled?\n         *\n         * @method qui/controls/buttons/Button#isDisabled\n         * @return {Boolean}\n         */\n        isDisabled : function()\n        {\n            if ( !this.getElm() ) {\n                return false;\n            }\n\n            return this.getElm().get('data-status') == -1;\n        },\n\n        /**\n         * If the Button was disabled, you can enable the Button\n         *\n         * @method qui/controls/buttons/Button#setEnable\n         * @return {Object} this (qui/controls/buttons/Button)\n         */\n        enable : function()\n        {\n            if ( !this.getElm() ) {\n                return this;\n            }\n\n            this.getElm().set({\n                'data-status' : 0,\n                'disabled'    : null\n            });\n\n            this.setNormal();\n\n            return this;\n        },\n\n        /**\n         * @deprecated\n         *\n         * @method qui/controls/buttons/Button#setEnable\n         * @return {Object} this (qui/controls/buttons/Button)\n         */\n        setEnable : function()\n        {\n            return this.enable();\n        },\n\n        /**\n         * If the Button was active, you can normalize the Button\n         * The Button must be enabled.\n         *\n         * @method qui/controls/buttons/Button#setNormal\n         * @return {Object} this (qui/controls/buttons/Button)\n         */\n        setNormal : function()\n        {\n            if ( this.isDisabled() ) {\n                return this;\n            }\n\n            if ( !this.getElm() ) {\n                return this;\n            }\n\n            var Elm = this.getElm();\n\n            Elm.set({\n                'data-status' : 0,\n                'disabled'    : null\n            });\n\n            Elm.removeClass( 'qui-button-active' );\n            Elm.removeClass( 'qui-button-over' );\n\n            this.fireEvent( 'normal', [ this ] );\n\n            return this;\n        },\n\n        /**\n         * Adds a Children to an Button Menu\n         *\n         * @method qui/controls/buttons/Button#appendChild\n         *\n         * @param {Object} Itm - qui/controls/contextmenu/Item\n         * @return {Object} this (qui/controls/buttons/Button)\n         */\n        appendChild : function(Itm)\n        {\n            this.$items.push( Itm );\n\n            Itm.setAttribute( 'Button', this );\n\n            if ( !this.$Elm ) {\n                return this;\n            }\n\n            var self = this;\n\n            this.getContextMenu(function(Menu)\n            {\n                Menu.appendChild( Itm );\n\n                if ( self.getAttribute( 'dropDownIcon' ) && !self.$Drop )\n                {\n                    self.$Drop = new Element('div', {\n                        'class' : 'qui-button-drop icon-chevron-down fa fa-chevron-down'\n                    }).inject( self.$Elm );\n                }\n            });\n\n            return this;\n        },\n\n        /**\n         * All Context Menu Items\n         *\n         * @method qui/controls/buttons/Button#getChildren\n         * @return {Array}\n         */\n        getChildren : function()\n        {\n            return this.$items;\n        },\n\n        /**\n         * Clear the Context Menu Items\n         *\n         * @method qui/controls/buttons/Button#clear\n         * @return {Object} this (qui/controls/buttons/Button)\n         */\n        clear : function()\n        {\n            this.getContextMenu(function(Menu) {\n                Menu.clearChildren();\n            });\n\n            this.$items = [];\n\n            return this;\n        },\n\n        /**\n         * Create the Context Menu if not exist\n         *\n         * @method qui/controls/buttons/Button#getContextMenu\n         *\n         * @param {Function} callback - callback function( {qui/controls/contextmenu/Menu} )\n         * @return {Object} this (qui/controls/buttons/Button)\n         */\n        getContextMenu : function(callback)\n        {\n            if ( this.$Menu && typeof this.$createContextMenu === 'undefined' )\n            {\n                callback( this.$Menu );\n                return this;\n            }\n\n            var self = this;\n\n            if ( typeof this.$createContextMenu !== 'undefined' )\n            {\n                (function() {\n                    self.getContextMenu( callback );\n                }).delay( 10 );\n\n                return this;\n            }\n\n\n            this.$createContextMenu = true;\n\n            require(['qui/controls/contextmenu/Menu'], function(Menu)\n            {\n                self.$Menu = new Menu({\n                    name   : self.getAttribute('name') +'-menu',\n                    corner : self.getAttribute('menuCorner')\n                });\n\n                self.$Menu.inject( document.body );\n\n                self.addEvents({\n                    onClick : function()\n                    {\n                        if ( self.isDisabled() ) {\n                            return;\n                        }\n\n                        var pos   = self.$Elm.getPosition(),\n                            size  = self.$Elm.getSize(),\n\n                            mpos  = self.getAttribute('menuCorner'),\n                            msize = self.$Menu.getElm().getComputedSize();\n\n                        if ( mpos.contains( 'bottom' ) )\n                        {\n                            self.$Menu.setPosition(\n                                pos.x - 20,\n                                pos.y - size.y - msize.totalHeight + 10\n                            );\n                        } else\n                        {\n                            self.$Menu.setPosition(\n                                pos.x - 20,\n                                pos.y + size.y + 10\n                            );\n                        }\n\n                        self.$Menu.show();\n                        self.$Elm.focus();\n                    },\n\n                    onBlur : function()\n                    {\n                        self.$Menu.hide();\n                    }\n                });\n\n                self.$Menu.setParent( self );\n\n                delete self.$createContextMenu;\n\n                callback( self.$Menu );\n            });\n        },\n\n        /**\n         * Method for changing the DOMNode if attributes are changed\n         *\n         * @method qui/controls/buttons/Button#onSetAttribute\n         *\n         * @param {String} k - Attribute name\n         * @param {Object|String|Boolean|Number} value - Attribute value\n         *\n         * @ignore\n         */\n        onSetAttribute : function(k, value)\n        {\n            var Elm = this.getElm();\n\n            //this.options[k] = value;\n\n            if ( !Elm ) {\n                return;\n            }\n\n            // onclick overwrite\n            if ( k === 'onclick' )\n            {\n                this.removeEvents('click');\n\n                this.addEvent('click', function(p)\n                {\n                    eval(p +'(this);');\n                }.bind( this, [value] ));\n\n                return;\n            }\n\n            if ( k == 'image' ) {\n                k = 'icon';\n            }\n\n            // Image\n            if ( k === 'icon' )\n            {\n                if ( !Elm.getElement('.image-container') )\n                {\n                    new Element('div.image-container', {\n                        align : 'center'\n                    }).inject( Elm );\n                }\n\n                var Image = Elm.getElement('.image-container');\n\n                Image.set( 'html', '' );\n\n                if ( Utils.isFontAwesomeClass( value ) )\n                {\n                    new Element('span', {\n                        'class' : value\n                    }).inject( Image );\n                } else\n                {\n                    new Element('img.qui-button-image', {\n                        src    : value,\n                        styles : {\n                            'display' : 'block' // only image, fix\n                        }\n                    }).inject( Image );\n                }\n\n                return;\n            }\n\n            // Style Attributes\n            if ( k === \"styles\" )\n            {\n                Elm.setStyles( value );\n                return;\n            }\n\n            // Text\n            if ( k === \"title\" )\n            {\n                Elm.setAttribute( 'title', value );\n                return;\n            }\n\n            // Text and Text-Image\n            if ( k !== 'textimage' && k !== 'text' ) {\n                return;\n            }\n\n            // Text + Text Image\n            if ( !Elm.getElement('.qui-button-text') ) {\n                new Element('span.qui-button-text').inject( Elm );\n            }\n\n            var Txt = Elm.getElement('.qui-button-text');\n\n            // Text\n            if ( k === 'text' ) {\n                Txt.set( 'html', value );\n            }\n\n            if ( k === 'textimage' )\n            {\n                var Img;\n\n                if ( Elm.getElement('.qui-button-text-image') ) {\n                    Elm.getElement('.qui-button-text-image').destroy();\n                }\n\n                if ( Utils.isFontAwesomeClass( value ) )\n                {\n                    Img = new Element('span', {\n                        'class'  : 'qui-button-text-image '+ value,\n                        styles : {\n                            'margin-right': 0\n                        }\n                    }).inject( Txt, 'before' );\n                } else\n                {\n                    Img = new Element('img', {\n                        'class' : 'qui-button-text-image',\n                        src     : value,\n                        styles  : {\n                            'margin-right': 0\n                        }\n                    }).inject( Txt, 'before' );\n                }\n\n                if ( this.getAttribute('text') ) {\n                    Img.setStyle( 'margin-right', null );\n                }\n            }\n        }\n    });\n});\n\n","\n/**\n * A task bar\n *\n * @module qui/controls/taskbar/Bar\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require qui/controls/Control\n * @require qui/controls/taskbar/Task\n * @require qui/controls/taskbar/Group\n * @require qui/controls/buttons/Button\n * @require qui/controls/contextmenu/Item\n * @require css!qui/controls/taskbar/Bar.css\n *\n * @event onAppendChild [\n *     {qui/controls/taskbar/Bar},\n *     {qui/controls/taskbar/Task}\n * ]\n * @event onAppendChildBegin [\n *     {qui/controls/taskbar/Bar},\n *     {qui/controls/taskbar/Task}\n * ]\n *\n * @event onUnserializeFinish [ {qui/controls/taskbar/Bar} ]\n */\n\ndefine('qui/controls/taskbar/Bar', [\n\n    'qui/controls/Control',\n    'qui/controls/taskbar/Task',\n    'qui/controls/taskbar/Group',\n    'qui/controls/buttons/Button',\n    'qui/controls/contextmenu/Menu',\n    'qui/controls/contextmenu/Item',\n\n    'css!qui/controls/taskbar/Bar.css'\n\n], function(Control, TaskbarTask, TaskbarGroup, Button, Contextmenu, ContextmenuItem)\n{\n    \"use strict\";\n\n    /**\n     * @class qui/controls/taskbar/Bar\n     *\n     * @param {Object} options\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Extends : Control,\n        Type    : 'qui/controls/taskbar/Bar',\n\n        Binds : [\n            '$onTaskRefresh',\n            '$onTaskClick',\n            '$onTaskDestroy',\n            '$openContextMenu',\n            '$onTaskContextMenu',\n            'scrollToLeft',\n            'scrollToRight'\n        ],\n\n        options : {\n            width    : false,\n            styles   : false,\n            position : 'bottom' // bottom or top\n        },\n\n        initialize : function(options)\n        {\n            this.$Elm    = null;\n            this.$tasks  = [];\n\n            this.$Active      = null;\n            this.$LastTask    = null;\n            this.$ContextMenu = null;\n\n            this.$TaskButton    = null;\n            this.$Left          = null;\n            this.$Right         = null;\n            this.$Container     = null;\n            this.$TaskContainer = null;\n\n\n            this.$unserializedTasks = 0;\n            this.$overflowed        = false;\n\n            this.parent( options );\n        },\n\n        /**\n         * Return the save date, eq for the workspace\n         *\n         * @method qui/controls/taskbar/Bar#serialize\n         * @return {Object}\n         */\n        serialize : function()\n        {\n            var tasks = [];\n\n            for ( var i = 0, len = this.$tasks.length; i < len; i++ ) {\n                tasks.push( this.$tasks[ i ].serialize() );\n            }\n\n            return {\n                attributes : this.getAttributes(),\n                type       : this.getType(),\n                tasks      : tasks\n            };\n        },\n\n        /**\n         * Import the saved data\n         *\n         * @method qui/controls/taskbar/Bar#unserialize\n         * @param {Object} data\n         * @return {Object} this (qui/controls/taskbar/Bar)\n         */\n        unserialize : function(data)\n        {\n            this.setAttributes( data.attributes );\n\n            if ( !this.$Elm )\n            {\n                this.fireEvent( 'unserializeFinish', [ this ] );\n                this.$serialize = data;\n                return this;\n            }\n\n            var tasks = data.tasks;\n\n            if ( !tasks )\n            {\n                this.fireEvent( 'unserializeFinish', [ this ] );\n                return this;\n            }\n\n\n            if ( !tasks.length )\n            {\n                this.fireEvent( 'unserializeFinish', [ this ] );\n                return this;\n            }\n\n            var self = this;\n            var i, len, Task;\n\n            var importInit = function( Task )\n            {\n                self.appendChild( Task );\n                self.$unserializedTasks++;\n\n                if ( self.$unserializedTasks == tasks.length ) {\n                    self.fireEvent( 'unserializeFinish', [ self ] );\n                }\n            };\n\n            for ( i = 0, len = tasks.length; i < len; i++ )\n            {\n                if ( tasks[ i ].type === 'qui/controls/taskbar/Group' )\n                {\n                    Task = new TaskbarGroup();\n                } else\n                {\n                    Task = new TaskbarTask();\n                }\n\n                Task.addEvent( 'onInit', importInit );\n                Task.unserialize( tasks[i] );\n            }\n        },\n\n        /**\n         * Create the DOMNode for the Bar\n         *\n         * @method qui/controls/taskbar/Bar#create\n         * @return {HTMLElement}\n         */\n        create : function()\n        {\n            if ( this.$Elm )\n            {\n                this.refresh();\n                return this.$Elm;\n            }\n\n            this.$Elm = new Element('div', {\n                'class'      : 'qui-taskbar qui-task-drop box',\n                'data-quiid' : this.getId(),\n                html         : '<div class=\"qui-taskbar-container\">'+\n                                   '<div class=\"qui-taskbar-container-tasks\"></div>'+\n                               '</div>',\n                events : {\n                    contextmenu : this.$openContextMenu\n                }\n            });\n\n            if ( this.getAttribute( 'styles' ) ) {\n                this.$Elm.setStyles( this.getAttribute( 'styles' ) );\n            }\n\n            if ( this.getAttribute( 'position' ) == 'bottom' ) {\n                this.$Elm.addClass( 'qui-taskbar-bottom' );\n            }\n\n            if ( this.getAttribute( 'position' ) == 'top' ) {\n                this.$Elm.addClass( 'qui-taskbar-top' );\n            }\n\n            this.$Container     = this.$Elm.getElement( '.qui-taskbar-container' );\n            this.$TaskContainer = this.$Elm.getElement( '.qui-taskbar-container-tasks' );\n\n            this.$ContainerScroll = new Fx.Scroll( this.$Container );\n\n            this.$TaskContainer.setStyles({\n                left     : 0,\n                position : 'relative',\n                top      : 0\n            });\n\n            this.$Left = new Button({\n                name    : 'qui-taskbar-left',\n                'class' : 'icon-angle-left fa fa-angle-left',\n                events  : {\n                    onClick : this.scrollToLeft\n                },\n                styles  : {\n                    width  : 30,\n                    height : 30\n                }\n            }).inject( this.$Elm, 'top' );\n\n            this.$Right = new Button({\n                name    : 'qui-taskbar-left',\n                'class' : 'icon-angle-right fa fa-angle-right',\n                events  : {\n                    onClick : this.scrollToRight\n                },\n                styles  : {\n                    width  : 30,\n                    height : 30\n                }\n            }).inject( this.$Elm );\n\n            this.$TaskButton = new Button({\n                name    : 'qui-taskbar-btn-'+ this.getId(),\n                'class' : 'qui-taskbar-button',\n                icon    : 'icon-chevron-up',\n                menuCorner : this.getAttribute('position'),\n                styles  : {\n                    width  : 30,\n                    height : 30\n                }\n            }).inject( this.$Elm );\n\n\n            // exist serialize data\n            if ( typeof this.$serialize !== 'undefined' ) {\n                this.unserialize( this.$serialize );\n            }\n\n\n            return this.$Elm;\n        },\n\n        /**\n         * Resize the elements\n         */\n        resize : function()\n        {\n            var maxWidth     = this.$Elm.getComputedSize().totalWidth,\n                buttonsWidth = 94,\n\n                tasksSize = this.$Elm.getElements( '.qui-task' ).map(function(Item) {\n                    return Item.getComputedSize().totalWidth;\n                }).sum();\n\n            if ( tasksSize > maxWidth )\n            {\n                this.$Container.setStyle( 'width', maxWidth - buttonsWidth );\n\n                this.$Left.show();\n                this.$Right.show();\n                this.$TaskButton.show();\n\n                this.$overflowed = true;\n\n            } else\n            {\n                this.$Container.setStyle( 'width', maxWidth );\n\n                this.$Left.hide();\n                this.$Right.hide();\n                this.$TaskButton.hide();\n\n                this.$overflowed = false;\n            }\n\n            this.$TaskContainer.setStyle( 'width', tasksSize );\n        },\n\n        /**\n         * refresh?\n         *\n         * @method qui/controls/taskbar/Bar#refresh\n         */\n        refresh : function()\n        {\n\n        },\n\n        /**\n         * Append a child to the Taskbar\n         *\n         * @method qui/controls/taskbar/Bar#appendChild\n         * @param {Object} Task - qui/controls/taskbar/Task | qui/controls/taskbar/Group\n         */\n        appendChild : function(Task)\n        {\n            this.fireEvent( 'appendChildBegin', [ this, Task ] );\n\n            var Parent = Task.getParent();\n\n            if ( Parent && Parent.getType() === 'qui/controls/taskbar/Bar' )\n            {\n                Task.removeEvent( 'refresh', Parent.$onTaskRefresh );\n                Task.removeEvent( 'click', Parent.$onTaskClick );\n            }\n\n            Task.setParent( this );\n\n            Task.addEvents({\n                onRefresh     : this.$onTaskRefresh,\n                onClick       : this.$onTaskClick,\n                onDestroy     : this.$onTaskDestroy,\n                onContextMenu : this.$onTaskContextMenu\n            });\n\n\n            Task.normalize();\n            Task.inject( this.$TaskContainer );\n\n            this.$tasks.push( Task );\n\n\n            this.$TaskButton.appendChild(\n                new ContextmenuItem({\n                    icon   : Task.getIcon(),\n                    text   : Task.getText(),\n                    name   : Task.getId(),\n                    Task   : Task,\n                    events :\n                    {\n                        onMouseDown : function(Item) {\n                            Item.getAttribute( 'Task' ).click();\n                        }\n                    }\n                })\n            );\n\n            this.fireEvent( 'appendChild', [ this, Task ] );\n            this.resize();\n\n            return this;\n        },\n\n        /**\n         * Return the first task children\n         *\n         * @method qui/controls/taskbar/Bar#firstChild\n         * @return {Object|Boolean} qui/controls/taskbar/Task | qui/controls/taskbar/Group | false\n         */\n        firstChild : function()\n        {\n            if ( typeof this.$tasks[ 0 ] !== 'undefined' ) {\n                return this.$tasks[ 0 ];\n            }\n\n            return false;\n        },\n\n        /**\n         * Return the last task children\n         *\n         * @method qui/controls/taskbar/Bar#lastChild\n         * @return {Object|Boolean} qui/controls/taskbar/Task | qui/controls/taskbar/Group | false\n         */\n        lastChild : function()\n        {\n            if ( this.$tasks.length ) {\n                return this.$tasks[ this.$tasks.length - 1  ];\n            }\n\n            return false;\n        },\n\n        /**\n         * Remove a task from the bar\n         *\n         * @method qui/controls/taskbar/Bar#removeChild\n         * @param {Object} Task - qui/controls/taskbar/Task\n         */\n        removeChild : function(Task)\n        {\n            if ( this.$TaskButton )\n            {\n                this.$TaskButton.getContextMenu(function(Menu)\n                {\n                    var Child = Menu.getChildren( Task.getId() );\n\n                    if ( Child ) {\n                        Child.destroy();\n                    }\n                });\n            }\n\n            Task.destroy();\n        },\n\n        /**\n         * Close / Remove all tasks from the bar\n         *\n         * @method qui/controls/taskbar/Bar#closeAllTasks\n         * @return {Object} qui/controls/taskbar/Bar\n         */\n        closeAllTasks : function()\n        {\n            if ( this.$TaskButton )\n            {\n                this.$TaskButton.getContextMenu(function(Menu) {\n                    Menu.clear();\n                });\n            }\n\n            var tasks = this.$tasks;\n\n            for ( var i = 0, len = tasks.length; i < len; i++ ) {\n                tasks[ i ].destroy();\n            }\n\n            this.$tasks = [];\n\n            return this;\n        },\n\n        /**\n         * Close / Remove all other tasks from the bar\n         *\n         * @method qui/controls/taskbar/Bar#closeOtherTasks\n         * @param {Object} Task - qui/controls/taskbar/Task\n         * @return {Object} qui/controls/taskbar/Bar\n         */\n        closeOtherTasks : function(Task)\n        {\n            var tasks = this.$tasks,\n                tid   = Task.getId();\n\n            for ( var i = 0, len = tasks.length; i < len; i++ )\n            {\n                if ( tid != tasks[ i ].getId() ) {\n                    tasks[ i ].destroy();\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * Close / Remove the task from the bar\n         *\n         * @method qui/controls/taskbar/Bar#closeTask\n         * @param {Object} Task - qui/controls/taskbar/Task\n         * @return {Object} qui/controls/taskbar/Bar\n         */\n        closeTask : function(Task)\n        {\n            this.removeChild( Task );\n\n            return this;\n        },\n\n        /**\n         * highlight the toolbar\n         *\n         * @method qui/controls/taskbar/Bar#highlight\n         * @return {Object} this (qui/controls/taskbar/Bar)\n         */\n        highlight : function()\n        {\n            this.$Elm.addClass( 'highlight' );\n\n            return this;\n        },\n\n        /**\n         * normalize the toolbar\n         *\n         * @method qui/controls/taskbar/Bar#normalize\n         * @return {Object} this (qui/controls/taskbar/Bar)\n         */\n        normalize : function()\n        {\n            this.$Elm.removeClass( 'highlight' );\n\n            return this;\n        },\n\n        /**\n         * Scroll the taskbar to the left\n         */\n        scrollToLeft : function()\n        {\n            if ( !this.$ContainerScroll ) {\n                return;\n            }\n\n            var scrollPos  = this.$Container.getScroll(),\n                size       = this.$Container.getSize(),\n                pos        = scrollPos.x - ( size.x * 0.8 ).round();\n\n            this.$ContainerScroll.start( pos, 0 );\n        },\n\n        /**\n         * Scroll the taskbar to the right\n         */\n        scrollToRight : function()\n        {\n            if ( !this.$ContainerScroll ) {\n                return;\n            }\n\n            var scrollPos  = this.$Container.getScroll(),\n                size       = this.$Container.getSize(),\n                pos        = scrollPos.x + ( size.x * 0.8 ).round();\n\n            this.$ContainerScroll.start( pos, 0 );\n        },\n\n        /**\n         * Scroll the taskbar to the Task\n         *\n         * @param {Object} Task - qui/controls/taskbar/Task\n         */\n        scrollToTask : function(Task)\n        {\n            if ( !this.$overflowed ) {\n                return;\n            }\n\n            if ( this.$ContainerScroll ) {\n                this.$ContainerScroll.toElement( Task.getElm() );\n            }\n        },\n\n        /**\n         * Refresh the context menu item of the task, if the task refresh\n         *\n         * @method qui/controls/taskbar/Bar#$onTaskRefresh\n         * @param {Object} Task - qui/controls/taskbar/Task\n         */\n        $onTaskRefresh : function(Task)\n        {\n            if ( !this.$TaskButton ) {\n                return;\n            }\n\n            this.$TaskButton.getContextMenu(function(Menu)\n            {\n                var Child = Menu.getChildren( Task.getId() );\n\n                if ( !Child ) {\n                    return;\n                }\n\n                Child.setAttribute( 'icon', Task.getIcon() );\n                Child.setAttribute( 'text', Task.getText() );\n            });\n        },\n\n        /**\n         * event task click\n         *\n         * @method qui/controls/taskbar/Bar#$onTaskClick\n         * @param {Object} Task - qui/controls/taskbar/Task\n         */\n        $onTaskClick : function(Task)\n        {\n            if ( this.$Active == Task ) {\n                return;\n            }\n\n            if ( this.$Active )\n            {\n                this.$Active.normalize();\n                this.$LastTask = this.$Active;\n            }\n\n            if ( this.$overflowed ) {\n                this.scrollToTask( Task );\n            }\n\n            this.$Active = Task;\n            this.$Active.activate();\n        },\n\n        /**\n         * event task destroy\n         *\n         * @method qui/controls/taskbar/Bar#$onTaskDestroy\n         * @param {Object} Task - qui/controls/taskbar/Task\n         */\n        $onTaskDestroy : function(Task)\n        {\n            // clear internal array\n            var i, len, tasks = [];\n            for ( i = 0, len = this.$tasks.length; i < len; i++ )\n            {\n                if ( Task.getId() !== this.$tasks[ i ].getId() ) {\n                    tasks.push( this.$tasks[ i ] );\n                }\n            }\n\n            this.$tasks = tasks;\n\n\n            // destroy entry in context menu\n            this.$TaskButton.getContextMenu(function(Menu)\n            {\n                var Child = Menu.getChildren( Task.getId() );\n\n                if ( Child ) {\n                    Child.destroy();\n                }\n            });\n\n            Task.removeEvents({\n                onRefresh     : this.$onTaskRefresh,\n                onClick       : this.$onTaskClick,\n                onDestroy     : this.$onTaskDestroy,\n                onContextMenu : this.$onTaskContextMenu\n            });\n\n\n            // open other task\n            if ( this.$LastTask &&\n                 this.$LastTask.getId() == Task.getId() )\n            {\n                this.$LastTask = null;\n            }\n\n            this.resize.delay( 200, this );\n\n            if ( this.$Active !== null && this.$Active != Task ) {\n                return;\n            }\n\n\n            this.$Active = null;\n\n            if ( this.$LastTask &&\n                 this.$LastTask.getId() != Task.getId() )\n            {\n                this.$LastTask.click();\n                return;\n            }\n\n            var FirstTask = this.firstChild();\n\n            if ( FirstTask && Task.getId() == FirstTask.getId() )\n            {\n                if ( typeof this.$tasks[ 1 ] !== 'undefined' ) {\n                    return this.$tasks[ 1 ].click();\n                }\n\n                return;\n            }\n\n            if ( FirstTask ) {\n                FirstTask.click();\n            }\n        },\n\n        /**\n         * Open the bar context menu\n         *\n         * @param {DOMEvent} event\n         */\n        $openContextMenu : function(event)\n        {\n            event.stop();\n\n            var self = this;\n\n            if ( !this.$ContextMenu )\n            {\n                this.$ContextMenu = new Contextmenu({\n                    name : 'taskbar-contextmenu',\n                    events :\n                    {\n                        onBlur : function(Menu)\n                        {\n                            Menu.hide();\n\n                            self.$tasks.each(function(Task) {\n                                Task.deHighlight();\n                            });\n                        }\n                    }\n                });\n\n                this.$ContextMenu.hide();\n                this.$ContextMenu.inject( document.body );\n\n                this.$ContextMenu.appendChild(\n                    new ContextmenuItem({\n                        name   : 'close-task',\n                        text   : 'Task schließen',\n                        icon   : 'icon-remove',\n                        events :\n                        {\n                            onClick : function(Item)\n                            {\n                                var Task = Item.getAttribute( 'Task' );\n\n                                if ( Task ) {\n                                    self.closeTask( Task );\n                                }\n                            }\n                        }\n                    })\n                ).appendChild(\n                    new ContextmenuItem({\n                        name   : 'close-other-task',\n                        text   : 'Andere Tasks schließen',\n                        icon   : 'icon-remove-sign',\n                        events :\n                        {\n                            onClick : function(Item)\n                            {\n                                var Task = Item.getAttribute( 'Task' );\n\n                                if ( Task )\n                                {\n                                    self.closeOtherTasks( Task );\n                                    Task.focus();\n                                }\n                            }\n                        }\n                    })\n                ).appendChild(\n                    new ContextmenuItem({\n                        name   : 'close-all-task',\n                        text   : 'Alle Tasks schließen',\n                        icon   : 'icon-remove-circle',\n                        events :\n                        {\n                            onClick : function() {\n                                self.closeAllTasks();\n                            }\n                        }\n                    })\n                );\n            }\n\n\n            this.$ContextMenu.getChildren( 'close-task' ).disable();\n            this.$ContextMenu.getChildren( 'close-other-task' ).disable();\n\n            this.$ContextMenu.setPosition( event.page.x, event.page.y )\n            this.$ContextMenu.show();\n            this.$ContextMenu.focus();\n            this.$ContextMenu.setTitle( '---' );\n\n            return this.$ContextMenu;\n        },\n\n        /**\n         * event : on task contextmenu\n         *\n         * @param {Object} Task - qui/controls/taskbar/Task\n         * @param {DOMEvent} event - DOMEvent\n         */\n        $onTaskContextMenu : function(Task, event)\n        {\n            this.$tasks.each(function(Task) {\n                Task.deHighlight();\n            });\n\n            var Menu       = this.$openContextMenu( event ),\n                CloseTask  = Menu.getChildren( 'close-task' ),\n                CloseOther = Menu.getChildren( 'close-other-task' );\n\n            Menu.setTitle( Task.getText() );\n\n            CloseTask.setAttribute( 'Task', Task );\n            CloseOther.setAttribute( 'Task', Task );\n\n            CloseTask.enable();\n            CloseOther.enable();\n\n            Task.highlight();\n        }\n    });\n});\n\n","\n/**\n * A Tasks panel manager\n *\n * A Tasks panel can managed several Panels, Desktop's and other Controls.\n * In a Tasks panel you can insert several controls and you can switch between the Controls\n *\n * @module qui/controls/desktop/Tasks\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require qui/QUI\n * @require qui/controls/Control\n * @require qui/controls/loader/Loader\n * @require qui/controls/taskbar/Bar\n * @require qui/controls/taskbar/Task\n * @require css!qui/controls/desktop/Tasks.css\n *\n * @event onResize [this]\n * @event onRefresh [this]\n */\n\ndefine('qui/controls/desktop/Tasks', [\n\n    'qui/QUI',\n    'qui/controls/Control',\n    'qui/controls/loader/Loader',\n    'qui/controls/taskbar/Bar',\n    'qui/controls/taskbar/Task',\n\n    'css!qui/controls/desktop/Tasks.css'\n\n], function(QUI, Control, Loader, Taskbar, TaskbarTask)\n{\n    \"use strict\";\n\n    /**\n     * @class qui/controls/desktop/Tasks\n     * @param {Object} options\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Extends : Control,\n        Type    : 'qui/controls/desktop/Tasks',\n\n        Binds : [\n            '$activateTask',\n            '$destroyTask',\n            '$normalizeTask',\n            '$onTaskbarAppendChild'\n        ],\n\n        options : {\n            name  : 'taskpanel',\n            icon  : 'icon-tasks',\n\n            // header\n            header : true,    // true to create a panel header when panel is created\n            title  : 'Tasks'  // the title inserted into the panel's header\n        },\n\n        initialize : function(options)\n        {\n            this.parent( options );\n\n            this.Loader = new Loader();\n\n            this.$Elm      = null;\n            this.$Taskbar  = null;\n            this.$Active   = null;\n            this.$LastTask = null;\n\n            this.$__unserialize = false;\n            this.$__serialize   = null;\n\n            this.addEvents({\n                onInject : function()\n                {\n                    (function()\n                    {\n                        // exist serialize data\n                        if ( this.$__serialize )\n                        {\n                            this.unserialize( this.$__serialize );\n                            this.$__serialize = null;\n                        }\n\n                        this.$__unserialize = false;\n\n                    }).delay( 20, this );\n\n                }.bind( this )\n            });\n\n            this.$tmpList = [];\n        },\n\n        /**\n         * Is the Panel open?\n         *\n         * @method qui/controls/desktop/Tasks#isOpen\n         * @return {Boolean}\n         */\n        isOpen : function()\n        {\n            return true;\n        },\n\n        /**\n         * Return the data for the workspace\n         *\n         * @method qui/controls/desktop/Tasks#serialize\n         * @return {Object}\n         */\n        serialize : function()\n        {\n            return {\n                attributes : this.getAttributes(),\n                type       : this.getType(),\n                bar        : this.$Taskbar.serialize()\n            };\n        },\n\n        /**\n         * Import the saved data\n         *\n         * @method qui/controls/desktop/Tasks#unserialize\n         * @param {Object} data\n         * @return {Object} this (qui/controls/desktop/Tasks)\n         */\n        unserialize : function(data)\n        {\n            var self = this;\n\n            this.$__unserialize = true;\n            this.setAttributes( data.attributes );\n\n            if ( !this.$Elm )\n            {\n                this.$__serialize   = data;\n                this.$__unserialize = false;\n\n                return this;\n            }\n\n            if ( data.bar )\n            {\n                this.$Taskbar.addEvent('onUnserializeFinish', function()\n                {\n                    if ( self.firstChild() ) {\n                        self.firstChild().click();\n                    }\n\n                    self.$__unserialize = false;\n                });\n\n                this.$Taskbar.unserialize( data.bar );\n\n                return this;\n            }\n\n            this.$__unserialize = false;\n\n            return this;\n        },\n\n        /**\n         * Refresh the panel\n         *\n         * @method qui/controls/desktop/Tasks#refresh\n         * @return {Object} this (qui/controls/desktop/Tasks)\n         */\n        refresh : function()\n        {\n            this.fireEvent( 'refresh', [ this ] );\n\n            return this;\n        },\n\n        /**\n         * Resize the panel\n         *\n         * @method qui/controls/desktop/Tasks#resize\n         * @return {Object} this (qui/controls/desktop/Tasks)\n         */\n        resize : function()\n        {\n            var height = this.getAttribute( 'height' ),\n                width  = this.getAttribute( 'width' );\n\n            if ( !height ) {\n                height = '100%';\n            }\n\n            if ( !width ) {\n                width = '100%';\n            }\n\n            this.$Elm.setStyles({\n                height : height,\n                width  : width\n            });\n\n            var contentSize  = this.getContentSize(),\n                contentSizeY = contentSize.y;\n\n            this.$Container.setStyles({\n                height : contentSizeY\n            });\n\n            if ( this.$Active && this.$Active.getInstance()\t)\n            {\n                this.$Active.getInstance().setAttributes({\n                    height : contentSizeY\n                });\n\n                this.$Active.getInstance().resize();\n            }\n\n            this.$Taskbar.resize();\n\n            this.fireEvent( 'resize', [ this ] );\n\n            return this;\n        },\n\n        /**\n         * Create DOMNode Element for the Tasks\n         *\n         * @method qui/controls/desktop/Tasks#create\n         * @return {HTMLElement}\n         */\n        create : function()\n        {\n            if ( this.$Elm ) {\n                return this.$Elm;\n            }\n\n            this.$Elm = new Element('div', {\n                'data-quiid' : this.getId(),\n                'class'      : 'qui-taskpanel qui-panel',\n\n                styles : {\n                    height : '100%'\n                }\n            });\n\n            this.$Container = new Element(\n                'div.qui-taskpanel-container'\n            ).inject( this.$Elm );\n\n            this.$Taskbar = new Taskbar({\n                name   : 'qui-taskbar-'+ this.getId(),\n                type   : 'bottom',\n                styles : {\n                    bottom   : 0,\n                    left     : 0,\n                    position : 'absolute'\n                },\n                events : {\n                    onAppendChildBegin : this.$onTaskbarAppendChild\n                }\n            }).inject( this.$Elm );\n\n            this.$Taskbar.setParent( this );\n\n            // exist serialize data\n            if ( this.$__serialize )\n            {\n                this.unserialize( this.$__serialize );\n                this.$__serialize = null;\n            }\n\n            for ( var i = 0, len = this.$tmpList.length; i < len; i++ )\n            {\n                this.$Taskbar.appendChild(\n                    this.instanceToTask( this.$tmpList[ i ] )\n                );\n            }\n\n            return this.$Elm;\n        },\n\n        /**\n         * Highlight the column\n         *\n         * @method qui/controls/desktop/Tasks#highlight\n         * @return {Object} this (qui/controls/desktop/Tasks)\n         */\n        highlight : function()\n        {\n            if ( this.getElm() ) {\n                this.getElm().addClass( 'qui-panel-highlight' );\n            }\n\n            return this;\n        },\n\n        /**\n         * Dehighlight the column\n         *\n         * @method qui/controls/desktop/Tasks#normalize\n         * @return {Object} this (qui/controls/desktop/Tasks)\n         */\n        normalize : function()\n        {\n            if ( this.getElm() ) {\n                this.getElm().removeClass( 'qui-panel-highlight' );\n            }\n\n            return this;\n        },\n\n        /**\n         * Insert a control in the Taskpanel\n         *\n         * @method qui/controls/desktop/Tasks#appendChild\n         * @param {Object} Instance - (qui/controls/Control) A QUI Control\n         */\n        appendChild : function(Instance)\n        {\n            if ( !this.$Taskbar )\n            {\n                this.$tmpList.push( Instance );\n                return this;\n            }\n\n            this.$Taskbar.appendChild(\n                this.instanceToTask( Instance )\n            );\n\n            return this;\n        },\n\n        /**\n         * Depends a panel from the column\n         *\n         * @method qui/controls/desktop/Tasks#dependChild\n         * @param {Object} Panel - qui/controls/desktop/Panel\n         * @return {Object} this (qui/controls/desktop/Tasks)\n         */\n        dependChild : function(Panel)\n        {\n            var Task = Panel.getAttribute( 'Task' );\n\n            if ( !Task ) {\n                return this;\n            }\n\n            Panel.getElm().setStyles({\n                left     : null,\n                position : null,\n                top      : null,\n                display  : null\n            });\n\n            Panel.setAttributes({\n                collapsible : true,\n                Task        : null\n            });\n\n            // task events\n            Task.removeEvents( 'normalize' );\n            Task.removeEvents( 'activate' );\n            Task.removeEvents( 'destroy' );\n            Task.removeEvents( 'refresh' );\n            Task.removeEvents( 'destroy' );\n            Task.removeEvents( 'click' );\n\n            Task.setInstance( null );\n            Task.destroy();\n\n            this.getTaskbar().removeChild( Task );\n\n            return this;\n        },\n\n        /**\n         * Insert a control in the Taskpanel\n         *\n         * @method qui/controls/desktop/Tasks#appendTask\n         * @param {Object} Task - (qui/controls/taskbar/Task | qui/controls/taskbar/Group) A QUI task\n         */\n        appendTask : function(Task)\n        {\n            this.$Taskbar.appendChild( Task );\n            return this;\n        },\n\n        /**\n         * Helper method\n         *\n         * Activasion Tab event\n         * Shows the instance from the tab\n         *\n         * @method qui/controls/desktop/Tasks#$activateTask\n         * @param {Object} Task - qui/controls/taskbar/Task | qui/controls/taskbar/Group\n         */\n        $activateTask : function(Task)\n        {\n            if ( typeof Task === 'undefined' ) {\n                return;\n            }\n\n            if ( this.$Active && this.$Active.getType() != 'qui/controls/taskbar/Group' )\n            {\n                var _Tmp = this.$Active;\n                this.$Active = Task;\n\n                this.$normalizeTask( _Tmp );\n            }\n\n            this.$Active = Task;\n\n            if ( !Task.getInstance() ) {\n                return;\n            }\n\n            var Instance = Task.getInstance(),\n                Elm      = Instance.getElm(),\n                self     = this;\n\n            Elm.setStyles({\n                display : null,\n                opacity : 0\n            });\n\n            moofx( Elm ).animate({\n                left    : 0,\n                opacity : 1\n            }, {\n                equation : 'ease-out',\n                callback : function()\n                {\n                    self.resize();\n                    Instance.fireEvent( 'show', [ Instance ] );\n                }\n            });\n        },\n\n        /**\n         * Helper method\n         *\n         * Destroy Tab event\n         * Hide the instance from the tab and destroy it\n         *\n         * @method qui/controls/desktop/Tasks#$destroyTask\n         * @param {Object} Task - qui/controls/taskbar/Task\n         */\n        $destroyTask : function(Task)\n        {\n            if ( !Task.getInstance() ) {\n                return;\n            }\n\n            var Instance = Task.getInstance(),\n                Elm      = Instance.getElm();\n\n            moofx( Elm ).animate({\n                left    : (this.$Container.getSize().x + 10) * -1,\n                opacity : 0\n            }, {\n                callback : function()\n                {\n                    (function()\n                    {\n                        Instance.destroy();\n                    }).delay( 100 );\n                }\n            });\n        },\n\n        /**\n         * Select the last task, or the last task, or the first task\n         *\n         * @param {Object} Task - qui/controls/Control\n         */\n        selectTask : function(Task)\n        {\n            var tid = false;\n\n            if ( typeof Task !== 'undefined' ) {\n                Task.getId();\n            }\n\n            if ( this.$LastTask && this.$LastTask.getId() != tid )\n            {\n                this.$LastTask.click();\n                return;\n            }\n\n            var LastTask = this.lastChild();\n\n            if ( !LastTask ) {\n                return;\n            }\n\n            if ( LastTask.getInstance() && LastTask.getId() != tid )\n            {\n                LastTask.click();\n                return;\n            }\n\n            var FirstTask = this.firstChild();\n\n            if ( FirstTask.getInstance() && FirstTask.getId() != tid ) {\n                FirstTask.click();\n            }\n        },\n\n        /**\n         * Helper method\n         *\n         * Activasion Tab event\n         * Hide the instance from the tab\n         *\n         * @method qui/controls/desktop/Tasks#$normalizeTask\n         * @param {Object} Task - qui/controls/taskbar/Task\n         */\n        $normalizeTask : function(Task)\n        {\n            if ( Task == this.$Active ) {\n                return;\n            }\n\n            if ( !Task.getInstance() ) {\n                return;\n            }\n\n            var Instance = Task.getInstance(),\n                Elm      = Instance.getElm();\n\n\n            moofx( Elm ).animate({\n                left    : (this.$Container.getSize().x + 10) * -1,\n                opacity : 0\n            }, {\n                equation : 'ease-out',\n                callback : function(Elm)\n                {\n                    Elm.setStyle( 'display', 'none' );\n                }.bind( this, Elm )\n            });\n        },\n\n        /**\n         * Return the first task children\n         *\n         * @method qui/controls/desktop/Tasks#firstChild\n         * @return {Object|Boolean} qui/controls/taskbar/Task | qui/controls/taskbar/Group | false\n         */\n        firstChild : function()\n        {\n            return this.$Taskbar.firstChild();\n        },\n\n        /**\n         * Return the last task children\n         *\n         * @method qui/controls/desktop/Tasks#lastChild\n         * @return {Object|Boolean} qui/controls/taskbar/Task | qui/controls/taskbar/Group | false\n         */\n        lastChild : function()\n        {\n            return this.$Taskbar.lastChild();\n        },\n\n        /**\n         * Return the taskbar object\n         *\n         * @method qui/controls/desktop/Tasks#getTaskbar\n         * @return {Object|null} qui/controls/taskbar/Bar | null\n         */\n        getTaskbar : function()\n        {\n            return this.$Taskbar;\n        },\n\n        /**\n         * Return the available content size\n         *\n         * @method qui/controls/desktop/Tasks#getContentSize\n         * @return {Object} {x,y}\n         */\n        getContentSize : function()\n        {\n            if ( !this.getTaskbar() ) {\n                return this.$Elm.getSize();\n            }\n\n            var taskbarSize = this.getTaskbar().getElm().getSize(),\n                contentSize = this.$Elm.getSize();\n\n            return {\n                x : contentSize.x - taskbarSize.x,\n                y : contentSize.y - taskbarSize.y\n            };\n        },\n\n        /**\n         * Enable the dragdrop -> do nothing, panel compatibility\n         */\n        enableDragDrop : function()\n        {\n\n        },\n\n        /**\n         * Enable the dragdrop -> do nothing, panel compatibility\n         */\n        disableDragDrop : function()\n        {\n\n        },\n\n        /**\n         * Open the Panel -> do nothing, panel compatibility\n         *\n         * @return {Object} this (qui/controls/desktop/Tasks)\n         */\n        open : function()\n        {\n            return this;\n        },\n\n        /**\n         * Minimize -> do nothing, panel compatibility\n         *\n         * @return {Object} this (qui/controls/desktop/Tasks)\n         */\n        minimize : function()\n        {\n            return this;\n        },\n\n        /**\n         * Create a Task for the Control\n         *\n         * @method qui/controls/desktop/Tasks#instanceToTask\n         * @param {Object} Instance - (qui/controls/Control) Instance of a QUI control\n         * @return {Object} qui/controls/tasksbar/Task\n         */\n        instanceToTask : function(Instance)\n        {\n            // create task\n            var closeable = false,\n                dragable  = false;\n\n            if ( Instance.existAttribute( 'closeable' ) === false ||\n                 Instance.existAttribute( 'closeable' ) &&\n                 Instance.getAttribute( 'closeable' ) )\n            {\n                closeable = true;\n            }\n\n            if ( Instance.existAttribute( 'dragable' ) === false ||\n                 Instance.existAttribute( 'dragable' ) &&\n                 Instance.getAttribute( 'dragable' ) )\n            {\n                dragable = true;\n            }\n\n            var Task = Instance.getAttribute( 'Task' );\n\n            if ( !Task )\n            {\n                Task = new TaskbarTask( Instance );\n            } else\n            {\n                Task.setInstance( Instance );\n            }\n\n            Task.setAttributes({\n                closeable : closeable,\n                dragable  : dragable\n            });\n\n\n            return Task;\n        },\n\n        /**\n         * event on taskbar append child or taskbar group\n         *\n         * @method qui/controls/desktop/Tasks#$onTaskbarAppendChild\n         * @param {Object} Bar - qui/controls/taskbar/Bar | qui/controls/taskbar/Group\n         * @param {Object} Task - qui/controls/taskbar/Task\n         */\n        $onTaskbarAppendChild : function(Bar, Task)\n        {\n            if ( Task.getType() === 'qui/controls/taskbar/Group' )\n            {\n                Task.addEvent( 'onAppendChild', this.$onTaskbarAppendChild );\n\n                var tasks = Task.getTasks();\n\n                for ( var i = 0, len = tasks.length; i < len; i++ ) {\n                    this.$onTaskbarAppendChild( Bar, tasks[ i ] );\n                }\n\n                return;\n            }\n\n            var Instance   = Task.getInstance(),\n                Taskbar    = Task.getTaskbar(),\n                TaskParent = Task.getParent(),\n                IParent    = false;\n\n            if ( !Instance ) {\n                return;\n            }\n\n            if ( Task.getTaskbar() ) {\n                IParent = Task.getTaskbar().getParent();\n            }\n\n\n            // clear old tasks parent binds\n            if ( IParent && IParent.getType() == 'qui/controls/desktop/Tasks') {\n                IParent.$removeTask( Task );\n            }\n\n            Instance.setAttribute( 'height', this.$Container.getSize().y );\n            Instance.setAttribute( 'collapsible', false );\n\n            Instance.inject( this.$Container );\n            Instance.setParent( this );\n\n            Instance.getElm().setStyles({\n                position : 'absolute',\n                top      : 0,\n                left     : (this.$Container.getSize().x + 10) * -1\n            });\n\n            // not the best solution\n            Instance.__destroy = Instance.destroy;\n            Instance.destroy   = this.$onInstanceDestroy.bind( this, Instance );\n\n            // delete the own task destroy event\n            // so the tasks panel can destroy the instance\n            Task.removeEvent( 'onDestroy', Task.$onDestroy );\n\n            if ( Taskbar )\n            {\n                Task.removeEvent( 'refresh', Taskbar.$onTaskRefresh );\n                Task.removeEvent( 'destroy', Taskbar.$onTaskDestroy );\n                Task.removeEvent( 'click', Taskbar.$onTaskClick );\n            }\n\n            // add the new events of the panel to the task\n            Task.addEvents({\n                onActivate : this.$activateTask,\n                onDestroy  : this.$destroyTask\n            });\n\n            if ( this.$__unserialize === true ) {\n                 return;\n            }\n\n            if ( !TaskParent ||\n                 TaskParent && TaskParent.getType() !== 'qui/controls/taskbar/Group' )\n            {\n                (function()\n                {\n                    Task.click();\n                }).delay( 100, [ this ] );\n            }\n        },\n\n        /**\n         * Remove a task from the tasks panel and remove all binded events\n         *\n         * @method qui/controls/desktop/Tasks#$removeTask\n         * @param {Object} Task - qui/controls/taskbar/Task\n         */\n        $removeTask : function(Task)\n        {\n            Task.removeEvents({\n                onActivate : this.$activateTask,\n                onDestroy  : this.$destroyTask\n            });\n\n            this.getTaskbar().removeChild( Task );\n        },\n\n        /**\n         * if the instance have been destroyed\n         *\n         * @method qui/controls/desktop/Tasks#$onInstanceDestroy\n         */\n        $onInstanceDestroy : function(Instance)\n        {\n            Instance.__destroy();\n\n            var Task = Instance.getAttribute( 'Task' );\n\n            if ( Task && Task.getElm() ) {\n                Task.destroy();\n            }\n        }\n    });\n});\n\n"]}