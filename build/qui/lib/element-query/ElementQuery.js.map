{"version":3,"file":"ElementQuery.js","sources":["ElementQuery.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n *\n * links:\n * https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors\n * https://github.com/marcj/css-element-queries/issues/28#issuecomment-67327416\n */\n\n(function() {\n    /**\n     *\n     * @type {Function}\n     * @constructor\n     */\n    var ElementQueries = this.ElementQueries = function() {\n\n        this.sheetList    = {};\n        this.withTracking = false;\n        var elements = [];\n\n        /**\n         *\n         * @param element\n         * @returns {Number}\n         */\n        function getEmSize(element) {\n            if (!element) {\n                element = document.documentElement;\n            }\n            var fontSize = getComputedStyle(element, 'fontSize');\n            return parseFloat(fontSize) || 16;\n        }\n\n        /**\n         *\n         * @copyright https://github.com/Mr0grog/element-query/blob/master/LICENSE\n         *\n         * @param {HTMLElement} element\n         * @param {*} value\n         * @returns {*}\n         */\n        function convertToPx(element, value) {\n            var units = value.replace(/[0-9]*/, '');\n            value = parseFloat(value);\n            switch (units) {\n                case \"px\":\n                    return value;\n                case \"em\":\n                    return value * getEmSize(element);\n                case \"rem\":\n                    return value * getEmSize();\n                // Viewport units!\n                // According to http://quirksmode.org/mobile/tableViewport.html\n                // documentElement.clientWidth/Height gets us the most reliable info\n                case \"vw\":\n                    return value * document.documentElement.clientWidth / 100;\n                case \"vh\":\n                    return value * document.documentElement.clientHeight / 100;\n                case \"vmin\":\n                case \"vmax\":\n                    var vw = document.documentElement.clientWidth / 100;\n                    var vh = document.documentElement.clientHeight / 100;\n                    var chooser = Math[units === \"vmin\" ? \"min\" : \"max\"];\n                    return value * chooser(vw, vh);\n                default:\n                    return value;\n                // for now, not supporting physical units (since they are just a set number of px)\n                // or ex/ch (getting accurate measurements is hard)\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         * @constructor\n         */\n        function SetupInformation(element) {\n            this.element   = element;\n            this.options   = {};\n            var key, option, width = 0, height = 0, value, actualValue, attrValues, attrValue, attrName;\n\n            /**\n             * @param {Object} option {mode: 'min|max', property: 'width|height', value: '123px'}\n             */\n            this.addOption = function(option) {\n                var idx = [option.mode, option.property, option.value].join(',');\n                this.options[idx] = option;\n            };\n\n            var attributes = ['min-width', 'min-height', 'max-width', 'max-height'];\n\n            /**\n             * Extracts the computed width/height and sets to min/max- attribute.\n             */\n            this.call = function() {\n                // extract current dimensions\n                width = this.element.offsetWidth;\n                height = this.element.offsetHeight;\n\n                attrValues = {};\n\n                for (key in this.options) {\n                    if (!this.options.hasOwnProperty(key)){\n                        continue;\n                    }\n                    option = this.options[key];\n\n                    value = convertToPx(this.element, option.value);\n\n                    actualValue = option.property == 'width' ? width : height;\n                    attrName = option.mode + '-' + option.property;\n                    attrValue = '';\n\n                    if (option.mode == 'min' && actualValue >= value) {\n                        attrValue += option.value;\n                    }\n\n                    if (option.mode == 'max' && actualValue <= value) {\n                        attrValue += option.value;\n                    }\n\n                    if (!attrValues[attrName]) attrValues[attrName] = '';\n                    if (attrValue && -1 === (' '+attrValues[attrName]+' ').indexOf(' ' + attrValue + ' ')) {\n                        attrValues[attrName] += ' ' + attrValue;\n                    }\n                }\n\n                for (var k in attributes) {\n                    if (attrValues[attributes[k]]) {\n                        this.element.setAttribute(attributes[k], attrValues[attributes[k]].substr(1));\n                    } else {\n                        this.element.removeAttribute(attributes[k]);\n                    }\n                }\n            };\n        }\n\n        /**\n         * @param {HTMLElement} element\n         * @param {Object}      options\n         */\n        function setupElement(element, options) {\n            if (element.elementQueriesSetupInformation) {\n                element.elementQueriesSetupInformation.addOption(options);\n            } else {\n                element.elementQueriesSetupInformation = new SetupInformation(element);\n                element.elementQueriesSetupInformation.addOption(options);\n                element.elementQueriesSensor = new ResizeSensor(element, function() {\n                    element.elementQueriesSetupInformation.call();\n                });\n            }\n            element.elementQueriesSetupInformation.call();\n\n            if (this.withTracking) {\n                elements.push(element);\n            }\n        }\n\n        /**\n         * @param {String} selector\n         * @param {String} mode min|max\n         * @param {String} property width|height\n         * @param {String} value\n         */\n        function queueQuery(selector, mode, property, value) {\n            var query;\n            if (document.querySelectorAll) query = document.querySelectorAll.bind(document);\n            if (!query && 'undefined' !== typeof $$) query = $$;\n            if (!query && 'undefined' !== typeof jQuery) query = jQuery;\n\n            if (!query) {\n                throw 'No document.querySelectorAll, jQuery or Mootools\\'s $$ found.';\n            }\n\n            var elements = query(selector);\n            for (var i = 0, j = elements.length; i < j; i++) {\n                setupElement(elements[i], {\n                    mode: mode,\n                    property: property,\n                    value: value\n                });\n            }\n        }\n\n        var regex = /,?([^,\\n]*)\\[[\\s\\t]*(min|max)-(width|height)[\\s\\t]*[~$\\^]?=[\\s\\t]*\"([^\"]*)\"[\\s\\t]*]([^\\n\\s\\{]*)/mgi;\n\n        /**\n         * @param {String} css\n         */\n        function extractQuery(css) {\n            var match;\n            css = css.replace(/'/g, '\"');\n            while (null !== (match = regex.exec(css))) {\n                if (5 < match.length) {\n                    queueQuery(match[1] || match[5], match[2], match[3], match[4]);\n                }\n            }\n        }\n\n        /**\n         * @param {CssRule[]|String} rules\n         */\n        function readRules(rules)\n        {\n            if (!rules) {\n                return;\n            }\n\n            if ('string' === typeof rules)\n            {\n                rules = rules.toLowerCase();\n\n                if (-1 !== rules.indexOf('min-width') || -1 !== rules.indexOf('max-width')) {\n                    extractQuery(rules);\n                }\n\n                return;\n            }\n\n            var selector = '';\n\n            for ( var i = 0, j = rules.length; i < j; i++ )\n            {\n                if ( 1 === rules[i].type )\n                {\n                    selector = rules[i].selectorText || rules[i].cssText;\n\n                    if ( -1 !== selector.indexOf('min-height') ||\n                         -1 !== selector.indexOf('max-height'))\n                    {\n                        extractQuery(selector);\n\n                    } else if ( -1 !== selector.indexOf('min-width') ||\n                                -1 !== selector.indexOf('max-width'))\n                    {\n                        extractQuery(selector);\n                    }\n\n                } else if ( 4 === rules[i].type )\n                {\n                    readRules( rules[i].cssRules || rules[i].rules );\n                }\n            }\n        }\n\n        /**\n         * Searches all css rules and setups the event listener to all elements with element query rules..\n         *\n         * @param {Boolean} withTracking allows and requires you to use detach, since we store internally all used elements\n         *                               (no garbage collection possible if you don not call .detach() first)\n         */\n        this.init = function(withTracking)\n        {\n            var i, j, Sheet;\n            this.withTracking = withTracking;\n\n            for ( i = 0, j = document.styleSheets.length; i < j; i++ )\n            {\n                try\n                {\n                    Sheet = document.styleSheets[i];\n\n                    if ( typeof Sheet.href === 'string' &&\n                         typeof this.sheetList[ Sheet.href ] !== 'undefined' )\n                    {\n                        continue;\n                    }\n\n                    readRules( Sheet.cssText || Sheet.cssRules || Sheet.rules );\n\n                    this.sheetList[ Sheet.href ] = true;\n\n                } catch ( e ) {}\n            }\n        };\n\n        /**\n         *\n         * @param {Boolean} withTracking allows and requires you to use detach, since we store internally all used elements\n         *                               (no garbage collection possible if you don not call .detach() first)\n         */\n        this.update = function(withTracking) {\n            this.withTracking = withTracking;\n            this.init();\n        };\n\n        this.detach = function() {\n            if (!this.withTracking) {\n                throw 'withTracking is not enabled. We can not detach elements since we don not store it.' +\n                'Use ElementQueries.withTracking = true; before domready.';\n            }\n\n            var element;\n            while (element = elements.pop()) {\n                ElementQueries.detach(element);\n            }\n\n            elements = [];\n        };\n    };\n\n    /**\n     *\n     * @param {Boolean} withTracking allows and requires you to use detach, since we store internally all used elements\n     *                               (no garbage collection possible if you don not call .detach() first)\n     */\n    ElementQueries.update = function(withTracking) {\n        ElementQueries.instance.update(withTracking);\n    };\n\n    /**\n     * Removes all sensor and elementquery information from the element.\n     *\n     * @param {HTMLElement} element\n     */\n    ElementQueries.detach = function(element) {\n        if (element.elementQueriesSetupInformation) {\n            element.elementQueriesSensor.detach();\n            delete element.elementQueriesSetupInformation;\n            delete element.elementQueriesSensor;\n            console.log('detached');\n        } else {\n            console.log('detached already', element);\n        }\n    };\n\n    ElementQueries.withTracking = false;\n\n    ElementQueries.init = function() {\n        if (!ElementQueries.instance) {\n            ElementQueries.instance = new ElementQueries();\n        }\n\n        ElementQueries.instance.init(ElementQueries.withTracking);\n    };\n\n    var domLoaded = function (callback) {\n        /* Internet Explorer */\n        /*@cc_on\n         @if (@_win32 || @_win64)\n         document.write('<script id=\"ieScriptLoad\" defer src=\"//:\"><\\/script>');\n         var iesLoad = document.getElementById('ieScriptLoad');\n         if ( !iesLoad ) {\n         document.addEvent('ready', function() {\n         callback();\n         });\n         } else {\n         iesLoad.onreadystatechange = function() {\n         if (this.readyState == 'complete') {\n         callback();\n         }\n         };\n         }\n         @end @*/\n        /* Mozilla, Chrome, Opera */\n        if (document.addEventListener) {\n            document.addEventListener('DOMContentLoaded', callback, false);\n        }\n        /* Safari, iCab, Konqueror */\n        if (/KHTML|WebKit|iCab/i.test(navigator.userAgent)) {\n            var DOMLoadTimer = setInterval(function () {\n                if (/loaded|complete/i.test(document.readyState)) {\n                    callback();\n                    clearInterval(DOMLoadTimer);\n                }\n            }, 10);\n        }\n        /* Other web browsers */\n        window.onload = callback;\n    };\n\n    if (window.addEventListener) {\n        window.addEventListener('load', ElementQueries.init, false);\n    } else {\n        window.attachEvent('onload', ElementQueries.init);\n    }\n    domLoaded(ElementQueries.init);\n\n})();\n\ndefine(\"qui/lib/element-query/ElementQuery\", function(){});\n\n"]}