{"version":3,"file":"ResizeSensor.js","sources":["ResizeSensor.js"],"names":[],"mappings":"CAMA,WAUA,KAAA,aAAA,SAAA,EAAA,GAOA,QAAA,GAAA,EAAA,GACA,OAAA,cAEA,EAAA,iBAAA,kBAAA,SAAA,GACA,EAAA,KAAA,KAAA,MAGA,EAAA,iBAAA,WAAA,SAAA,GACA,EAAA,KAAA,KAAA,KAEA,EAAA,iBAAA,YAAA,SAAA,GACA,EAAA,KAAA,KAAA,MASA,QAAA,KACA,KAAA,KACA,KAAA,IAAA,SAAA,GACA,KAAA,EAAA,KAAA,GAGA,IAAA,GAAA,CACA,MAAA,KAAA,WACA,IAAA,EAAA,EAAA,EAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IACA,KAAA,EAAA,GAAA,QAUA,QAAA,GAAA,EAAA,GACA,MAAA,GAAA,aACA,EAAA,aAAA,GACA,OAAA,iBACA,OAAA,iBAAA,EAAA,MAAA,iBAAA,GAEA,EAAA,MAAA,GASA,QAAA,GAAA,EAAA,GAiDA,QAAA,KACA,GAAA,IAAA,EACA,EAAA,EAAA,aAAA,YACA,EAAA,EAAA,aAAA,YAcA,OAZA,IAAA,IACA,EAAA,MAAA,EAAA,EAAA,KACA,EAAA,MAAA,EAAA,EAAA,KACA,GAAA,EACA,EAAA,GAEA,GAAA,IACA,EAAA,OAAA,EAAA,EAAA,KACA,EAAA,OAAA,EAAA,EAAA,KACA,GAAA,EACA,EAAA,GAEA,EAjEA,GAAA,EAAA,iBAGA,GAAA,EAAA,gBAEA,WADA,GAAA,gBAAA,IAAA,OAHA,GAAA,gBAAA,GAAA,GACA,EAAA,gBAAA,IAAA,EAMA,IAAA,YAAA,GAEA,EAAA,YACA,EAAA,YAAA,WAAA,WACA,EAAA,gBAAA,SAEA,EAAA,kBACA,EAAA,iBAAA,SAAA,WACA,EAAA,gBAAA,aAGA,CACA,GAAA,GAAA,WACA,KACA,EAAA,gBAAA,OAGA,GAAA,aAAA,SAAA,cAAA,OACA,EAAA,aAAA,UAAA,eACA,IAAA,GACA,0FACA,GAAA,aAAA,MAAA,QAAA,EACA,EAAA,aAAA,UACA,8CAAA,EAAA,kEAGA,EAAA,sBAGA,EAAA,YAAA,EAAA,cAEA,aAAA,EAAA,EAAA,cACA,EAAA,MAAA,SAAA,WAGA,IAAA,GAAA,GACA,EAAA,GACA,EAAA,EAAA,aAAA,kBAAA,WAAA,MACA,EAAA,EAAA,aAAA,iBAAA,WAAA,KAsBA,KACA,EAAA,EAAA,aAAA,GACA,EAAA,EAAA,aAAA,kBAAA,GACA,EAAA,EAAA,aAAA,iBAAA,IAIA,GAAA,eAAA,IACA,mBAAA,SAAA,YAAA,SACA,mBAAA,WAAA,YAAA,UAGA,IADA,GAAA,GAAA,EAAA,EAAA,EAAA,OACA,EAAA,EAAA,IACA,EAAA,EAAA,GAAA,OAGA,GAAA,EAAA,OAKA,OAAA,uBAAA","sourcesContent":["/**\n * Copyright 2013 Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n;\n(function() {\n\n    /**\n     * Class for dimension change detection.\n     *\n     * @param {Element|Element[]|Elements|jQuery} element\n     * @param {Function} callback\n     *\n     * @constructor\n     */\n    this.ResizeSensor = function(element, callback) {\n        /**\n         * Adds a listener to the over/under-flow event.\n         *\n         * @param {HTMLElement} element\n         * @param {Function}    callback\n         */\n        function addResizeListener(element, callback) {\n            if (window.OverflowEvent) {\n                //webkit\n                element.addEventListener('overflowchanged', function(e) {\n                    callback.call(this, e);\n                });\n            } else {\n                element.addEventListener('overflow', function(e) {\n                    callback.call(this, e);\n                });\n                element.addEventListener('underflow', function(e) {\n                    callback.call(this, e);\n                });\n            }\n        }\n\n        /**\n         *\n         * @constructor\n         */\n        function EventQueue() {\n            this.q = [];\n            this.add = function(ev) {\n                this.q.push(ev);\n            };\n\n            var i, j;\n            this.call = function() {\n                for (i = 0, j = this.q.length; i < j; i++) {\n                    this.q[i].call();\n                }\n            };\n        }\n\n        /**\n         * @param {HTMLElement} element\n         * @param {String}      prop\n         * @returns {String|Number}\n         */\n        function getComputedStyle(element, prop) {\n            if (element.currentStyle) {\n                return element.currentStyle[prop];\n            } else if (window.getComputedStyle) {\n                return window.getComputedStyle(element, null).getPropertyValue(prop);\n            } else {\n                return element.style[prop];\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         * @param {Function}    resized\n         */\n        function attachResizeEvent(element, resized) {\n            if (!element.resizedAttached) {\n                element.resizedAttached = new EventQueue();\n                element.resizedAttached.add(resized);\n            } else if (element.resizedAttached) {\n                element.resizedAttached.add(resized);\n                return;\n            }\n\n            if ('onresize' in element) {\n                //internet explorer\n                if (element.attachEvent) {\n                    element.attachEvent('onresize', function() {\n                        element.resizedAttached.call();\n                    });\n                } else if (element.addEventListener) {\n                    element.addEventListener('resize', function(){\n                        element.resizedAttached.call();\n                    });\n                }\n            } else {\n                var myResized = function() {\n                    if (setupSensor()) {\n                        element.resizedAttached.call();\n                    }\n                };\n                element.resizeSensor = document.createElement('div');\n                element.resizeSensor.className = 'resize-sensor';\n                var style =\n                    'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1;';\n                element.resizeSensor.style.cssText = style;\n                element.resizeSensor.innerHTML =\n                    '<div class=\"resize-sensor-overflow\" style=\"' + style + '\">' +\n                        '<div></div>' +\n                        '</div>' +\n                        '<div class=\"resize-sensor-underflow\" style=\"' + style + '\">' +\n                        '<div></div>' +\n                        '</div>';\n                element.appendChild(element.resizeSensor);\n\n                if ('absolute' !== getComputedStyle(element, 'position')) {\n                    element.style.position = 'relative';\n                }\n\n                var x = -1,\n                    y = -1,\n                    firstStyle = element.resizeSensor.firstElementChild.firstChild.style,\n                    lastStyle = element.resizeSensor.lastElementChild.firstChild.style;\n\n                function setupSensor() {\n                    var change = false,\n                        width = element.resizeSensor.offsetWidth,\n                        height = element.resizeSensor.offsetHeight;\n\n                    if (x != width) {\n                        firstStyle.width = (width - 1) + 'px';\n                        lastStyle.width = (width + 1) + 'px';\n                        change = true;\n                        x = width;\n                    }\n                    if (y != height) {\n                        firstStyle.height = (height - 1) + 'px';\n                        lastStyle.height = (height + 1) + 'px';\n                        change = true;\n                        y = height;\n                    }\n                    return change;\n                }\n\n                setupSensor();\n                addResizeListener(element.resizeSensor, myResized);\n                addResizeListener(element.resizeSensor.firstElementChild, myResized);\n                addResizeListener(element.resizeSensor.lastElementChild, myResized);\n            }\n        }\n\n        if ('array' === typeof element\n            || ('undefined' !== typeof jQuery && element instanceof jQuery) //jquery\n            || ('undefined' !== typeof Elements && element instanceof Elements) //mootools\n            ) {\n            var i = 0, j = element.length;\n            for (; i < j; i++) {\n                attachResizeEvent(element[i], callback);\n            }\n        } else {\n            attachResizeEvent(element, callback);\n        }\n    }\n\n})();\ndefine(\"qui/lib/ResizeSensor\", function(){});\n\n"]}