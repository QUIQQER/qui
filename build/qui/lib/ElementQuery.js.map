{"version":3,"file":"ElementQuery.js","sources":["ElementQuery.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n;\n(function() {\n    /**\n     *\n     * @type {Function}\n     * @constructor\n     */\n    var ElementQueries = this.ElementQueries = function() {\n        /**\n         *\n         * @param element\n         * @returns {Number}\n         */\n        function getEmSize(element) {\n            if (!element) {\n                element = document.documentElement;\n            }\n            var fontSize = getComputedStyle(element, 'fontSize');\n            return parseFloat(fontSize) || 16;\n        }\n\n        /**\n         *\n         * @copyright https://github.com/Mr0grog/element-query/blob/master/LICENSE\n         *\n         * @param element\n         * @param value\n         * @param units\n         * @returns {*}\n         */\n        function convertToPx(element, value) {\n            var units = value.replace(/[0-9]*/, '');\n            value = parseFloat(value);\n            switch (units) {\n                case \"px\":\n                    return value;\n                case \"em\":\n                    return value * getEmSize(element);\n                case \"rem\":\n                    return value * getEmSize();\n                // Viewport units!\n                // According to http://quirksmode.org/mobile/tableViewport.html\n                // documentElement.clientWidth/Height gets us the most reliable info\n                case \"vw\":\n                    return value * document.documentElement.clientWidth / 100;\n                case \"vh\":\n                    return value * document.documentElement.clientHeight / 100;\n                case \"vmin\":\n                case \"vmax\":\n                    var vw = document.documentElement.clientWidth / 100;\n                    var vh = document.documentElement.clientHeight / 100;\n                    var chooser = Math[units === \"vmin\" ? \"min\" : \"max\"];\n                    return value * chooser(vw, vh);\n                default:\n                    return value;\n                // for now, not supporting physical units (since they are just a set number of px)\n                // or ex/ch (getting accurate measurements is hard)\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         * @constructor\n         */\n        function SetupInformation(element) {\n            this.element = element;\n            this.options = [];\n            var i, j, option, width = 0, height = 0, value, actualValue, attrValues, attrValue, attrName;\n\n            /**\n             * @param option {mode: 'min|max', property: 'width|height', value: '123px'}\n             */\n            this.addOption = function(option) {\n                this.options.push(option);\n            }\n\n            var attributes = ['min-width', 'min-height', 'max-width', 'max-height'];\n\n            /**\n             * Extracts the computed width/height and sets to min/max- attribute.\n             */\n            this.call = function() {\n                // extract current dimensions\n                width = this.element.offsetWidth;\n                height = this.element.offsetHeight;\n\n                attrValues = {};\n\n                for (i = 0, j = this.options.length; i < j; i++) {\n                    option = this.options[i];\n                    value = convertToPx(this.element, option.value);\n\n                    actualValue = option.property == 'width' ? width : height;\n                    attrName = option.mode + '-' + option.property;\n                    attrValue = '';\n\n                    if (option.mode == 'min' && actualValue >= value) {\n                        attrValue += option.value;\n                    }\n\n                    if (option.mode == 'max' && actualValue <= value) {\n                        attrValue += option.value;\n                    }\n\n                    if (!attrValues[attrName]) attrValues[attrName] = '';\n                    if (attrValue && -1 === (' '+attrValues[attrName]+' ').indexOf(' ' + attrValue + ' ')) {\n                        attrValues[attrName] += ' ' + attrValue;\n                    }\n                }\n\n                for (var k in attributes) {\n                    if (attrValues[attributes[k]]) {\n                        this.element.setAttribute(attributes[k], attrValues[attributes[k]].substr(1));\n                    } else {\n                        this.element.removeAttribute(attributes[k]);\n                    }\n                }\n            };\n        }\n\n        /**\n         * @param {HTMLElement} element\n         * @param {Object}      options\n         */\n        function setupElement(element, options) {\n            if (element.elementQueriesSetupInformation) {\n                element.elementQueriesSetupInformation.addOption(options);\n            } else {\n                element.elementQueriesSetupInformation = new SetupInformation(element);\n                element.elementQueriesSetupInformation.addOption(options);\n                new ResizeSensor(element, function() {\n                    element.elementQueriesSetupInformation.call();\n                });\n            }\n            element.elementQueriesSetupInformation.call();\n        }\n\n        /**\n         * @param {String} selector\n         * @param {String} mode min|max\n         * @param {String} property width|height\n         * @param {String} value\n         */\n        function queueQuery(selector, mode, property, value) {\n            var query = document.querySelectorAll;\n            if ('undefined' !== typeof $$) query = $$;\n            if ('undefined' !== typeof jQuery) query = jQuery;\n\n            if (!query) {\n                throw 'No document.querySelectorAll, jQuery or Mootools\\'s $$ found.';\n            }\n\n            var elements = query(selector);\n            for (var i = 0, j = elements.length; i < j; i++) {\n                setupElement(elements[i], {\n                    mode: mode,\n                    property: property,\n                    value: value\n                });\n            }\n        }\n\n        var regex = /,?([^,\\n]*)\\[[\\s\\t]*(min|max)-(width|height)[\\s\\t]*[~$\\^]?=[\\s\\t]*\"([^\"]*)\"[\\s\\t]*]([^\\n\\s\\{]*)/mgi;\n\n        /**\n         * @param {String} css\n         */\n        function extractQuery(css) {\n            var match;\n            css = css.replace(/'/g, '\"');\n            while (null !== (match = regex.exec(css))) {\n                if (5 < match.length) {\n                    queueQuery(match[1] || match[5], match[2], match[3], match[4]);\n                }\n            }\n        }\n\n        /**\n         * @param {CssRule[]|String} rules\n         */\n        function readRules(rules) {\n            var selector = '';\n            if (!rules) {\n                return;\n            }\n            if ('string' === typeof rules) {\n                rules = rules.toLowerCase();\n                if (-1 !== rules.indexOf('min-width') || -1 !== rules.indexOf('max-width')) {\n                    extractQuery(rules);\n                }\n            } else {\n                for (var i = 0, j = rules.length; i < j; i++) {\n                    if (1 === rules[i].type) {\n                        selector = rules[i].selectorText || rules[i].cssText;\n                        if (-1 !== selector.indexOf('min-width') || -1 !== selector.indexOf('max-width')) {\n                            extractQuery(selector);\n                        }\n                    } else if (4 === rules[i].type) {\n                        readRules(rules[i].cssRules || rules[i].rules);\n                    }\n                }\n            }\n        }\n\n        /**\n         * Searches all css rules and setups the event listener to all elements with element query rules..\n         */\n        this.init = function()\n        {\n            for (var i = 0, j = document.styleSheets.length; i < j; i++)\n            {\n                try\n                {\n                    readRules(document.styleSheets[i].cssText || document.styleSheets[i].cssRules || document.styleSheets[i].rules);\n                } catch (e) {\n\n                }\n            }\n        }\n    }\n\n    function init() {\n        new ElementQueries().init();\n    }\n\n    if (window.addEventListener) {\n        window.addEventListener('load', init, false);\n    } else {\n        window.attachEvent('onload', init);\n    }\n\n})();\ndefine(\"qui/lib/ElementQuery\", function(){});\n\n"]}