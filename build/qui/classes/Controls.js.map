{"version":3,"file":"Controls.js","sources":["DOM.js","../lib/element-query/ElementQuery.js","../lib/element-query/ResizeSensor.js","Controls.js"],"names":[],"mappings":"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","sourcesContent":["\n/**\n * The DOM class emulate similar methods\n * like a DOMNode to a normal Object\n *\n * Its easy to use and most classes inherit from {qui/classes/DOM}\n * All objects that inherited from {qui/classes/DOM} can easily extend with Attributes.\n *\n * @module qui/classes/DOM\n * @author www.quiqqer.com (Henning Leutz)\n *\n * @event onDestroy [this]\n * @event onSetAttribute [key, value]\n */\n\ndefine('qui/classes/DOM', [],function()\n{\n    \"use strict\";\n\n    window.$quistorage = {};\n\n    /**\n     * The DOM class emulate similar methods\n     * like a DOMNode to a normal Object\n     *\n     * @class qui/classes/DOM\n     *\n     * @param {Object} options -\n     *         With options you can set attributes or extend the Object width methods and events\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Implements : [ Options, Events ],\n        Type       : 'qui/classes/DOM',\n\n        options : {},\n        $uid    : null,\n\n        initialize : function(options)\n        {\n            options = options || {};\n\n            if ( options.events )\n            {\n                this.addEvents( options.events );\n                delete options.events;\n            }\n\n            if ( options.methods )\n            {\n                Object.append( this, options.methods );\n                delete options.methods;\n            }\n\n            this.setAttributes( options );\n            this.fireEvent( 'init', [ this ] );\n        },\n\n        /**\n         * If this.TYPE is set, this.Type will be return\n         *\n         * @method qui/classes/DOM#$family\n         * @return {String} Type of the Object\n         * @ignore\n         */\n        $family : function()\n        {\n            if ( typeof this.Type !== 'undefined' ) {\n                return this.Type;\n            }\n\n            return typeOf( this );\n        },\n\n        /**\n         * Get the Unique ID from the Object\n         *\n         * @method qui/classes/DOM#getId\n         * @return {String} Object ID\n         */\n        getId : function()\n        {\n            if ( !this.$uid ) {\n                this.$uid = String.uniqueID();\n            }\n\n            return this.$uid;\n        },\n\n        /**\n         * Get the type from the Object\n         *\n         * @method qui/classes/DOM#getType\n         * @return {String} The type of the object\n         */\n        getType : function()\n        {\n            return typeOf( this );\n        },\n\n        /**\n         * Set an attribute to the Object\n         * You can extend the Object with everything you like\n         * You can extend the Object width more than the default options\n         *\n         * @method qui/classes/DOM#setAttribute\n         *\n         * @param {String} k - Name of the Attribute\n         * @param {Object|String|Number|Array} v - value\n         *\n         * @return {Object} this (qui/classes/DOM)\n         */\n        setAttribute : function(k, v)\n        {\n            this.fireEvent('setAttribute', [ k, v ]);\n\n            if ( typeof this.options[ k ] !== 'undefined' )\n            {\n                this.options[ k ] = v;\n                return this;\n            }\n\n            var oid = Slick.uidOf( this );\n\n            if ( typeof window.$quistorage[ oid ] === 'undefined' ) {\n                window.$quistorage[ oid ] = {};\n            }\n\n            window.$quistorage[ oid ][ k ] = v;\n\n            return this;\n        },\n\n        /**\n         * Destroy the Object and all relationsships to some Object\n         *\n         * @method qui/classes/DOM#destroy\n         */\n        destroy : function()\n        {\n            this.fireEvent( 'destroy', [ this ] );\n\n            // storage clear\n            var oid = Slick.uidOf( this );\n\n            if ( oid in window.$quistorage ) {\n                delete window.$quistorage[ oid ];\n            }\n\n            this.removeEvents();\n        },\n\n        /**\n         * Alias for setAttributes, please use setAttributes()\n         *\n         * @see qui/classes/DOM#setAttributes()\n         * @method qui/classes/DOM#setOptions\n         */\n        setOptions : function(options)\n        {\n            this.setAttributes( options );\n        },\n\n        /**\n         * If you want set more than one attribute\n         *\n         * @method qui/classes/DOM#setAttributes\n         *\n         * @param {Object} attributes - Object with attributes\n         * @return {Object} this (qui/classes/DOM)\n         *\n         * @example Object.setAttributes({\n         *   attr1 : '1',\n         *   attr2 : []\n         * })\n         */\n        setAttributes : function(attributes)\n        {\n            attributes = attributes || {};\n\n            for ( var k in attributes )\n            {\n                if ( attributes.hasOwnProperty( k ) ) {\n                    this.setAttribute( k, attributes[k] );\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * Return an attribute of the Object\n         * returns the \"not default attributes\", too\n         *\n         * @method qui/classes/DOM#setAttribute\n         * @param {String} k - name of the attribute\n         * @return {String|Boolean|Array|Object} attribute\n         */\n        getAttribute : function(k)\n        {\n            if ( k in this.options ) {\n                return this.options[ k ];\n            }\n\n            var oid = Slick.uidOf( this );\n\n            if ( typeof window.$quistorage[ oid ] === 'undefined' ) {\n                return false;\n            }\n\n            if ( typeof window.$quistorage[ oid ][ k ] !== 'undefined' ) {\n                return window.$quistorage[ oid ][ k ];\n            }\n\n            return false;\n        },\n\n        /**\n         * Alias for getAttributes, please use getAttributes()\n         *\n         * @method qui/classes/DOM#getAllAttributes\n         * @see qui/classes/DOM#getAttributes()\n         * @deprecated\n         */\n        getAllAttributes : function()\n        {\n            return this.getAttributes();\n        },\n\n        /**\n         * Return the default attributes\n         *\n         * @method qui/classes/DOM#getAttributes\n         * @return {Object} attributes\n         */\n        getAttributes : function()\n        {\n            return this.options;\n        },\n\n        /**\n         * Return the attributes which stored into the QUI Storage\n         *\n         * @return {Object}\n         */\n        getStorageAttributes : function()\n        {\n            var oid = Slick.uidOf( this );\n\n            if ( oid in window.$quistorage  ) {\n                return window.$quistorage[ oid ];\n            }\n\n            return {};\n        },\n\n        /**\n         * Return true if a attribute exist\n         *\n         * @method qui/classes/DOM#existAttribute\n         * @param {String} k - wanted attribute\n         * @return {Boolean} true or false\n         */\n        existAttribute : function(k)\n        {\n            if ( typeof this.options[ k ] !== 'undefined' ) {\n                return true;\n            }\n\n            var oid = Slick.uidOf( this );\n\n            return window.$quistorage[ oid ] && window.$quistorage[ oid ][ k ];\n        },\n\n        /**\n         * Return the binded functions of the event name\n         *\n         * @method qui/classes/DOM#existAttribute\n         * @param {String} eventname - wanted event\n         * @return {Array|Boolean} Event list\n         */\n        getEvents : function(eventname)\n        {\n            if ( typeof this.$events === 'undefined') {\n                return false;\n            }\n\n            if ( typeof this.$events[ eventname ] !== 'undefined') {\n                return this.$events[ eventname ];\n            }\n\n            return false;\n        }\n    });\n});\n\n","/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n *\n * links:\n * https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors\n * https://github.com/marcj/css-element-queries/issues/28#issuecomment-67327416\n */\n\n(function() {\n    /**\n     *\n     * @type {Function}\n     * @constructor\n     */\n    var ElementQueries = this.ElementQueries = function() {\n\n        this.sheetList    = {};\n        this.withTracking = false;\n        var elements = [];\n\n        /**\n         *\n         * @param element\n         * @returns {Number}\n         */\n        function getEmSize(element) {\n            if (!element) {\n                element = document.documentElement;\n            }\n            var fontSize = getComputedStyle(element, 'fontSize');\n            return parseFloat(fontSize) || 16;\n        }\n\n        /**\n         *\n         * @copyright https://github.com/Mr0grog/element-query/blob/master/LICENSE\n         *\n         * @param {HTMLElement} element\n         * @param {*} value\n         * @returns {*}\n         */\n        function convertToPx(element, value) {\n            var units = value.replace(/[0-9]*/, '');\n            value = parseFloat(value);\n            switch (units) {\n                case \"px\":\n                    return value;\n                case \"em\":\n                    return value * getEmSize(element);\n                case \"rem\":\n                    return value * getEmSize();\n                // Viewport units!\n                // According to http://quirksmode.org/mobile/tableViewport.html\n                // documentElement.clientWidth/Height gets us the most reliable info\n                case \"vw\":\n                    return value * document.documentElement.clientWidth / 100;\n                case \"vh\":\n                    return value * document.documentElement.clientHeight / 100;\n                case \"vmin\":\n                case \"vmax\":\n                    var vw = document.documentElement.clientWidth / 100;\n                    var vh = document.documentElement.clientHeight / 100;\n                    var chooser = Math[units === \"vmin\" ? \"min\" : \"max\"];\n                    return value * chooser(vw, vh);\n                default:\n                    return value;\n                // for now, not supporting physical units (since they are just a set number of px)\n                // or ex/ch (getting accurate measurements is hard)\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         * @constructor\n         */\n        function SetupInformation(element) {\n            this.element   = element;\n            this.options   = {};\n            var key, option, width = 0, height = 0, value, actualValue, attrValues, attrValue, attrName;\n\n            /**\n             * @param {Object} option {mode: 'min|max', property: 'width|height', value: '123px'}\n             */\n            this.addOption = function(option) {\n                var idx = [option.mode, option.property, option.value].join(',');\n                this.options[idx] = option;\n            };\n\n            var attributes = ['min-width', 'min-height', 'max-width', 'max-height'];\n\n            /**\n             * Extracts the computed width/height and sets to min/max- attribute.\n             */\n            this.call = function() {\n                // extract current dimensions\n                width = this.element.offsetWidth;\n                height = this.element.offsetHeight;\n\n                attrValues = {};\n\n                for (key in this.options) {\n                    if (!this.options.hasOwnProperty(key)){\n                        continue;\n                    }\n                    option = this.options[key];\n\n                    value = convertToPx(this.element, option.value);\n\n                    actualValue = option.property == 'width' ? width : height;\n                    attrName = option.mode + '-' + option.property;\n                    attrValue = '';\n\n                    if (option.mode == 'min' && actualValue >= value) {\n                        attrValue += option.value;\n                    }\n\n                    if (option.mode == 'max' && actualValue <= value) {\n                        attrValue += option.value;\n                    }\n\n                    if (!attrValues[attrName]) attrValues[attrName] = '';\n                    if (attrValue && -1 === (' '+attrValues[attrName]+' ').indexOf(' ' + attrValue + ' ')) {\n                        attrValues[attrName] += ' ' + attrValue;\n                    }\n                }\n\n                for (var k in attributes) {\n                    if (attrValues[attributes[k]]) {\n                        this.element.setAttribute(attributes[k], attrValues[attributes[k]].substr(1));\n                    } else {\n                        this.element.removeAttribute(attributes[k]);\n                    }\n                }\n            };\n        }\n\n        /**\n         * @param {HTMLElement} element\n         * @param {Object}      options\n         */\n        function setupElement(element, options) {\n            if (element.elementQueriesSetupInformation) {\n                element.elementQueriesSetupInformation.addOption(options);\n            } else {\n                element.elementQueriesSetupInformation = new SetupInformation(element);\n                element.elementQueriesSetupInformation.addOption(options);\n                element.elementQueriesSensor = new ResizeSensor(element, function() {\n                    element.elementQueriesSetupInformation.call();\n                });\n            }\n            element.elementQueriesSetupInformation.call();\n\n            if (this.withTracking) {\n                elements.push(element);\n            }\n        }\n\n        /**\n         * @param {String} selector\n         * @param {String} mode min|max\n         * @param {String} property width|height\n         * @param {String} value\n         */\n        function queueQuery(selector, mode, property, value) {\n            var query;\n            if (document.querySelectorAll) query = document.querySelectorAll.bind(document);\n            if (!query && 'undefined' !== typeof $$) query = $$;\n            if (!query && 'undefined' !== typeof jQuery) query = jQuery;\n\n            if (!query) {\n                throw 'No document.querySelectorAll, jQuery or Mootools\\'s $$ found.';\n            }\n\n            var elements = query(selector);\n            for (var i = 0, j = elements.length; i < j; i++) {\n                setupElement(elements[i], {\n                    mode: mode,\n                    property: property,\n                    value: value\n                });\n            }\n        }\n\n        var regex = /,?([^,\\n]*)\\[[\\s\\t]*(min|max)-(width|height)[\\s\\t]*[~$\\^]?=[\\s\\t]*\"([^\"]*)\"[\\s\\t]*]([^\\n\\s\\{]*)/mgi;\n\n        /**\n         * @param {String} css\n         */\n        function extractQuery(css) {\n            var match;\n            css = css.replace(/'/g, '\"');\n            while (null !== (match = regex.exec(css))) {\n                if (5 < match.length) {\n                    queueQuery(match[1] || match[5], match[2], match[3], match[4]);\n                }\n            }\n        }\n\n        /**\n         * @param {CssRule[]|String} rules\n         */\n        function readRules(rules)\n        {\n            if (!rules) {\n                return;\n            }\n\n            if ('string' === typeof rules)\n            {\n                rules = rules.toLowerCase();\n\n                if (-1 !== rules.indexOf('min-width') || -1 !== rules.indexOf('max-width')) {\n                    extractQuery(rules);\n                }\n\n                return;\n            }\n\n            var selector = '';\n\n            for ( var i = 0, j = rules.length; i < j; i++ )\n            {\n                if ( 1 === rules[i].type )\n                {\n                    selector = rules[i].selectorText || rules[i].cssText;\n\n                    if ( -1 !== selector.indexOf('min-height') ||\n                         -1 !== selector.indexOf('max-height'))\n                    {\n                        extractQuery(selector);\n\n                    } else if ( -1 !== selector.indexOf('min-width') ||\n                                -1 !== selector.indexOf('max-width'))\n                    {\n                        extractQuery(selector);\n                    }\n\n                } else if ( 4 === rules[i].type )\n                {\n                    readRules( rules[i].cssRules || rules[i].rules );\n                }\n            }\n        }\n\n        /**\n         * Searches all css rules and setups the event listener to all elements with element query rules..\n         *\n         * @param {Boolean} withTracking allows and requires you to use detach, since we store internally all used elements\n         *                               (no garbage collection possible if you don not call .detach() first)\n         */\n        this.init = function(withTracking)\n        {\n            var i, j, Sheet;\n            this.withTracking = withTracking;\n\n            for ( i = 0, j = document.styleSheets.length; i < j; i++ )\n            {\n                try\n                {\n                    Sheet = document.styleSheets[i];\n\n                    if ( typeof Sheet.href === 'string' &&\n                         typeof this.sheetList[ Sheet.href ] !== 'undefined' )\n                    {\n                        continue;\n                    }\n\n                    readRules( Sheet.cssText || Sheet.cssRules || Sheet.rules );\n\n                    this.sheetList[ Sheet.href ] = true;\n\n                } catch ( e ) {}\n            }\n        };\n\n        /**\n         *\n         * @param {Boolean} withTracking allows and requires you to use detach, since we store internally all used elements\n         *                               (no garbage collection possible if you don not call .detach() first)\n         */\n        this.update = function(withTracking) {\n            this.withTracking = withTracking;\n            this.init();\n        };\n\n        this.detach = function() {\n            if (!this.withTracking) {\n                throw 'withTracking is not enabled. We can not detach elements since we don not store it.' +\n                'Use ElementQueries.withTracking = true; before domready.';\n            }\n\n            var element;\n            while (element = elements.pop()) {\n                ElementQueries.detach(element);\n            }\n\n            elements = [];\n        };\n    };\n\n    /**\n     *\n     * @param {Boolean} withTracking allows and requires you to use detach, since we store internally all used elements\n     *                               (no garbage collection possible if you don not call .detach() first)\n     */\n    ElementQueries.update = function(withTracking) {\n        ElementQueries.instance.update(withTracking);\n    };\n\n    /**\n     * Removes all sensor and elementquery information from the element.\n     *\n     * @param {HTMLElement} element\n     */\n    ElementQueries.detach = function(element) {\n        if (element.elementQueriesSetupInformation) {\n            element.elementQueriesSensor.detach();\n            delete element.elementQueriesSetupInformation;\n            delete element.elementQueriesSensor;\n            console.log('detached');\n        } else {\n            console.log('detached already', element);\n        }\n    };\n\n    ElementQueries.withTracking = false;\n\n    ElementQueries.init = function() {\n        if (!ElementQueries.instance) {\n            ElementQueries.instance = new ElementQueries();\n        }\n\n        ElementQueries.instance.init(ElementQueries.withTracking);\n    };\n\n    var domLoaded = function (callback) {\n        /* Internet Explorer */\n        /*@cc_on\n         @if (@_win32 || @_win64)\n         document.write('<script id=\"ieScriptLoad\" defer src=\"//:\"><\\/script>');\n         var iesLoad = document.getElementById('ieScriptLoad');\n         if ( !iesLoad ) {\n         document.addEvent('ready', function() {\n         callback();\n         });\n         } else {\n         iesLoad.onreadystatechange = function() {\n         if (this.readyState == 'complete') {\n         callback();\n         }\n         };\n         }\n         @end @*/\n        /* Mozilla, Chrome, Opera */\n        if (document.addEventListener) {\n            document.addEventListener('DOMContentLoaded', callback, false);\n        }\n        /* Safari, iCab, Konqueror */\n        if (/KHTML|WebKit|iCab/i.test(navigator.userAgent)) {\n            var DOMLoadTimer = setInterval(function () {\n                if (/loaded|complete/i.test(document.readyState)) {\n                    callback();\n                    clearInterval(DOMLoadTimer);\n                }\n            }, 10);\n        }\n        /* Other web browsers */\n        window.onload = callback;\n    };\n\n    if (window.addEventListener) {\n        window.addEventListener('load', ElementQueries.init, false);\n    } else {\n        window.attachEvent('onload', ElementQueries.init);\n    }\n    domLoaded(ElementQueries.init);\n\n})();\n\ndefine(\"qui/lib/element-query/ElementQuery\", function(){});\n\n","/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n\n(function() {\n\n    /**\n     * Class for dimension change detection.\n     *\n     * @param {Element|Element[]|Elements|jQuery} element\n     * @param {Function} callback\n     *\n     * @constructor\n     */\n    this.ResizeSensor = function(element, callback) {\n        /**\n         *\n         * @constructor\n         */\n        function EventQueue() {\n            this.q = [];\n            this.add = function(ev) {\n                this.q.push(ev);\n            };\n\n            var i, j;\n            this.call = function() {\n                for (i = 0, j = this.q.length; i < j; i++) {\n                    this.q[i].call();\n                }\n            };\n        }\n\n        /**\n         * @param {HTMLElement} element\n         * @param {String}      prop\n         * @returns {String|Number}\n         */\n        function getComputedStyle(element, prop) {\n            if (element.currentStyle) {\n                return element.currentStyle[prop];\n            } else if (window.getComputedStyle) {\n                return window.getComputedStyle(element, null).getPropertyValue(prop);\n            } else {\n                return element.style[prop];\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         * @param {Function}    resized\n         */\n        function attachResizeEvent(element, resized) {\n            if (!element.resizedAttached) {\n                element.resizedAttached = new EventQueue();\n                element.resizedAttached.add(resized);\n            } else if (element.resizedAttached) {\n                element.resizedAttached.add(resized);\n                return;\n            }\n\n            element.resizeSensor = document.createElement('div');\n            element.resizeSensor.className = 'resize-sensor';\n            var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: scroll; z-index: -1; visibility: hidden;';\n            var styleChild = 'position: absolute; left: 0; top: 0;';\n\n            element.resizeSensor.style.cssText = style;\n            element.resizeSensor.innerHTML =\n                '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\n                '<div style=\"' + styleChild + '\"></div>' +\n                '</div>' +\n                '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\n                '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\n                '</div>';\n            element.appendChild(element.resizeSensor);\n\n            if (!{fixed: 1, absolute: 1}[getComputedStyle(element, 'position')]) {\n                element.style.position = 'relative';\n            }\n\n            var expand = element.resizeSensor.childNodes[0];\n            var expandChild = expand.childNodes[0];\n            var shrink = element.resizeSensor.childNodes[1];\n            var shrinkChild = shrink.childNodes[0];\n\n            var lastWidth, lastHeight;\n\n            var reset = function() {\n                expandChild.style.width = expand.offsetWidth + 10 + 'px';\n                expandChild.style.height = expand.offsetHeight + 10 + 'px';\n                expand.scrollLeft = expand.scrollWidth;\n                expand.scrollTop = expand.scrollHeight;\n                shrink.scrollLeft = shrink.scrollWidth;\n                shrink.scrollTop = shrink.scrollHeight;\n                lastWidth = element.offsetWidth;\n                lastHeight = element.offsetHeight;\n            };\n\n            reset();\n\n            var changed = function() {\n                if (element.resizedAttached) {\n                    element.resizedAttached.call();\n                }\n            };\n\n            var addEvent = function(el, name, cb) {\n                if (el.attachEvent) {\n                    el.attachEvent('on' + name, cb);\n                } else {\n                    el.addEventListener(name, cb);\n                }\n            };\n\n            addEvent(expand, 'scroll', function() {\n                if (element.offsetWidth > lastWidth || element.offsetHeight > lastHeight) {\n                    changed();\n                }\n                reset();\n            });\n\n            addEvent(shrink, 'scroll',function() {\n                if (element.offsetWidth < lastWidth || element.offsetHeight < lastHeight) {\n                    changed();\n                }\n                reset();\n            });\n        }\n\n        if (\"[object Array]\" === Object.prototype.toString.call(element)\n            || ('undefined' !== typeof jQuery && element instanceof jQuery) //jquery\n            || ('undefined' !== typeof Elements && element instanceof Elements) //mootools\n        ) {\n            var i = 0, j = element.length;\n            for (; i < j; i++) {\n                attachResizeEvent(element[i], callback);\n            }\n        } else {\n            attachResizeEvent(element, callback);\n        }\n\n        this.detach = function() {\n            ResizeSensor.detach(element);\n        };\n    };\n\n    this.ResizeSensor.detach = function(element) {\n        if (element.resizeSensor) {\n            element.removeChild(element.resizeSensor);\n            delete element.resizeSensor;\n            delete element.resizedAttached;\n        }\n    };\n\n})();\ndefine(\"qui/lib/element-query/ResizeSensor\", function(){});\n\n","\n/**\n * QUI control Manager\n *\n * @module qui/classes/Controls\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require require\n * @require qui/classes/DOM\n */\n\ndefine('qui/classes/Controls', [\n\n    'require',\n    'qui/classes/DOM',\n    'qui/lib/element-query/ElementQuery',\n    'qui/lib/element-query/ResizeSensor'\n\n], function(require, DOM)\n{\n    \"use strict\";\n\n    /**\n     * @class qui/classes/Controls\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Extends : DOM,\n        Type    : 'qui/classes/Controls',\n\n        initialize : function()\n        {\n            this.$controls = {};\n            this.$cids     = {};\n            this.$types    = {};\n\n            this.ElementQueries = new ElementQueries();\n        },\n\n        /**\n         * Return all controls with tha name\n         *\n         * @method qui/classes/Controls#get\n         * @param {String} n - Name of the Control\n         * @return {Array} All Controls with the needle name\n         */\n        get : function(n)\n        {\n            if ( typeof this.$controls[ n ] === 'undefined' ) {\n                return [];\n            }\n\n            return this.$controls[ n ];\n        },\n\n        /**\n         * Get the Controls by its unique id\n         *\n         * @method qui/classes/Controls#getById\n         * @param {String|Number} id - ID of the wanted Control\n         * @return {Object|Boolean} (qui/controls/Control) a QUI control, based on qui/controls/Control or false\n         */\n        getById : function(id)\n        {\n            if ( id in this.$cids ) {\n                return this.$cids[ id ];\n            }\n\n            return false;\n        },\n\n        /**\n         * Return all controls from a type\n         *\n         * @method qui/classes/Controls#getByType\n         * @return {Array}\n         */\n        getByType : function(type)\n        {\n            if ( type in this.$types ) {\n                return this.$types[ type ];\n            }\n\n            return [];\n        },\n\n        /**\n         * Load a control by a control type\n         *\n         * @method qui/classes/Controls#loadType\n         * @param {String} type\n         * @param {Function} onload\n         *\n         * @example QUI.Controls.loadType('qui/controls/taskbar/Task', function(Modul) { })\n         * @deprecated\n         */\n        loadType : function(type, onload)\n        {\n            if ( !type.match( /qui\\// ) ) {\n                type = 'qui/'+ type;\n            }\n\n            require( [ type ] , onload );\n        },\n\n        /**\n         * Is the Object a QUI Control?\n         *\n         * @method qui/controls/Control#isControl\n         * @return {Boolean} Obj - true or false\n         */\n        isControl : function(Obj)\n        {\n            if ( typeof Obj === 'undefined' || !Obj ) {\n                return false;\n            }\n\n            return typeof Obj.getType !== 'undefined';\n        },\n\n        /**\n         * Add a Control to the list\n         *\n         * @method qui/controls/Control#add\n         * @param {Object} Control - (qui/controls/Control)\n         */\n        add : function(Control)\n        {\n            var s = this,\n                n = Control.getAttribute( 'name' ),\n                t = typeOf( Control );\n\n            if ( !n || n === '' ) {\n                n = '#unknown';\n            }\n\n            if ( typeof this.$controls[ n ] === 'undefined' ) {\n                this.$controls[ n ] = [];\n            }\n\n            if ( typeof this.$types[ t ] === 'undefined' ) {\n                this.$types[ t ] = [];\n            }\n\n            this.$controls[ n ].push( Control );\n            this.$types[ t ].push( Control );\n\n            this.$cids[ Control.getId() ] = Control;\n\n            Control.addEvent('onDestroy', function() {\n                s.destroy( Control );\n            });\n        },\n\n        /**\n         * Destroy a Control\n         *\n         * @method qui/controls/Control#destroy\n         * @param {Object} Control - (qui/controls/Control)\n         */\n        destroy : function(Control)\n        {\n            var n  = Control.getAttribute( 'name' ),\n                t  = typeOf( Control ),\n                id = Control.getId();\n\n            if ( !n || n === '' ) {\n                n = '#unknown';\n            }\n\n            if ( typeof this.$cids[ id ] !== 'undefined' ) {\n                delete this.$cids[ id ];\n            }\n\n            var i, len;\n            var tmp = [];\n\n            // refresh controls\n            if ( typeof this.$controls[ n ] !== 'undefined' )\n            {\n                for ( i = 0, len = this.$controls[ n ].length; i < len; i++ )\n                {\n                    if ( id !== this.$controls[ n ][ i ].getId() ) {\n                        tmp.push( this.$controls[ n ][ i ] );\n                    }\n                }\n\n                this.$controls[ n ] = tmp;\n\n                if ( !tmp.length ) {\n                    delete this.$controls[ n ];\n                }\n            }\n\n            // refresh types\n            tmp = [];\n\n            if ( typeof this.$types[ t ] !== 'undefined' )\n            {\n                for ( i = 0, len = this.$types[ t ].length; i < len; i++ )\n                {\n                    if ( id !== this.$types[ t ][ i ].getId() ) {\n                        tmp.push( this.$types[ t ][ i ] );\n                    }\n                }\n            }\n\n            this.$types[ t ] = tmp;\n        }\n    });\n});\n"]}