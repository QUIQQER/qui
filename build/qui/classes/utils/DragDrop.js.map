{"version":3,"file":"DragDrop.js","sources":["../DOM.js","DragDrop.js"],"names":[],"mappings":"AAeA,OAAA,qBAAA,WAEA,YAeA,OAbA,QAAA,eAaA,GAAA,QAEA,YAAA,QAAA,QACA,KAAA,kBAEA,WACA,KAAA,KAEA,WAAA,SAAA,GAEA,EAAA,MAEA,EAAA,SAEA,KAAA,UAAA,EAAA,cACA,GAAA,QAGA,EAAA,UAEA,OAAA,OAAA,KAAA,EAAA,eACA,GAAA,SAGA,KAAA,cAAA,GACA,KAAA,UAAA,QAAA,QAUA,QAAA,WAEA,MAAA,mBAAA,MAAA,KACA,KAAA,KAGA,OAAA,OASA,MAAA,WAMA,MAJA,MAAA,OACA,KAAA,KAAA,OAAA,YAGA,KAAA,MASA,QAAA,WAEA,MAAA,QAAA,OAeA,aAAA,SAAA,EAAA,GAIA,GAFA,KAAA,UAAA,gBAAA,EAAA,IAEA,mBAAA,MAAA,QAAA,GAGA,YADA,KAAA,QAAA,GAAA,EAIA,IAAA,GAAA,MAAA,MAAA,KAQA,OANA,mBAAA,QAAA,YAAA,KACA,OAAA,YAAA,OAGA,OAAA,YAAA,GAAA,GAAA,EAEA,MAQA,QAAA,WAEA,KAAA,UAAA,WAAA,MAGA,IAAA,GAAA,MAAA,MAAA,KAEA,KAAA,QAAA,mBACA,QAAA,YAAA,GAGA,KAAA,gBASA,WAAA,SAAA,GAEA,KAAA,cAAA,IAgBA,cAAA,SAAA,GAEA,EAAA,KAEA,KAAA,GAAA,KAAA,GACA,KAAA,aAAA,EAAA,EAAA,GAGA,OAAA,OAWA,aAAA,SAAA,GAEA,GAAA,IAAA,MAAA,QACA,MAAA,MAAA,QAAA,EAGA,IAAA,GAAA,MAAA,MAAA,KAEA,OAAA,mBAAA,QAAA,YAAA,IACA,EAGA,mBAAA,QAAA,YAAA,GAAA,GACA,OAAA,YAAA,GAAA,IAGA,GAUA,iBAAA,WAEA,MAAA,MAAA,iBASA,cAAA,WAEA,MAAA,MAAA,SAQA,qBAAA,WAEA,GAAA,GAAA,MAAA,MAAA,KAEA,OAAA,KAAA,QAAA,YACA,OAAA,YAAA,OAaA,eAAA,SAAA,GAEA,GAAA,mBAAA,MAAA,QAAA,GACA,OAAA,CAGA,IAAA,GAAA,MAAA,MAAA,KAEA,OAAA,QAAA,YAAA,IAAA,OAAA,YAAA,GAAA,IACA,GAGA,GAUA,UAAA,SAAA,GAEA,MAAA,mBAAA,MAAA,SACA,EAGA,mBAAA,MAAA,QAAA,GACA,KAAA,QAAA,IAGA,OCnRA,OAAA,8BAAA,mBAAA,SAAA,GAEA,YAUA,OAAA,IAAA,QAEA,QAAA,EACA,KAAA,6BAEA,OACA,YACA,UACA,UACA,WACA,YAGA,SAEA,WAAA,SAAA,MACA,QAAA,EACA,UAAA,EACA,MAAA,IAEA,OACA,GAAA,EACA,GAAA,IAIA,WAAA,SAAA,EAAA,GAEA,GAAA,GAAA,IAEA,MAAA,OAAA,GAEA,KAAA,MAAA,KACA,KAAA,SAAA,EACA,KAAA,SAAA,EAGA,EAAA,WAEA,UAAA,SAAA,GAEA,EAAA,UAIA,EAAA,aAAA,aAAA,GAEA,EAAA,OAAA,EAAA,OAAA,MACA,EAAA,aAAA,SACA,EACA,GAGA,EAAA,SAGA,QAAA,SAAA,GAEA,mBAAA,GAAA,QACA,aAAA,EAAA,QAGA,EAAA,MAAA,OAWA,OAAA,WAEA,MAAA,MAAA,MAQA,OAAA,WAEA,KAAA,SAAA,GAQA,QAAA,WAEA,KAAA,SAAA,GASA,OAAA,SAAA,GAEA,GAAA,KAAA,WAIA,EAAA,YAIA,QAAA,KAIA,KAAA,aAAA,eAIA,KAAA,aAAA,cAAA,CAIA,KAAA,aAAA,cAAA,EAEA,IAEA,GAAA,EAAA,KAAA,EACA,EAAA,EAAA,KAAA,EAEA,EAAA,KAAA,SACA,EAAA,EAAA,UACA,EAAA,KAAA,aAAA,SACA,EAAA,SAAA,KAAA,SAGA,MAAA,MAAA,GAAA,SAAA,OACA,QAAA,MACA,QACA,SAAA,WACA,IAAA,EAAA,GACA,KAAA,EAAA,GACA,OAAA,IACA,WAAA,OACA,QAAA,EACA,MAAA,OACA,QAAA,GACA,OAAA,UAEA,MAAA,EAAA,EACA,OAAA,EAAA,EACA,WAAA,sBAEA,OAAA,SAAA,MAEA,KAAA,aAAA,WACA,KAAA,MAAA,UAAA,KAAA,aAAA,WAGA,KAAA,aAAA,aACA,KAAA,MAAA,SAAA,KAAA,aAAA,aAQA,KAAA,MAAA,QACA,KAAA,UAAA,SAAA,KAAA,KAAA,MAAA,IAGA,EAAA,IACA,EAAA,GAAA,EAAA,EAAA,EAAA,KAAA,MAAA,UAAA,IAGA,EAAA,IACA,EAAA,GAAA,EAAA,EAAA,EAAA,KAAA,MAAA,UAAA,GAGA,IAAA,GAAA,KAAA,aAAA,YAEA,WAAA,OAAA,KACA,EAAA,EAAA,KAAA,MAIA,GAAA,MAAA,KAAA,KAAA,OACA,cAAA,EAEA,WAAA,EACA,WAAA,KAAA,UACA,OAAA,KAAA,QACA,QAAA,KAAA,SACA,QAAA,KAAA,SACA,OAAA,KAAA,QAEA,MAAA,IAEA,OACA,MACA,EAAA,EACA,EAAA,OAUA,MAAA,WAEA,IAAA,QAAA,IAAA,CAMA,IAAA,KAAA,aAAA,cAGA,WADA,MAAA,aAAA,aAAA,EAIA,MAAA,aAAA,cAAA,IAEA,mBAAA,MAAA,OAAA,KAAA,SAEA,KAAA,UAAA,QAAA,KAAA,KAAA,QAEA,KAAA,MAAA,UACA,KAAA,MAAA,QAUA,UAAA,SAAA,GAEA,KAAA,UAAA,YAAA,KAAA,IACA,KAAA,SAUA,QAAA,SAAA,EAAA,GAEA,KAAA,UAAA,QAAA,KAAA,EAAA,KAWA,QAAA,SAAA,EAAA,EAAA,GAEA,KAAA,UAAA,QAAA,KAAA,EAAA,EAAA,KAUA,SAAA,SAAA,EAAA,GAEA,KAAA,UAAA,SAAA,KAAA,EAAA,KAUA,SAAA,SAAA,EAAA,GAEA,KAAA,UAAA,SAAA,KAAA,EAAA","sourcesContent":["\n/**\n * The DOM class emulate similar methods\n * like a DOMNode to a normal Object\n *\n * Its easy to use and most classes inherit from {qui/classes/DOM}\n * All objects that inherited from {qui/classes/DOM} can easily extend with Attributes.\n *\n * @module qui/classes/DOM\n * @author www.quiqqer.com (Henning Leutz)\n *\n * @event onDestroy [this]\n * @event onSetAttribute [key, value]\n */\n\ndefine('qui/classes/DOM',[],function()\n{\n    \"use strict\";\n\n    window.$quistorage = {};\n\n    /**\n     * The DOM class emulate similar methods\n     * like a DOMNode to a normal Object\n     *\n     * @class qui/classes/DOM\n     *\n     * @param {Object} options -\n     *         With options you can set attributes or extend the Object width methods and events\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Implements : [ Options, Events ],\n        Type       : 'qui/classes/DOM',\n\n        options : {},\n        $uid    : null,\n\n        initialize : function(options)\n        {\n            options = options || {};\n\n            if ( options.events )\n            {\n                this.addEvents( options.events );\n                delete options.events;\n            }\n\n            if ( options.methods )\n            {\n                Object.append( this, options.methods );\n                delete options.methods;\n            }\n\n            this.setAttributes( options );\n            this.fireEvent( 'init', [ this ] );\n        },\n\n        /**\n         * If this.TYPE is set, this.Type will be return\n         *\n         * @method qui/classes/DOM#$family\n         * @return {String} Type of the Object\n         * @ignore\n         */\n        $family : function()\n        {\n            if ( typeof this.Type !== 'undefined' ) {\n                return this.Type;\n            }\n\n            return typeOf( this );\n        },\n\n        /**\n         * Get the Unique ID from the Object\n         *\n         * @method qui/classes/DOM#getId\n         * @return {String} Object ID\n         */\n        getId : function()\n        {\n            if ( !this.$uid ) {\n                this.$uid = String.uniqueID();\n            }\n\n            return this.$uid;\n        },\n\n        /**\n         * Get the type from the Object\n         *\n         * @method qui/classes/DOM#getType\n         * @return {String} The type of the object\n         */\n        getType : function()\n        {\n            return typeOf( this );\n        },\n\n        /**\n         * Set an attribute to the Object\n         * You can extend the Object with everything you like\n         * You can extend the Object width more than the default options\n         *\n         * @method qui/classes/DOM#setAttribute\n         *\n         * @param {String} k - Name of the Attribute\n         * @param {Object|String|Integer|Array} v - value\n         *\n         * @return {this} The wanted attribute\n         */\n        setAttribute : function(k, v)\n        {\n            this.fireEvent('setAttribute', [ k, v ]);\n\n            if ( typeof this.options[ k ] !== 'undefined' )\n            {\n                this.options[ k ] = v;\n                return;\n            }\n\n            var oid = Slick.uidOf( this );\n\n            if ( typeof window.$quistorage[ oid ] === 'undefined' ) {\n                window.$quistorage[ oid ] = {};\n            }\n\n            window.$quistorage[ oid ][ k ] = v;\n\n            return this;\n        },\n\n        /**\n         * Destroy the Object and all relationsships to some Object\n         *\n         * @method qui/classes/DOM#destroy\n         */\n        destroy : function()\n        {\n            this.fireEvent( 'destroy', [ this ] );\n\n            // storage clear\n            var oid = Slick.uidOf( this );\n\n            if ( oid in window.$quistorage ) {\n                delete window.$quistorage[ oid ];\n            }\n\n            this.removeEvents();\n        },\n\n        /**\n         * Alias for setAttributes, please use setAttributes()\n         *\n         * @see qui/classes/DOM#setAttributes()\n         * @method qui/classes/DOM#setOptions\n         */\n        setOptions : function(options)\n        {\n            this.setAttributes( options );\n        },\n\n        /**\n         * If you want set more than one attribute\n         *\n         * @method qui/classes/DOM#setAttributes\n         *\n         * @param {Object} attributes - Object with attributes\n         * @return {this} self\n         *\n         * @example Object.setAttributes({\n         *   attr1 : '1',\n         *   attr2 : []\n         * })\n         */\n        setAttributes : function(attributes)\n        {\n            attributes = attributes || {};\n\n            for ( var k in attributes ) {\n                this.setAttribute( k, attributes[k] );\n            }\n\n            return this;\n        },\n\n        /**\n         * Return an attribute of the Object\n         * returns the not the default attributes, too\n         *\n         * @method qui/classes/DOM#setAttribute\n         * @param {Object} attributes - Object width attributes\n         * @return {unknown_type|Bool} attribute\n         */\n        getAttribute : function(k)\n        {\n            if ( k in this.options ) {\n                return this.options[ k ];\n            }\n\n            var oid = Slick.uidOf( this );\n\n            if ( typeof window.$quistorage[ oid ] === 'undefined' ) {\n                return false;\n            }\n\n            if ( typeof window.$quistorage[ oid ][ k ] !== 'undefined' ) {\n                return window.$quistorage[ oid ][ k ];\n            }\n\n            return false;\n        },\n\n        /**\n         * Alias for getAttributes, please use getAttributes()\n         *\n         * @method qui/classes/DOM#getAllAttributes\n         * @see qui/classes/DOM#getAttributes()\n         * @depricated\n         */\n        getAllAttributes : function()\n        {\n            return this.getAttributes();\n        },\n\n        /**\n         * Return the default attributes\n         *\n         * @method qui/classes/DOM#getAttributes\n         * @return {Object} attributes\n         */\n        getAttributes : function()\n        {\n            return this.options;\n        },\n\n        /**\n         * Return the attributes which stored into the QUI Storage\n         *\n         * @return {Object}\n         */\n        getStorageAttributes : function()\n        {\n            var oid = Slick.uidOf( this );\n\n            if ( oid in window.$quistorage  ) {\n                return window.$quistorage[ oid ];\n            }\n\n            return {};\n        },\n\n        /**\n         * Return true if a attribute exist\n         *\n         * @method qui/classes/DOM#existAttribute\n         * @param {String} k - wanted attribute\n         * @return {Bool} true or false\n         */\n        existAttribute : function(k)\n        {\n            if ( typeof this.options[ k ] !== 'undefined' ) {\n                return true;\n            }\n\n            var oid = Slick.uidOf( this );\n\n            if ( window.$quistorage[ oid ] && window.$quistorage[ oid ][ k ] ) {\n                return true;\n            }\n\n            return false;\n        },\n\n        /**\n         * Return the binded functions of the event name\n         *\n         * @method qui/classes/DOM#existAttribute\n         * @param {String} eventname - wanted event\n         * @return {Array|false} Event list\n         */\n        getEvents : function(eventname)\n        {\n            if ( typeof this.$events === 'undefined') {\n                return false;\n            }\n\n            if ( typeof this.$events[ eventname ] !== 'undefined') {\n                return this.$events[ eventname ];\n            }\n\n            return false;\n        }\n    });\n});\n\n","\n/**\n * DragDrop Helper with movable Element\n * no ie8\n *\n * @module qui/classes/utils/DragDrop\n * @author www.pcsg.de (Henning Leutz)\n *\n * @requires qui/classes/DOM\n *\n * @event onStart [ this, Dragable, event ]\n * @event onStop [ this, Dragable ]\n * @event onDrag [ this, Element, Droppable, event ]\n * @event onDrop [ this, Element, Droppable, event ]\n * @event onLeave [ this, Element, Droppable ]\n * @event onEnter [ this, Element, Droppable ]\n * @event onComplete [ this, event ]\n */\n\ndefine('qui/classes/utils/DragDrop',['qui/classes/DOM'], function(DOM)\n{\n    \"use strict\";\n\n    /**\n     * @class qui/classes/utils/DragDrop\n     *\n     * @param {DOMNode} Element - Which Element is dragable\n     * @param {Object} options  - QDOM params\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Extends : DOM,\n        Type    : 'qui/classes/utils/DragDrop',\n\n        Binds : [\n             '$complete',\n             '$onDrag',\n             '$onDrop',\n             '$onLeave',\n             '$onEnter'\n        ],\n\n        options :\n        {\n            dropables : [ document.body ],\n            styles    : false,\n            cssClass  : false,\n            delay     : 500,     // when trigger the dragdrop, after miliseconds\n\n            limit : {\n                x : false, // [min, max]\n                y : false  // [min, max]\n            }\n        },\n\n        initialize : function(Elm, options)\n        {\n            var self = this;\n\n            this.parent( options );\n\n            this.$Drag    = null;\n            this.$Element = Elm;\n            this.$enable  = true;\n\n\n            Elm.addEvents({\n\n                mousedown : function(event)\n                {\n                    if ( !self.$enable ) {\n                        return;\n                    }\n\n                    self.setAttribute( '_stopdrag', false );\n\n                    self.$timer = self.$start.delay(\n                        self.getAttribute('delay'),\n                        self,\n                        event\n                    );\n\n                    event.stop();\n                },\n\n                mouseup : function(event)\n                {\n                    if ( typeof self.$timer !== 'undefined' ) {\n                        clearTimeout( self.$timer );\n                    }\n\n                    self.$stop( event );\n                }\n            });\n        },\n\n        /**\n         * Return the binded Element\n         *\n         * @method qui/classes/utils/DragDrop#getElm\n         * @return {DOMNode} Main Dom-Node Element\n         */\n        getElm : function()\n        {\n            return this.$Elm;\n        },\n\n        /**\n         * Enable the DragDrop\n         *\n         * @method qui/classes/utils/DragDrop#enable\n         */\n        enable : function()\n        {\n            this.$enable = true;\n        },\n\n        /**\n         * Disable the DragDrop\n         *\n         * @method qui/classes/utils/DragDrop#disable\n         */\n        disable : function()\n        {\n            this.$enable = false;\n        },\n\n        /**\n         * Starts the draging by onmousedown\n         *\n         * @method qui/classes/utils/DragDrop#$start\n         * @param {DOMEvent} event\n         */\n        $start : function(event)\n        {\n            if ( !this.$enable ) {\n                return;\n            }\n\n            if ( event.rightClick ) {\n                return;\n            }\n\n            if ( Browser.ie8 ) {\n                return;\n            }\n\n            if ( this.getAttribute( '_mousedown') ) {\n                return;\n            }\n\n            if ( this.getAttribute( '_stopdrag' ) ) {\n                return;\n            }\n\n            this.setAttribute( '_mousedown', true );\n\n            var i, len;\n\n            var mx = event.page.x,\n                my = event.page.y,\n\n                Elm     = this.$Element,\n                ElmSize = Elm.getSize(),\n                limit   = this.getAttribute('limit'),\n                docsize = document.body.getSize();\n\n            // create the shadow element\n            this.$Drag = new Element('div', {\n                'class' : 'box',\n                styles : {\n                    position   : 'absolute',\n                    top        : my - 20,\n                    left       : mx - 40,\n                    zIndex     : 1000,\n                    MozOutline : 'none',\n                    outline    : 0,\n                    color      : '#fff',\n                    padding    : 10,\n                    cursor     : 'pointer',\n\n                    width      : ElmSize.x,\n                    height     : ElmSize.y,\n                    background : 'rgba(0,0,0, 0.5)'\n                }\n            }).inject( document.body );\n\n            if ( this.getAttribute( 'styles' ) ) {\n                this.$Drag.setStyles( this.getAttribute( 'styles' ) );\n            }\n\n            if ( this.getAttribute( 'cssClass' ) ) {\n                this.$Drag.addClass( this.getAttribute( 'cssClass' ) );\n            }\n\n\n            // set the drag&drop events to the shadow element\n            // this.$Drag.addEvent( 'mouseup', this.$stop.bind( this ) );\n            // document.body.addEvent( 'mouseup', this.$stop.bind( this ) );\n\n            this.$Drag.focus();\n            this.fireEvent( 'start', [ this, this.$Drag, event ] );\n\n            // if no limit exist, set it to the body\n            if ( !limit.x ) {\n                limit.x = [ 0, docsize.x - this.$Drag.getSize().x ];\n            }\n\n            if ( !limit.y ) {\n                limit.y = [ 0, docsize.y - this.$Drag.getSize().y ];\n            }\n\n            var dropables = this.getAttribute( 'dropables' );\n\n            if ( typeOf( dropables ) === 'array' ) {\n                dropables = dropables.join( ',' );\n            }\n\n            // mootools draging\n            new Drag.Move(this.$Drag, {\n                precalculate : true,\n\n                droppables : dropables,\n                onComplete : this.$complete,\n                onDrop     : this.$onDrop,\n                onEnter    : this.$onEnter,\n                onLeave    : this.$onLeave,\n                onDrag     : this.$onDrag,\n\n                limit : limit\n\n            }).start({\n                page: {\n                    x : mx,\n                    y : my\n                }\n            });\n        },\n\n        /**\n         * Stops the Draging by onmouseup\n         *\n         * @method qui/classes/utils/DragDrop#$stop\n         */\n        $stop : function()\n        {\n            if ( Browser.ie8 ) {\n                return;\n            }\n\n            // Wenn noch kein mousedown drag getätigt wurde\n            // mousedown \"abbrechen\" und onclick ausführen\n            if ( !this.getAttribute( '_mousedown' ) )\n            {\n                this.setAttribute( '_stopdrag', true );\n                return;\n            }\n\n            this.setAttribute( '_mousedown', false );\n\n            if ( typeof this.$Drag !== 'undefined' || this.$Drag )\n            {\n                this.fireEvent( 'stop', [ this, this.$Drag ] );\n\n                this.$Drag.destroy();\n                this.$Drag = null;\n            }\n        },\n\n        /**\n         * Draging is complete\n         *\n         * @method qui/classes/utils/DragDrop#$complete\n         * @param {DOMEvent} event\n         */\n        $complete : function(event)\n        {\n            this.fireEvent( 'complete', [ this, event ] );\n            this.$stop();\n        },\n\n        /**\n         * event: fired on every drag step\n         *\n         * @method qui/classes/utils/DragDrop#$onDrag\n         * @param {DOMNode} Element\n         * @param {DOMEvent} event\n         */\n        $onDrag : function(Element, event)\n        {\n            this.fireEvent( 'drag', [ this, Element, event ] );\n        },\n\n        /**\n         * event: if the drag drop would be droped to a dopable\n         *\n         * @method qui/classes/utils/DragDrop#$onDrop\n         * @param {DOMNode} Element\n         * @param {DOMNode} Dropable\n         * @param {DOMEvent} event\n         */\n        $onDrop : function(Element, Dropable, event)\n        {\n            this.fireEvent( 'drop', [ this, Element, Dropable, event ] );\n        },\n\n        /**\n         * If the drag drop enters a dropable\n         *\n         * @method qui/classes/utils/DragDrop#$onDrop\n         * @param {DOMNode} Element\n         * @param {DOMNode} Dropable\n         */\n        $onEnter : function(Element, Dropable)\n        {\n            this.fireEvent( 'enter', [ this, Element, Dropable ] );\n        },\n\n        /**\n         * If the drag drop leaves a dropable\n         *\n         * @method qui/classes/utils/DragDrop#$onLeave\n         * @param {DOMNode} Element\n         * @param {DOMNode} Dropable\n         */\n        $onLeave : function(Element, Dropable)\n        {\n            this.fireEvent( 'leave', [ this, Element, Dropable ] );\n        }\n    });\n});\n\n"]}