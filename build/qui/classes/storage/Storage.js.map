{"version":3,"file":"Storage.js","sources":["Storage.js"],"names":[],"mappings":"AAeA,GAAA,SAAA,oBAEA,mBAAA,QAAA,cACA,mBAAA,QAAA,iBAEA,OAAA,KAAA,gCAGA,OAAA,8BAAA,OAAA,SAAA,GAEA,YASA,OAAA,IAAA,QAEA,QAAA,EACA,KAAA,8BAEA,SASA,IAAA,SAAA,EAAA,GAEA,IAEA,OAAA,aAAA,QAAA,EAAA,GAEA,MAAA,GAEA,KAAA,MAAA,GAAA,IAWA,IAAA,SAAA,GAEA,IAEA,MAAA,QAAA,aAAA,QAAA,GAEA,MAAA,IAKA,MAAA,mBAAA,MAAA,MAAA,GACA,KAAA,MAAA,GAGA,MASA,OAAA,SAAA,GAEA,IAEA,OAAA,aAAA,WAAA,GAEA,MAAA,IAKA,mBAAA,MAAA,MAAA,UACA,MAAA,MAAA,IASA,MAAA,WAEA,KAAA,QAEA,KAEA,OAAA,aAAA,QAEA,MAAA","sourcesContent":["\n/**\n * Use Local storage, with fallbacks\n * if local storage not exist, it loads the polyfill\n *\n * some browsers cant use local storage in private mode,\n * so it use internal object storage, therefore the data are kept only in the session\n *\n * @module qui/classes/storage/Storage\n * @author www.pcsg.de (Henning Leutz)\n *\n * @require qui/classes/DOM\n * @require [optional] qui/classes/storage/Polyfill\n */\n\nvar needle = ['qui/classes/DOM'];\n\nif ( typeof window.localStorage === 'undefined' ||\n     typeof window.sessionStorage === 'undefined')\n{\n    needle.push( 'qui/classes/storage/Polyfill' );\n}\n\ndefine('qui/classes/storage/Storage', needle, function(QDOM, Polyfill)\n{\n    \"use strict\";\n\n    /**\n     * Local storage\n     *\n     * @class qui/classes/storage/Storage\n     *\n     * @memberof! <global>\n     */\n    return new Class({\n\n        Extends : QDOM,\n        Type    : 'qui/classes/storage/Storage',\n\n        $data : {},\n\n        /**\n         * Set the value of a key\n         *\n         * @method qui/classes/storage/Storage#set\n         * @param {String} key\n         * @param {String|Integer} value\n         */\n        set : function(key, value)\n        {\n            try\n            {\n                window.localStorage.setItem( key, value );\n\n            } catch ( e )\n            {\n                this.$data[ key ] = value;\n            }\n        },\n\n        /**\n         * Return the value of stored the key\n         *\n         * @method qui/classes/storage/Storage#get\n         * @param {String} key\n         * @return {unknown_type} the wanted storage\n         */\n        get : function(key)\n        {\n            try\n            {\n                return window.localStorage.getItem( key );\n\n            } catch ( e )\n            {\n\n            }\n\n            if ( typeof this.$data[ key ] !== 'undefined' ) {\n                return this.$data[ key ];\n            }\n\n            return null;\n        },\n\n        /**\n         * Remove a stored key\n         *\n         * @method qui/classes/storage/Storage#remove\n         * @param {String} key\n         */\n        remove : function(key)\n        {\n            try\n            {\n                window.localStorage.removeItem( key );\n\n            } catch ( e )\n            {\n\n            }\n\n            if ( typeof this.$data[ key ] !== 'undefined' ) {\n                delete this.$data[ key ];\n            }\n        },\n\n        /**\n         * Clear the storage\n         *\n         * @method qui/classes/storage/Storage#clear\n         */\n        clear : function()\n        {\n            this.$data = {};\n\n            try\n            {\n                window.localStorage.clear();\n\n            } catch ( e )\n            {\n\n            }\n        }\n    });\n});\n\n"]}